var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AllContributionsCount.html",[0,2.871,1,3.698]],["body/interfaces/AllContributionsCount.html",[0,1.682,1,3.417,2,2.167,3,0.027,4,0.027,5,0.024,6,1.175,7,1.91,8,3.215,9,2.434,10,0.113,11,0.694,12,5.833,13,0.71,14,0.119,15,0.005,16,0.091,17,0.8,18,1.362,19,0.385,20,1.41,21,3.75,22,0.669,23,1.156,24,0.846,25,0.974,26,1.05,27,1.844,28,2.288,29,2.068,30,3.128,31,1.309,32,2.285,33,2.285,34,2.167,35,3.261,36,2.434,37,2.653,38,2.068,39,3.261,40,4.751,41,2.434,42,1.984,43,3.604,44,3.604,45,3.261,46,2.434,47,1.984,48,2.285,49,2.167,50,2.632,51,2.632,52,2.167,53,2.632,54,0.029,55,0.099,56,1.984,57,0.792,58,2.434,59,0.87,60,1.709,61,2.434,62,1.239,63,2.324,64,2.148,65,2.434,66,1.384,67,1.324,68,2.632,69,1.005,70,3.6,71,2.067,72,3.361,73,3.232,74,2.632,75,4.221,76,6.236,77,4.461,78,2.581,79,4.151,80,6.197,81,4.583,82,3.274,83,5.139,84,2.653,85,5.4,86,5.833,87,7.708,88,4.151,89,1.111,90,1.682,91,2.434,92,2.068,93,1.285,94,1.518,95,2.068,96,1.637,97,2.434,98,2.632,99,2.632,100,1.927,101,1.835,102,3.261,103,2.632,104,0.732,105,4.545,106,2.167,107,3.147,108,1.754,109,2.632,110,4.151,111,2.632,112,3.417,113,2.632,114,5.748,115,3.604,116,6.056,117,4.151,118,2.632,119,4.151,120,2.632,121,4.151,122,2.632,123,1.154,124,5.334,125,3.748,126,6.348,127,2.632,128,4.151,129,5.139,130,4.151,131,4.151,132,4.151,133,4.151,134,2.632,135,4.151,136,2.632,137,1.595,138,4.461,139,2.632,140,2.632,141,2.148,142,2.632,143,3.042,144,1.988,145,2.632,146,2.632,147,2.167,148,2.167,149,1.785,150,2.167,151,2.632,152,2.632,153,4.151,154,2.632,155,5.833,156,2.632,157,5.809,158,2.632,159,2.632,160,6.961,161,6.58,162,2.632,163,2.632,164,2.632,165,5.139,166,2.632,167,2.632,168,2.632,169,2.632,170,5.139,171,2.632,172,2.632,173,2.632,174,2.632,175,5.139,176,2.632,177,2.285,178,2.285,179,2.632,180,2.632,181,2.632,182,2.167,183,2.632,184,2.434,185,2.632,186,2.632,187,2.632,188,2.632,189,2.285,190,2.632,191,2.632,192,2.632,193,2.632,194,1.118,195,2.434,196,2.632,197,2.167,198,2.434,199,2.632,200,1.91,201,2.632,202,1.335,203,1.555,204,1.984,205,2.632,206,1.682,207,3.604,208,1.853,209,2.167,210,2.632,211,2.434,212,2.632,213,0.568,214,2.632,215,3.837,216,2.632,217,2.632,218,1.984,219,1.984,220,2.632,221,2.632,222,2.632,223,2.632,224,2.632,225,2.632,226,2.632,227,7.06,228,2.632,229,2.632,230,5.855,231,6.236,232,5.552,233,5.139,234,5.139,235,5.139,236,5.139,237,5.139,238,3.985,239,5.139,240,2.632,241,2.632,242,0.002,243,0.002]],["title/modules/ApiServicesModule.html",[244,1.282,245,3.047]],["body/modules/ApiServicesModule.html",[3,0.067,4,0.067,5,0.06,15,0.005,16,0.088,19,0.968,54,0.074,55,0.25,242,0.004,243,0.004,244,2.255,245,6.223,246,2.765,247,3.469,248,6.616,249,6.616,250,6.616,251,5.572,252,3.469,253,2.857,254,2.81,255,7.374,256,7.374,257,3.653,258,3.787,259,7.374]],["title/modules/AppModule.html",[244,1.282,260,3.9]],["body/modules/AppModule.html",[3,0.025,4,0.025,5,0.022,7,1.782,8,1.353,14,0.222,15,0.005,16,0.105,19,0.359,22,0.624,24,0.79,27,2.752,29,1.929,54,0.027,55,0.093,57,0.739,59,1.298,60,1.151,94,1.416,100,1.298,108,1.181,137,1.488,202,2.845,213,1.324,242,0.002,243,0.002,244,1.121,246,1.026,247,1.724,252,1.724,253,1.06,254,1.043,257,1.135,260,8.069,261,2.456,262,2.456,263,5.141,264,5.387,265,5.387,266,5.387,267,5.141,268,4.931,269,5.387,270,5.387,271,5.387,272,5.387,273,5.387,274,5.387,275,4.748,276,5.141,277,4.931,278,4.304,279,5.387,280,5.387,281,5.141,282,5.387,283,5.387,284,5.387,285,4.304,286,5.141,287,5.387,288,2.737,289,2.836,290,0.55,291,2.737,292,4.378,293,6.252,294,0.13,295,2.737,296,0.53,297,0.663,298,0.257,299,2.737,300,0.55,301,1.929,302,2.737,303,2.737,304,1.271,305,5.61,306,4.704,307,1.527,308,3.928,309,2.27,310,3.928,311,2.27,312,2.737,313,2.021,314,4.378,315,5.472,316,5.472,317,2.737,318,2.737,319,2.27,320,2.27,321,2.27,322,3.632,323,3.632,324,3.632,325,3.632,326,3.632,327,3.632,328,3.632,329,3.632,330,4.378,331,1.851,332,2.737,333,1.954,334,1.451,335,1.992,336,1.569,337,2.85,338,2.737,339,2.664,340,1.929,341,2.85,342,2.132,343,2.85,344,2.132,345,2.85,346,2.132,347,2.85,348,2.737,349,3.162,350,2.85,351,2.737,352,2.752,353,2.737,354,2.456,355,2.737,356,2.737,357,2.737,358,2.737,359,2.737,360,1.851,361,2.132,362,2.737,363,4.378,364,2.132,365,2.737,366,2.737,367,2.664,368,2.737,369,2.96,370,4.378,371,3.086,372,2.456,373,3.086,374,3.086,375,2.737,376,2.27,377,1.851,378,2.737,379,2.737,380,3.41,381,2.456,382,3.086,383,2.27,384,3.086,385,2.737,386,1.488,387,2.27,388,2.584,389,3.562,390,1.782,391,2.96,392,1.432,393,2.132,394,2.584,395,5.398,396,1.782,397,2.737,398,2.96,399,2.132,400,2.96,401,2.132,402,2.85,403,2.456,404,2.51,405,1.353,406,1.72,407,2.96,408,2.021,409,3.233,410,2.96,411,2.132,412,2.96,413,2.132,414,3.233,415,2.456,416,2.737,417,2.752,418,2.27,419,2.737,420,1.026,421,1.488,422,2.132,423,2.737,424,4.378,425,2.737,426,2.132,427,2.456,428,2.737,429,2.456,430,2.96,431,3.233,432,2.132,433,3.086,434,2.737,435,2.737,436,2.737,437,2.737,438,3.025,439,4.378,440,5.472,441,4.378,442,9.21,443,2.737,444,3.41,445,2.737,446,3.41,447,2.737,448,2.379,449,2.737,450,3.928,451,2.737,452,3.41,453,2.737,454,4.378,455,2.386,456,4.378,457,3.086,458,2.737,459,3.928,460,3.928,461,2.737,462,4.378,463,3.928,464,2.737,465,5.472,466,3.632,467,2.737,468,2.737,469,2.737,470,2.737,471,2.737,472,2.737,473,2.737,474,2.737,475,2.737,476,2.737,477,2.737,478,2.737,479,2.021,480,2.737,481,2.737,482,2.27,483,2.737,484,2.737,485,2.737,486,2.737,487,2.737,488,2.737,489,2.737,490,2.737,491,2.737,492,2.456,493,2.737,494,2.737,495,1.851,496,2.27,497,1.929,498,2.021,499,2.737,500,2.27,501,2.021,502,2.737,503,1.181,504,2.737,505,2.737]],["title/classes/ApplyUserCouponDto.html",[55,0.17,506,3.9]],["body/classes/ApplyUserCouponDto.html",[3,0.066,4,0.066,5,0.059,10,0.281,11,1.316,14,0.382,15,0.005,16,0.088,54,0.073,55,0.297,69,1.243,213,1.7,242,0.004,243,0.004,294,0.349,506,6.836,507,1.877,508,7.874,509,6.576,510,9.394,511,0.813,512,2.839,513,6.186,514,4.246,515,1.856,516,7.329,517,7.329,518,3.291,519,1.057,520,3.4,521,2.265,522,1.015,523,6.079]],["title/controllers/AuthController.html",[524,1.142,525,3.9]],["body/controllers/AuthController.html",[3,0.025,4,0.025,5,0.022,10,0.104,13,1.031,14,0.386,15,0.005,16,0.092,19,0.357,54,0.027,55,0.092,57,0.733,60,1.637,63,1.857,66,1.461,67,1.978,69,0.347,71,2.923,75,1.288,101,2.059,108,1.175,213,1.945,242,0.002,243,0.002,290,0.876,294,0.378,296,1.537,297,0.891,298,0.745,300,1.596,313,2.008,335,3.101,336,1.559,501,2.008,506,6.376,511,0.88,513,4.804,519,0.392,522,1.058,524,0.62,525,3.392,526,0.743,527,2.439,528,1.003,529,3.84,530,6.228,531,4.354,532,6.228,533,6.228,534,6.228,535,6.815,536,6.815,537,6.228,538,2.718,539,2.718,540,3.24,541,3.907,542,4.451,543,2.944,544,5.166,545,5.471,546,3.907,547,6.228,548,2.718,549,3.206,550,2.718,551,6.335,552,2.718,553,4.354,554,6.524,555,2.718,556,2.718,557,2.718,558,2.718,559,2.718,560,3.907,561,6.228,562,5.447,563,5.447,564,2.737,565,2.718,566,2.718,567,4.236,568,4.6,569,2.718,570,5.466,571,4.851,572,5.534,573,3.978,574,2.718,575,2.718,576,2.718,577,5.588,578,2.718,579,2.718,580,6.914,581,5.37,582,2.718,583,5.062,584,6.228,585,4.354,586,2.718,587,2.718,588,5.37,589,2.718,590,4.804,591,2.718,592,2.718,593,2.718,594,7.344,595,2.718,596,2.718,597,2.718,598,1.916,599,1.344,600,1.191,601,3.653,602,3.612,603,3.684,604,3.279,605,3.069,606,1.003,607,1.916,608,2.819,609,2.117,610,3.683,611,2.439,612,3.683,613,2.439,614,5.447,615,2.439,616,2.439,617,2.439,618,2.718,619,2.718,620,3.84,621,2.718,622,5.308,623,2.718,624,2.718,625,2.718,626,1.108,627,2.439,628,2.439,629,2.439,630,2.718,631,2.718,632,0.972,633,2.718,634,3.542,635,2.976,636,2.718,637,2.718,638,4.023,639,4.354,640,3.612,641,3.907,642,1.659,643,1.872,644,3.907,645,5.447,646,1.196,647,3.612,648,5.447,649,1.654,650,2.718,651,1.604,652,0.852,653,2.255,654,3.612,655,3.612,656,3.907,657,3.392,658,3.069,659,3.392,660,3.392,661,3.392,662,2.063,663,3.392,664,3.392,665,3.392,666,3.907,667,3.612,668,2.718,669,1.604,670,2.117,671,2.718,672,2.718,673,2.718,674,2.718,675,2.718,676,2.718,677,4.354,678,1.838,679,2.718,680,2.718,681,2.718,682,2.718,683,2.718,684,2.718,685,2.718,686,2.718,687,3.612,688,2.718,689,4.887,690,2.718,691,2.718,692,2.718,693,2.718,694,2.718,695,2.718,696,2.718,697,2.718,698,2.718,699,2.718,700,2.718,701,2.718,702,2.718,703,4.243,704,2.718,705,2.718,706,2.718,707,2.718,708,2.117,709,2.718,710,2.718,711,2.718]],["title/modules/AuthModule.html",[244,1.282,263,3.53]],["body/modules/AuthModule.html",[3,0.055,4,0.055,5,0.049,15,0.005,16,0.101,19,0.796,54,0.061,55,0.205,213,1.175,242,0.004,243,0.004,244,1.998,246,2.275,247,3.073,252,3.073,253,2.35,254,2.312,257,3.236,258,3.355,263,7.41,267,6.798,268,6.521,285,5.691,286,6.798,289,3.236,360,4.102,371,4.276,372,5.443,376,5.032,429,5.443,525,6.719,526,2.134,626,4.177,627,5.443,712,5.443,713,5.443,714,5.443,715,5.443,716,6.798,717,7.569,718,6.066,719,7.803,720,5.032,721,5.443,722,6.066,723,6.066]],["title/classes/BakeRepoDto.html",[55,0.17,724,3.386]],["body/classes/BakeRepoDto.html",[3,0.061,4,0.061,5,0.055,10,0.259,11,1.252,14,0.403,15,0.005,16,0.084,54,0.068,55,0.283,69,1.209,242,0.004,243,0.004,294,0.397,455,2.208,507,1.729,511,0.925,512,3.234,515,2.002,518,3.398,519,0.973,520,3.234,521,2.086,522,1.156,632,2.986,662,4.609,724,5.644,725,8.13,726,6.056,727,7.577,728,2.589,729,7.489,730,6.165,731,6.056,732,6.75,733,4.486,734,8.347,735,6.165,736,8.347,737,8.347,738,4.986,739,6.75,740,5.434,741,3.669]],["title/controllers/BlogSummaryController.html",[524,1.142,742,3.9]],["body/controllers/BlogSummaryController.html",[3,0.057,4,0.057,5,0.051,10,0.242,14,0.325,15,0.005,16,0.096,19,0.827,54,0.063,55,0.213,63,1.475,66,1.16,67,1.788,101,1.634,108,1.7,242,0.004,243,0.004,290,1.608,294,0.3,296,1.22,297,0.668,298,0.591,300,1.267,392,2.061,503,1.7,511,0.698,519,0.908,522,0.873,524,1.438,526,1.723,528,2.325,540,3.528,567,3.26,599,3.115,600,2.759,601,3.568,602,4.238,605,2.998,606,2.325,626,2.568,632,2.254,634,2.812,635,2.363,742,6.227,743,6.227,744,5.226,745,6.3,746,7.994,747,6.3,748,7.193,749,5.653,750,7.172,751,5.025,752,7.172,753,7.994,754,6.3,755,4.238,756,3.515,757,5.653,758,7.994,759,2.003,760,4.718,761,4.137,762,2.867,763,2.985,764,6.227,765,4.908,766,6.19,767,4.101,768,4.908,769,6.3,770,6.3,771,2.289,772,5.653,773,6.3,774,6.3,775,2.325]],["title/modules/BlogSummaryModule.html",[244,1.282,264,3.698]],["body/modules/BlogSummaryModule.html",[3,0.063,4,0.063,5,0.056,15,0.005,16,0.096,19,0.914,54,0.07,55,0.236,242,0.004,243,0.004,244,2.178,246,2.61,247,3.35,252,3.35,253,2.696,254,2.652,257,3.527,258,3.657,264,7.593,275,6.499,289,3.527,420,2.61,421,3.783,422,5.421,526,2.326,742,7.155,743,5.421,766,7.358,767,5.537,768,5.421,776,6.244,777,6.244,778,6.244,779,6.96,780,6.244,781,6.244]],["title/injectables/BlogSummaryService.html",[17,0.865,766,3.53]],["body/injectables/BlogSummaryService.html",[3,0.053,4,0.053,5,0.047,10,0.225,13,0.927,14,0.345,15,0.005,16,0.085,17,1.319,19,0.769,54,0.059,55,0.198,57,1.581,60,2.23,63,1.785,66,1.405,67,1.728,69,1.22,137,3.184,242,0.004,243,0.004,290,1.534,294,0.404,296,1.643,297,0.9,298,0.796,300,1.534,420,2.197,421,3.184,497,4.13,540,3.166,651,3.457,669,3.457,743,7,748,6.638,750,6.845,751,3.682,759,2.425,763,2.776,764,7.259,765,4.563,766,5.378,771,2.129,782,1.862,783,4.859,784,5.378,785,4.13,786,5.478,787,5.256,788,7.629,789,5.858,790,5.634,791,5.85,792,6.569,793,5.256,794,5.162,795,3.961,796,4.13,797,4.13,798,3.814,799,4.327,800,2.615,801,4.13,802,4.327,803,4.327,804,4.327,805,4.327,806,4.859,807,3.961,808,4.563,809,5.256,810,5.256,811,4.13,812,5.523,813,3.564,814,5.858,815,5.858,816,5.378,817,4.13,818,4.327,819,5.256,820,4.859,821,4.13,822,5.304,823,4.13,824,4.13,825,4.13]],["title/interfaces/ChatResponse.html",[0,2.871,826,3.9]],["body/interfaces/ChatResponse.html",[0,3.569,2,4.597,3,0.056,4,0.056,5,0.05,10,0.239,11,1.19,13,0.68,14,0.374,15,0.005,16,0.088,17,1.371,19,0.817,54,0.062,55,0.211,63,2.043,66,1.146,67,1.268,69,1.115,101,2.058,108,1.679,147,4.597,148,4.597,149,3.787,150,4.597,194,2.372,213,1.205,242,0.004,243,0.004,306,5.006,307,3.472,421,3.383,498,4.597,567,3.221,599,3.078,638,5.858,771,2.261,775,2.297,786,3.569,807,4.208,812,5.985,826,6.801,827,4.848,828,5.163,829,8.249,830,7.117,831,8.711,832,5.163,833,5.584,834,3.569,835,5.584,836,7.117,837,5.684,838,5.584,839,5.584,840,4.052,841,5.584,842,5.584,843,4.597,844,5.584,845,5.163,846,5.584,847,5.584,848,5.584,849,2.066,850,5.584,851,4.848,852,5.584,853,5.584,854,1.845,855,5.584,856,5.584,857,3.383,858,5.584,859,5.584,860,5.584]],["title/controllers/CodeExplanationController.html",[524,1.142,861,3.9]],["body/controllers/CodeExplanationController.html",[3,0.057,4,0.057,5,0.051,10,0.242,14,0.325,15,0.005,16,0.096,19,0.828,54,0.063,55,0.214,63,1.477,66,1.162,67,1.79,101,1.637,108,1.703,203,3.346,242,0.004,243,0.004,290,1.61,294,0.3,296,1.222,297,0.669,298,0.592,300,1.269,392,2.065,511,0.7,514,4.253,519,0.91,522,0.874,524,1.44,526,1.726,528,2.329,540,2.82,567,3.266,599,3.121,600,2.764,601,3.572,602,4.242,605,3.001,606,2.329,626,2.572,632,2.258,634,2.817,635,2.367,755,4.242,756,3.521,759,2.006,760,4.723,761,4.142,762,2.872,763,2.99,771,2.293,775,2.329,861,6.234,862,3.379,863,5.411,864,5.663,865,4.108,866,6.234,867,6.311,868,7.398,869,6.311,870,8.003,871,5.911,872,7.18,873,5.031,874,5.235,875,6.311,876,5.663,877,6.195,878,5.663,879,4.661,880,4.661,881,6.311,882,4.916,883,5.942,884,6.311]],["title/injectables/CodeExplanationService.html",[17,0.865,877,3.53]],["body/injectables/CodeExplanationService.html",[3,0.055,4,0.055,5,0.049,10,0.232,13,0.942,14,0.35,15,0.005,16,0.086,17,1.347,19,0.795,54,0.061,55,0.205,57,1.634,60,2.265,63,1.824,66,1.435,67,1.755,69,1.101,101,1.571,137,3.291,242,0.004,243,0.004,290,1.568,294,0.41,296,1.669,297,0.914,298,0.809,300,1.568,420,2.271,421,3.291,514,4.171,651,3.574,669,3.574,751,3.807,759,2.478,763,2.869,771,2.2,782,1.925,784,5.495,785,4.269,786,5.527,790,5.757,791,5.924,794,4.743,795,4.095,796,4.269,797,4.269,798,3.942,799,4.473,800,2.703,801,4.269,811,4.269,812,5.074,816,5.495,817,4.269,818,4.473,821,4.269,822,5.371,823,4.269,824,4.269,825,4.269,862,3.842,863,6.154,868,6.722,872,6.993,876,5.433,877,5.495,885,5.433,886,7.794,887,6.056,888,7.794,889,6.056,890,6.056,891,4.095,892,5.023,893,5.023,894,5.023]],["title/controllers/CodeRefactorSuggestionController.html",[524,1.142,895,3.9]],["body/controllers/CodeRefactorSuggestionController.html",[3,0.056,4,0.056,5,0.05,10,0.239,14,0.322,15,0.005,16,0.095,19,0.817,54,0.062,55,0.211,63,1.457,66,1.146,67,1.778,101,1.615,108,1.679,203,3.299,242,0.004,243,0.004,290,1.595,294,0.296,296,1.205,297,0.66,298,0.584,300,1.252,392,2.036,511,0.69,514,4.225,519,0.897,522,0.862,524,1.42,526,1.702,528,2.297,540,2.795,567,3.221,599,3.078,600,2.726,601,3.541,602,4.205,605,2.975,606,2.297,626,2.536,632,2.227,634,2.778,635,2.334,755,4.205,756,3.472,759,1.978,760,4.681,761,4.105,762,2.832,763,2.949,771,2.261,775,2.297,862,3.349,863,5.363,865,4.052,866,6.179,871,5.858,873,4.986,874,5.163,879,4.597,880,4.597,882,4.848,883,6.421,895,6.179,896,7.171,897,5.584,898,6.224,899,7.377,900,6.224,901,7.932,902,5.592,903,6.224,904,4.848,905,6.155,906,5.163,907,6.224,908,6.224]],["title/injectables/CodeRefactorSuggestionService.html",[17,0.865,905,3.53]],["body/injectables/CodeRefactorSuggestionService.html",[3,0.052,4,0.052,5,0.046,10,0.22,13,0.918,14,0.342,15,0.005,16,0.084,17,1.302,19,0.754,54,0.058,55,0.195,57,1.55,60,2.209,63,1.763,66,1.387,67,1.712,69,1.073,101,1.491,137,3.123,242,0.004,243,0.004,290,1.515,294,0.4,296,1.628,297,0.891,298,0.789,300,1.515,420,2.155,421,3.123,497,4.05,514,4.686,522,0.796,564,3.612,651,3.391,669,3.391,708,4.476,751,3.612,759,2.395,763,2.723,771,2.088,782,1.826,784,5.31,785,4.05,786,5.449,790,5.564,791,5.807,794,4.583,795,3.885,796,4.05,797,4.05,798,3.74,799,4.244,800,2.565,801,4.05,802,4.244,803,4.244,804,4.244,805,4.244,811,4.05,812,4.904,816,5.31,817,4.05,818,4.244,821,4.05,822,5.264,823,4.05,824,4.05,825,4.05,862,3.766,863,6.031,883,5.683,891,3.885,892,6.971,893,4.766,894,4.766,896,7.019,899,6.588,904,4.476,905,5.31,909,4.766,910,6.759,911,5.155,912,6.759,913,5.155,914,5.155,915,5.155,916,5.155,917,2.723,918,4.05,919,3.74,920,6.759,921,5.155,922,3.046,923,5.155]],["title/controllers/CodeTestSuggestionController.html",[524,1.142,924,3.9]],["body/controllers/CodeTestSuggestionController.html",[3,0.057,4,0.057,5,0.051,10,0.241,14,0.324,15,0.005,16,0.096,19,0.826,54,0.063,55,0.213,63,1.472,66,1.158,67,1.787,101,1.632,108,1.697,203,3.334,242,0.004,243,0.004,290,1.606,294,0.299,296,1.218,297,0.667,298,0.59,300,1.265,392,2.057,511,0.697,514,4.246,519,0.907,522,0.871,524,1.435,526,1.72,528,2.321,540,2.813,567,3.255,599,3.11,600,2.754,601,3.564,602,4.233,605,2.995,606,2.321,626,2.563,632,2.25,634,2.807,635,2.359,755,4.233,756,3.509,759,1.999,760,4.712,761,4.132,762,2.862,763,2.98,771,2.285,775,2.321,862,3.371,863,5.399,865,4.094,866,6.22,871,5.898,873,5.019,874,5.217,879,4.645,880,4.645,882,4.899,883,5.932,904,4.899,906,5.217,924,6.22,925,5.643,926,6.289,927,7.393,928,6.289,929,7.985,930,6.506,931,6.289,932,6.185,933,6.289,934,6.289]],["title/injectables/CodeTestSuggestionService.html",[17,0.865,932,3.53]],["body/injectables/CodeTestSuggestionService.html",[3,0.053,4,0.053,5,0.047,10,0.225,13,0.927,14,0.345,15,0.005,16,0.085,17,1.319,19,0.769,54,0.059,55,0.198,57,1.581,60,2.23,63,1.785,66,1.405,67,1.728,137,3.184,242,0.004,243,0.004,290,1.534,294,0.404,296,1.643,297,0.9,298,0.796,300,1.534,420,2.197,421,3.184,497,4.13,514,4.623,522,0.812,564,3.682,651,3.457,669,3.457,708,4.563,751,3.682,759,2.425,763,2.776,771,2.129,782,1.862,784,5.378,785,4.13,786,5.478,791,4.966,795,3.961,796,4.13,797,4.13,798,3.814,800,2.615,801,4.13,802,4.327,803,4.327,804,4.327,805,4.327,811,4.13,812,4.966,816,5.378,817,4.13,821,4.13,822,5.304,823,4.13,824,4.13,825,4.13,862,3.794,863,6.077,883,5.158,891,3.961,892,7.037,893,4.859,904,4.563,909,4.859,911,5.256,913,5.256,914,5.256,915,5.256,916,5.256,917,2.776,918,4.13,919,3.814,920,6.845,921,5.256,922,3.105,923,5.256,927,6.638,930,6.735,932,5.378,935,7.629,936,7.629,937,7.629,938,5.858]],["title/classes/CollaboratorsDto.html",[55,0.17,939,3.9]],["body/classes/CollaboratorsDto.html",[3,0.064,4,0.064,5,0.057,6,3.448,10,0.272,11,1.291,13,1.012,14,0.401,15,0.005,16,0.093,31,3.842,54,0.071,55,0.314,89,2.067,96,5.168,213,1.667,242,0.004,243,0.004,294,0.338,438,3.57,507,1.817,511,0.787,512,2.749,515,1.82,518,3.228,519,1.023,521,2.193,522,0.983,939,6.705,940,6.368,941,4.935,942,6.705,943,4.985,944,5.887,945,7.097,946,4.069,947,5.887,948,7.097]],["title/classes/CommitAuthorDto.html",[55,0.17,949,4.154]],["body/classes/CommitAuthorDto.html",[3,0.066,4,0.066,5,0.059,10,0.281,11,1.316,14,0.382,15,0.005,16,0.088,54,0.073,55,0.297,69,1.243,242,0.004,243,0.004,294,0.349,507,1.877,511,0.813,512,2.839,515,1.856,518,3.291,519,1.057,520,3.4,521,2.265,522,1.015,583,5.179,652,2.75,949,7.279,950,6.576,951,9.394,952,5.516,953,5.934,954,7.329,955,7.329,956,5.413]],["title/injectables/CommitAuthorsService.html",[17,0.865,957,3.53]],["body/injectables/CommitAuthorsService.html",[3,0.053,4,0.053,5,0.047,10,0.224,13,0.926,14,0.344,15,0.005,16,0.098,17,1.317,18,3.538,19,0.768,20,2.737,22,1.334,23,2.304,24,1.687,25,1.941,26,2.092,54,0.059,55,0.198,57,2.056,59,1.734,60,2.003,62,3.792,63,2.102,64,3.538,66,1.561,67,1.945,71,2.855,72,3.396,73,3.276,101,1.517,104,2.383,108,1.578,242,0.004,243,0.004,251,5.155,290,1.533,294,0.427,296,1.642,297,0.899,298,0.795,300,1.705,350,3.807,646,1.862,775,2.159,782,1.859,957,5.372,958,8.357,959,5.248,960,7.621,961,6.837,962,5.849,963,5.849,964,7.621,965,5.849,966,7.621,967,5.849,968,6.837,969,5.849,970,1.999,971,1.621,972,3.676,973,4.852,974,5.849,975,5.849,976,3.955,977,3.676,978,4.556,979,4.192,980,2.83]],["title/classes/CommitsDto.html",[55,0.17,981,4.154]],["body/classes/CommitsDto.html",[3,0.067,4,0.067,5,0.059,10,0.282,11,1.319,14,0.382,15,0.005,16,0.088,54,0.074,55,0.298,69,1.245,242,0.004,243,0.004,294,0.35,507,1.884,511,0.816,512,2.851,515,1.861,518,3.299,519,1.061,520,3.408,521,2.274,522,1.02,952,5.53,981,7.297,982,6.603,983,8.443,984,7.893,985,8.797,986,7.359,987,7.359,988,6.603]],["title/injectables/CommitsService.html",[17,0.865,989,3.53]],["body/injectables/CommitsService.html",[3,0.049,4,0.049,5,0.043,10,0.207,13,1.072,14,0.353,15,0.005,16,0.096,17,1.247,18,3.35,19,0.707,20,2.649,22,1.228,23,2.121,24,1.553,25,1.787,26,1.926,54,0.054,55,0.182,57,1.947,59,1.596,60,1.896,62,3.67,63,2.122,64,3.35,66,1.601,67,1.998,71,2.966,72,3.631,73,3.498,101,1.397,104,2.494,108,1.453,242,0.003,243,0.003,251,5.052,290,1.451,294,0.431,296,1.684,297,0.922,298,0.816,300,1.748,352,3.384,646,2.225,775,1.987,782,1.711,970,1.841,971,1.492,972,3.384,976,4.878,977,4.535,978,4.194,979,4.024,980,2.605,989,5.086,990,4.831,991,7.215,992,7.215,993,6.473,994,5.384,995,5.384,996,7.215,997,5.384,998,7.215,999,5.384,1000,7.215,1001,5.384,1002,6.473,1003,5.384,1004,4.466,1005,5.384,1006,5.384,1007,5.384,1008,5.384]],["title/modules/ContributionModule.html",[244,1.282,265,3.698]],["body/modules/ContributionModule.html",[3,0.061,4,0.061,5,0.055,15,0.005,16,0.101,19,0.889,24,1.955,54,0.068,55,0.23,59,2.009,242,0.004,243,0.004,244,2.142,246,2.541,247,3.295,252,3.295,253,2.625,254,2.582,257,3.47,258,3.597,265,7.56,278,5.854,289,3.47,304,3.146,331,4.581,333,3.024,334,3.592,337,5.446,526,2.288,728,1.853,1009,6.079,1010,6.079,1011,6.776,1012,6.079,1013,7.333,1014,6.776,1015,7.07,1016,5.621,1017,6.079,1018,6.776,1019,4.777]],["title/classes/ContributionPageMetaDto.html",[49,3.698,55,0.17]],["body/classes/ContributionPageMetaDto.html",[1,7.057,3,0.049,4,0.049,5,0.044,6,3.277,10,0.209,11,1.09,13,1.114,14,0.414,15,0.005,16,0.082,49,5.366,54,0.055,55,0.184,57,1.961,89,2.247,93,3.182,104,1.813,149,3.311,194,2.074,200,4.73,242,0.003,243,0.003,294,0.462,296,1.054,297,0.577,298,0.511,438,2.257,455,1.78,503,2.764,507,1.393,511,1.059,512,3.702,515,2.053,518,2.725,519,0.785,522,0.754,733,3.443,854,2.154,970,2.484,1020,6.372,1021,4.882,1022,2.521,1023,4.971,1024,6.519,1025,6.519,1026,4.871,1027,3.199,1028,6.519,1029,4.882,1030,6.448,1031,7.266,1032,5.325,1033,5.122,1034,5.66,1035,5.087,1036,5.441,1037,4.238,1038,5.441,1039,6.027,1040,6.519,1041,5.441,1042,4.513,1043,5.441,1044,3.542,1045,5.441,1046,4.238,1047,5.441,1048,3.836,1049,4.882,1050,2.957,1051,4.882,1052,5.441]],["title/classes/ContributionPageOptionsDto.html",[55,0.17,1053,3.698]],["body/classes/ContributionPageOptionsDto.html",[3,0.049,4,0.049,5,0.043,10,0.206,11,1.08,13,0.989,14,0.403,15,0.005,16,0.081,31,3.214,54,0.072,55,0.244,84,2.7,93,3.154,104,2.415,105,3.876,123,2.527,125,2.986,141,2.492,143,3.733,194,3.309,242,0.003,243,0.003,294,0.444,298,0.944,503,2.732,507,1.375,511,1.034,519,0.774,521,1.659,642,2.744,643,3.096,800,2.396,854,1.591,917,2.543,970,1.835,971,1.487,1022,2.499,1027,2.968,1035,4.922,1053,5.318,1054,5.973,1055,2.917,1056,5.289,1057,4.017,1058,4.017,1059,7.512,1060,3.735,1061,7.29,1062,3.914,1063,4.416,1064,5.318,1065,5.368,1066,4.816,1067,2.714,1068,3.726,1069,2.714,1070,2.917,1071,3.168,1072,4.109,1073,2.778,1074,2.995,1075,3.078,1076,2.778,1077,3.078,1078,3.343,1079,2.845,1080,2.995,1081,2.995,1082,3.914,1083,3.078,1084,2.917,1085,3.078,1086,3.343,1087,3.266,1088,3.214,1089,4.249,1090,5.318,1091,5.973,1092,5.368]],["title/injectables/ContributionService.html",[17,0.865,1013,3.53]],["body/injectables/ContributionService.html",[3,0.055,4,0.055,5,0.049,10,0.233,13,0.942,14,0.317,15,0.005,16,0.1,17,1.349,19,0.796,20,2.775,22,1.384,23,2.389,24,1.75,25,2.013,26,2.17,54,0.061,55,0.205,57,2.106,59,1.798,60,1.594,63,2.205,66,1.117,67,1.757,70,6.062,71,2.48,72,3.126,100,1.798,101,2.024,104,1.947,108,2.106,242,0.004,243,0.004,290,1.569,294,0.371,296,1.511,297,0.828,298,0.732,300,1.22,337,3.949,782,1.928,970,2.074,971,1.681,1013,5.501,1016,5.032,1023,4.605,1026,4.353,1027,2.074,1050,3.297,1053,6.726,1059,5.032,1061,5.443,1072,3.067,1073,3.139,1093,5.443,1094,5.276,1095,6.066,1096,6.066,1097,7.803,1098,5.276,1099,6.066,1100,4.102,1101,5.032,1102,4.725,1103,5.443,1104,6.066,1105,6.066,1106,5.443,1107,5.443,1108,6.066,1109,5.443,1110,5.443,1111,6.066,1112,5.032,1113,5.032,1114,4.276,1115,3.813,1116,3.691]],["title/classes/ContributionsPageDto.html",[52,3.698,55,0.17]],["body/classes/ContributionsPageDto.html",[3,0.058,4,0.058,5,0.051,6,3.714,10,0.244,11,1.207,14,0.403,15,0.005,16,0.093,52,5.944,54,0.064,55,0.299,57,1.718,242,0.004,243,0.004,294,0.42,296,1.233,297,0.675,298,0.597,438,3.338,503,2.635,507,1.63,511,0.892,518,3.309,519,0.918,521,1.968,857,5.197,941,3.651,943,4.567,946,3.651,970,2.177,1020,7.222,1023,5.074,1048,6.991,1050,3.461,1117,5.713,1118,7.221,1119,6.465,1120,8.048,1121,5.713,1122,5.713,1123,5.713,1124,6.367,1125,5.713,1126,5.713,1127,7.917,1128,4.489,1129,5.713,1130,5.713]],["title/classes/ContributionsTimeframeDto.html",[39,3.53,55,0.17]],["body/classes/ContributionsTimeframeDto.html",[3,0.058,4,0.058,5,0.052,6,3.541,10,0.245,11,1.21,13,0.966,14,0.397,15,0.005,16,0.093,34,7.331,37,3.664,38,4.505,39,5.686,54,0.064,55,0.299,89,1.534,105,4.273,115,6.885,123,2.439,125,3.345,138,6.885,143,4.202,242,0.004,243,0.004,294,0.384,298,0.871,503,2.385,507,1.636,511,0.894,519,0.921,521,1.975,522,0.885,946,3.664,1020,6.885,1060,3.231,1062,3.473,1063,4.384,1078,2.966,1082,3.473,1084,3.473,1086,4.103,1087,3.888,1088,3.945,1089,3.771,1131,5.733,1132,5.733,1133,6.39,1134,6.39,1135,3.888,1136,5.686,1137,5.733,1138,5.733,1139,5.733]],["title/classes/Contributor.html",[31,2.235,55,0.17]],["body/classes/Contributor.html",[3,0.059,4,0.059,5,0.053,6,3.582,8,4.421,10,0.251,11,1.229,13,0.977,14,0.4,15,0.005,16,0.09,31,4.181,54,0.082,55,0.317,69,1.232,78,5.38,96,3.656,213,1.732,242,0.004,243,0.004,294,0.39,297,0.869,438,2.718,455,2.144,507,1.678,515,1.891,518,3.513,519,0.945,520,3.175,521,2.025,522,1.239,646,2.119,733,3.883,740,5.335,941,3.757,943,4.627,946,3.757,1140,7.417,1141,5.436,1142,6.553,1143,6.553,1144,4.62,1145,4.62,1146,4.119,1147,5.105,1148,5.88,1149,5.436]],["title/controllers/ContributorController.html",[524,1.142,1150,3.9]],["body/controllers/ContributorController.html",[3,0.057,4,0.057,5,0.051,10,0.243,14,0.326,15,0.005,16,0.099,19,0.831,25,2.102,26,2.266,31,2.827,54,0.064,55,0.215,66,1.166,67,1.793,71,2.55,96,4.911,104,2.001,202,4.345,203,4.252,242,0.004,243,0.004,290,1.613,294,0.301,296,1.227,297,0.672,298,0.594,300,1.274,386,3.442,392,2.624,503,1.709,511,0.702,519,0.913,524,1.445,526,1.732,528,2.338,540,2.826,604,3.213,605,3.008,606,2.338,632,2.266,635,2.375,771,2.301,971,1.755,1150,6.248,1151,5.683,1152,9.547,1153,6.334,1154,6.834,1155,4.933,1156,7.196,1157,5.924,1158,5.221,1159,4.599,1160,6.334,1161,6.205,1162,6.334,1163,3.386,1164,2.827,1165,2.94,1166,2.827,1167,2.94,1168,5.533,1169,4.678,1170,5.221,1171,5.254,1172,6.334,1173,5.683,1174,4.933,1175,5.683,1176,6.334]],["title/controllers/ContributorInsightsController.html",[524,1.142,1177,3.9]],["body/controllers/ContributorInsightsController.html",[3,0.042,4,0.042,5,0.038,10,0.179,14,0.381,15,0.005,16,0.092,19,0.613,25,1.55,26,1.671,31,2.084,54,0.047,55,0.158,66,1.508,67,2.003,71,2.976,96,5.224,104,2.336,105,2.921,108,1.766,125,3.706,143,3.842,144,2.271,202,3.438,242,0.003,243,0.003,290,1.316,294,0.39,296,1.586,297,0.869,298,0.768,300,1.647,386,2.538,392,2.141,503,1.26,511,0.908,519,0.673,524,1.065,526,1.277,528,1.724,540,3.299,604,3.453,605,3.233,606,1.724,632,1.671,635,3.071,728,2.56,771,1.697,891,4.425,902,6.299,942,6.378,1161,6.708,1163,3.639,1164,2.084,1165,2.168,1166,2.084,1167,2.168,1168,4.749,1169,3.449,1170,4.26,1171,3.874,1173,4.19,1175,7.346,1177,5.098,1178,7.735,1179,4.19,1180,4.67,1181,8.621,1182,8.621,1183,8.621,1184,8.621,1185,4.67,1186,7.32,1187,4.67,1188,7.767,1189,6.961,1190,6.544,1191,4.067,1192,8.188,1193,4.67,1194,4.67,1195,4.67,1196,4.67,1197,4.67,1198,4.67,1199,6.544,1200,4.67,1201,4.67,1202,4.67,1203,4.67,1204,4.19,1205,4.67,1206,4.67,1207,4.67,1208,4.67,1209,4.67,1210,4.67,1211,4.67,1212,4.67,1213,4.67]],["title/modules/ContributorModule.html",[244,1.282,266,3.698]],["body/modules/ContributorModule.html",[3,0.064,4,0.064,5,0.057,15,0.005,16,0.1,19,0.928,24,2.039,31,3.155,54,0.071,55,0.239,59,2.096,202,3.908,242,0.004,243,0.004,244,2.199,246,2.651,247,3.382,252,3.382,253,2.739,254,2.694,266,7.401,277,6.776,289,3.561,304,3.282,386,3.842,387,5.864,388,4.172,389,4.602,390,4.602,526,2.348,1150,7.204,1177,7.204,1214,7.069,1215,7.069,1216,7.069,1217,7.069,1218,7.069,1219,6.343]],["title/modules/CouponModule.html",[244,1.282,267,3.53]],["body/modules/CouponModule.html",[3,0.065,4,0.065,5,0.058,15,0.005,16,0.097,19,0.945,24,2.076,54,0.072,55,0.244,59,2.133,242,0.004,243,0.004,244,2.223,246,2.699,247,3.419,252,3.419,253,2.788,254,2.743,257,3.6,258,3.732,267,7.175,289,2.985,304,3.341,433,5.073,620,7.388,1220,6.457,1221,6.457,1222,6.457,1223,7.197,1224,6.457,1225,7.197,1226,7.197]],["title/injectables/CouponService.html",[17,0.865,620,3.53]],["body/injectables/CouponService.html",[3,0.056,4,0.056,5,0.05,10,0.237,14,0.353,15,0.005,16,0.092,17,1.363,18,2.865,19,0.81,20,2.793,22,1.408,23,2.43,24,1.78,54,0.062,55,0.209,57,2.129,59,1.829,60,1.622,62,3.869,63,2.035,64,3.662,66,1.601,67,1.973,69,1.237,72,2.472,73,2.653,101,1.601,107,2.314,108,1.665,238,3.271,242,0.004,243,0.004,290,1.587,294,0.436,296,1.684,297,0.922,298,0.816,300,1.749,433,4.35,513,4.35,514,4.435,620,5.561,759,2.508,775,2.277,782,1.961,980,2.986,1224,5.536,1227,5.536,1228,7.889,1229,7.889,1230,6.17,1231,6.17,1232,7.889,1233,6.17,1234,7.889,1235,6.17,1236,7.889,1237,6.17,1238,6.17,1239,6.17,1240,6.17,1241,6.17,1242,5.536,1243,1.91,1244,6.17,1245,5.536,1246,6.17]],["title/classes/CreateBlogSummaryDto.html",[55,0.17,748,3.698]],["body/classes/CreateBlogSummaryDto.html",[3,0.048,4,0.048,5,0.043,10,0.205,11,1.077,13,0.947,14,0.42,15,0.005,16,0.072,54,0.054,55,0.243,69,1.299,89,2.081,123,1.791,141,2.481,242,0.003,243,0.003,294,0.443,507,1.368,511,1.032,512,3.607,515,2.045,518,3.567,519,0.77,520,3.503,521,1.651,522,1.29,540,3.407,748,5.302,752,6.441,764,7.777,792,6.374,794,5.502,813,4.368,837,5.886,1135,3.251,1247,8.534,1248,4.433,1249,8.107,1250,8.107,1251,7.274,1252,5.302,1253,4.795,1254,4.795,1255,5.987,1256,3.947,1257,5.302,1258,5.302,1259,5.302,1260,5.302,1261,5.302,1262,5.302,1263,5.302,1264,5.302,1265,5.302,1266,4.795,1267,3.63,1268,3.767,1269,4.795,1270,3.767,1271,4.795,1272,4.433,1273,5.955,1274,5.955,1275,5.955,1276,6.725,1277,4.795,1278,5.277,1279,3.154,1280,3.154,1281,3.767,1282,3.767,1283,3.767,1284,3.767,1285,3.767,1286,4.433,1287,3.947]],["title/classes/CreateEndorsementDto.html",[55,0.17,1288,3.53]],["body/classes/CreateEndorsementDto.html",[3,0.049,4,0.082,5,0.044,10,0.208,11,1.087,13,1.021,14,0.419,15,0.005,16,0.073,20,2.208,54,0.054,55,0.245,69,1.194,89,2.244,123,1.808,213,1.688,242,0.003,243,0.003,294,0.445,298,0.68,495,4.898,507,1.387,511,1.036,512,3.519,515,2.099,518,3.505,519,0.781,520,3.376,521,1.674,522,1.295,646,2.053,652,3.243,662,4.129,730,5.35,947,4.493,1078,2.515,1086,3.363,1088,3.233,1278,5.673,1288,5.107,1289,8.564,1290,4.493,1291,7.323,1292,7.323,1293,3.95,1294,7.323,1295,7.323,1296,7.729,1297,6.5,1298,5.416,1299,5.416,1300,5.643,1301,5.416,1302,5.416,1303,5.416,1304,5.416,1305,6.009,1306,4.493,1307,5.416,1308,5.416,1309,5.416,1310,5.416,1311,5.416,1312,5.416,1313,4.86,1314,5.416,1315,4.219]],["title/classes/CreateInsightDto.html",[55,0.17,1316,3.698]],["body/classes/CreateInsightDto.html",[3,0.056,4,0.056,5,0.05,10,0.237,11,1.185,14,0.415,15,0.005,16,0.092,20,2.407,54,0.062,55,0.295,69,1.171,208,3.486,242,0.004,243,0.004,294,0.414,297,1.005,420,2.318,438,3.275,455,2.022,507,1.583,511,0.965,512,3.371,515,2.05,518,3.439,519,0.891,520,3.059,521,1.91,522,1.206,572,5.34,646,1.358,733,4.345,738,4.565,740,5.141,741,3.359,941,4.528,943,4.746,944,5.127,946,3.544,1027,3.135,1145,5.567,1146,5.471,1147,6.152,1316,5.833,1317,7.607,1318,5.127,1319,4.746,1320,6.181,1321,5.546,1322,6.181,1323,6.309,1324,6.181,1325,4.179,1326,5.127,1327,4.565,1328,6.181,1329,3.761]],["title/classes/CreateInsightMemberDto.html",[55,0.17,1330,3.9]],["body/classes/CreateInsightMemberDto.html",[3,0.066,4,0.066,5,0.058,10,0.278,11,1.307,14,0.38,15,0.005,16,0.087,54,0.073,55,0.295,69,1.238,242,0.004,243,0.004,294,0.345,507,1.854,511,0.803,512,2.805,515,1.843,518,3.267,519,1.044,521,2.237,522,1.003,583,5.855,956,5.347,1317,7.226,1319,5.018,1327,6.434,1330,6.786,1331,6.006,1332,6.786,1333,7.816,1334,6.496,1335,7.24,1336,7.816]],["title/classes/CreateIssueSummaryDto.html",[55,0.17,1337,3.698]],["body/classes/CreateIssueSummaryDto.html",[3,0.047,4,0.047,5,0.042,10,0.197,11,1.049,13,0.932,14,0.422,15,0.005,16,0.07,54,0.052,55,0.237,69,1.31,89,2.049,123,1.746,141,2.388,242,0.003,243,0.003,294,0.448,507,1.317,511,1.044,512,3.649,515,2.027,518,3.595,519,0.742,520,3.567,521,1.59,522,1.346,540,3.377,767,6.588,792,6.292,794,5.431,813,4.257,837,5.81,1135,3.13,1248,4.268,1251,7.134,1252,5.873,1253,4.616,1254,4.616,1255,5.873,1256,3.8,1257,5.168,1258,5.168,1259,5.168,1260,5.168,1261,5.168,1262,5.168,1263,5.168,1264,5.168,1265,5.168,1266,4.616,1267,3.538,1268,3.627,1269,4.616,1270,3.627,1271,4.616,1272,4.268,1273,5.804,1274,5.804,1275,5.804,1276,6.596,1277,4.616,1278,5.176,1279,3.036,1280,3.036,1281,3.627,1282,3.627,1283,3.627,1284,3.627,1285,3.627,1286,4.268,1287,3.8,1337,5.168,1338,8.6,1339,7.951,1340,7.951,1341,7.951,1342,5.168,1343,5.145]],["title/classes/CreateLogDto.html",[55,0.17,1344,3.9]],["body/classes/CreateLogDto.html",[3,0.063,4,0.063,5,0.056,10,0.268,11,1.277,14,0.374,15,0.005,16,0.07,54,0.07,55,0.288,69,1.276,242,0.004,243,0.004,294,0.438,298,0.937,479,6.79,495,6.216,503,2.775,507,1.786,511,1.019,520,3.709,521,2.155,834,5.271,1088,4.273,1344,6.633,1345,8.59,1346,6.256,1347,9.193,1348,6.973,1349,6.973,1350,6.973]],["title/classes/CreateUserCollaborationDto.html",[55,0.17,1351,3.9]],["body/classes/CreateUserCollaborationDto.html",[3,0.061,4,0.061,5,0.054,10,0.258,11,1.249,14,0.402,15,0.005,16,0.084,54,0.067,55,0.282,69,1.295,213,1.752,242,0.004,243,0.004,294,0.396,392,2.724,448,5.281,507,1.722,511,0.923,512,3.226,515,2,518,3.393,519,0.97,520,3.505,521,2.078,522,1.154,791,4.378,834,5.572,1300,6.487,1351,6.487,1352,7.504,1353,5.578,1354,6.983,1355,8.328,1356,8.328,1357,7.472,1358,6.725,1359,6.725,1360,6.725,1361,6.725,1362,5.578,1363,4.092,1364,4.741,1365,6.725,1366,6.034]],["title/classes/CreateUserHighlightDto.html",[55,0.17,1367,3.698]],["body/classes/CreateUserHighlightDto.html",[3,0.045,4,0.045,5,0.04,10,0.191,11,1.026,14,0.422,15,0.005,16,0.069,54,0.05,55,0.232,69,1.327,123,1.243,144,2.375,204,5.692,206,5.06,213,1.809,242,0.003,243,0.003,294,0.434,298,0.79,405,4.877,420,3.157,438,3.243,507,1.275,511,1.011,512,3.261,515,2.103,518,3.309,519,0.718,520,3.532,521,1.539,522,1.263,652,3.213,662,4.181,741,2.707,767,4.455,791,3.242,813,5.369,840,3.242,922,3.628,941,3.924,943,4.356,1060,1.995,1078,3.177,1086,3.63,1088,3.49,1128,3.511,1135,3.03,1352,7.747,1362,4.131,1366,4.469,1367,5.055,1368,4.469,1369,6.09,1370,7.819,1371,4.981,1372,4.981,1373,6.14,1374,4.302,1375,5.331,1376,2.997,1377,4.981,1378,4.981,1379,4.164,1380,5.677,1381,6.14,1382,6.14,1383,4.981,1384,4.981,1385,4.981,1386,4.981,1387,7.015,1388,4.981,1389,6.844,1390,6.844,1391,4.981,1392,6.14,1393,4.981,1394,4.981,1395,6.844,1396,4.469,1397,3.03,1398,4.469,1399,2.181,1400,4.981,1401,4.469]],["title/classes/CreateUserListDto.html",[55,0.17,1144,3.53]],["body/classes/CreateUserListDto.html",[3,0.055,4,0.055,5,0.049,6,3.66,8,4.671,10,0.235,11,1.177,13,0.857,14,0.412,15,0.005,16,0.087,31,4.078,54,0.079,55,0.309,69,1.234,78,4.832,96,4.832,213,1.769,242,0.004,243,0.004,294,0.412,297,1.002,438,3.254,455,2.001,507,1.567,511,0.96,512,3.355,515,2.044,518,3.426,519,0.882,520,3.039,521,1.891,522,1.2,646,1.903,733,4.329,738,4.518,740,5.107,830,5.489,941,4.498,943,4.728,946,3.508,1140,7.578,1141,5.075,1144,5.531,1145,5.531,1146,5.444,1147,6.111,1148,5.489,1149,5.075,1402,6.118,1403,6.118,1404,6.118,1405,6.118,1406,6.118]],["title/injectables/CustomLogger.html",[17,0.865,1407,3.698]],["body/injectables/CustomLogger.html",[3,0.043,4,0.043,5,0.038,10,0.182,11,0.993,14,0.375,15,0.005,16,0.083,17,1.145,19,0.623,54,0.048,55,0.161,57,1.282,60,2.004,66,1.597,67,2.049,69,1.348,123,1.185,137,4.483,242,0.003,243,0.003,290,1.332,294,0.439,296,1.74,297,0.953,298,0.843,300,1.745,306,5.286,307,2.65,479,6.407,495,7.04,503,2.057,759,2.758,782,1.51,822,5.441,834,5.768,1022,2.298,1100,6.075,1407,5.631,1408,8.437,1409,4.262,1410,7.625,1411,9.219,1412,6.841,1413,6.843,1414,7.625,1415,6.841,1416,6.623,1417,8.249,1418,6.333,1419,6.623,1420,6.623,1421,4.75,1422,6.623,1423,8.249,1424,4.75,1425,6.623,1426,4.75,1427,6.623,1428,4.75,1429,6.623,1430,4.75,1431,4.75,1432,4.75,1433,4.262,1434,4.75,1435,4.75,1436,4.75,1437,4.75,1438,8.675,1439,4.75,1440,4.75,1441,6.623]],["title/modules/CustomerModule.html",[244,1.282,268,3.386]],["body/modules/CustomerModule.html",[3,0.065,4,0.065,5,0.058,15,0.005,16,0.097,19,0.945,24,2.076,54,0.072,55,0.244,59,2.133,242,0.004,243,0.004,244,2.223,246,2.699,247,3.419,252,3.419,253,2.788,254,2.743,257,3.6,258,3.732,268,6.882,289,2.985,304,3.341,374,5.073,612,7.086,1442,6.457,1443,6.457,1444,6.457,1445,7.197,1446,6.457,1447,7.197,1448,7.197]],["title/injectables/CustomerService.html",[17,0.865,612,3.386]],["body/injectables/CustomerService.html",[3,0.054,4,0.054,5,0.048,10,0.229,13,1.049,14,0.368,15,0.005,16,0.091,17,1.336,19,0.784,20,2.76,22,1.363,23,2.354,24,1.724,54,0.06,55,0.202,57,2.085,59,1.771,60,1.571,62,3.823,63,1.809,66,1.667,67,2.039,69,1.227,72,3.096,73,3.322,242,0.004,243,0.004,290,1.554,294,0.446,296,1.754,297,0.96,298,0.85,300,1.821,374,4.212,549,2.722,612,5.225,646,2.06,759,2.722,782,1.899,980,3.739,1446,5.361,1449,5.361,1450,6.933,1451,7.727,1452,7.727,1453,5.975,1454,5.975,1455,7.727,1456,7.727,1457,8.124,1458,5.975,1459,5.975,1460,7.727,1461,5.975,1462,7.727,1463,5.975,1464,5.975,1465,5.975,1466,5.975,1467,5.975,1468,5.975]],["title/classes/DatabaseLoggerMiddleware.html",[55,0.17,364,3.9]],["body/classes/DatabaseLoggerMiddleware.html",[3,0.077,4,0.041,5,0.036,10,0.173,11,0.959,13,0.811,14,0.377,15,0.005,16,0.074,19,0.593,22,1.031,54,0.064,55,0.153,57,1.219,60,2.324,66,1.739,69,1.315,108,1.219,123,1.127,242,0.003,243,0.003,290,1.286,294,0.449,296,1.983,297,1.002,298,0.871,300,1.828,301,6.002,319,3.747,320,3.747,321,3.747,364,5.78,457,6.002,479,5.48,503,2.002,507,1.157,651,2.666,669,2.666,759,2.565,822,3.773,834,4.882,1100,6.278,1163,3.92,1413,7.333,1415,6.657,1469,8.59,1470,3.747,1471,5.303,1472,7.42,1473,6.393,1474,6.393,1475,6.393,1476,6.393,1477,6.393,1478,6.393,1479,6.393,1480,6.393,1481,6.393,1482,10.346,1483,4.517,1484,6.393,1485,4.517,1486,6.393,1487,4.517,1488,6.393,1489,4.517,1490,6.393,1491,4.517,1492,1.721,1493,6.393,1494,4.517,1495,6.393,1496,4.517,1497,4.517,1498,4.517,1499,4.517,1500,4.517,1501,8.068,1502,4.517,1503,7.42,1504,4.517,1505,4.053,1506,4.517,1507,7.42,1508,4.517,1509,4.517,1510,4.517]],["title/entities/DbBakedRepo.html",[347,3.26,1243,1.1]],["body/entities/DbBakedRepo.html",[3,0.053,4,0.053,5,0.047,10,0.223,11,1.137,13,0.978,14,0.405,15,0.005,16,0.09,20,2.904,22,1.324,54,0.058,55,0.197,69,0.968,89,1.82,90,5.327,100,1.72,242,0.004,243,0.004,294,0.426,297,0.615,347,4.935,352,5.628,511,0.993,515,2.015,519,0.836,522,1.17,646,1.967,652,3.191,662,3.592,729,6.801,730,5.599,849,1.926,1022,2.013,1056,3.777,1243,1.665,1267,3.833,1293,4.086,1511,8.335,1512,4.09,1513,8.444,1514,2.93,1515,5.801,1516,4.474,1517,4.474,1518,5.344,1519,5.205,1520,4.285,1521,7.581,1522,5.801,1523,6.288,1524,3.469,1525,4.018,1526,5.599,1527,5.801,1528,7.581,1529,5.205,1530,3.668,1531,2.843,1532,5.599,1533,2.869,1534,3.107,1535,2.013,1536,2.013,1537,3.45,1538,5.205,1539,5.801,1540,3.326,1541,5.126,1542,5.801]],["title/entities/DbCommitAuthors.html",[350,3.26,1243,1.1]],["body/entities/DbCommitAuthors.html",[3,0.057,4,0.057,5,0.051,10,0.24,11,1.195,13,0.87,14,0.395,15,0.005,16,0.092,22,1.43,54,0.063,55,0.212,69,1.018,82,3.036,89,1.505,90,5.456,100,1.858,242,0.004,243,0.004,294,0.417,297,0.665,350,5.187,352,5.794,455,2.606,511,0.971,515,1.685,519,0.904,522,0.868,646,2.025,652,3.165,849,2.08,952,5.008,953,5.387,1022,2.175,1056,4.08,1243,1.75,1267,4.029,1514,2.175,1516,4.702,1517,4.702,1518,5.617,1520,4.629,1524,3.087,1525,4.223,1526,4.629,1530,3.855,1531,2.988,1532,5.884,1533,3.099,1534,2.765,1535,2.175,1536,2.175,1537,3.986,1538,5.623,1540,3.593,1541,4.238,1543,5.623,1544,8.76,1545,5.199,1546,6.267,1547,7.967,1548,6.267,1549,6.267,1550,6.267]],["title/entities/DbCommits.html",[352,3.148,1243,1.1]],["body/entities/DbCommits.html",[3,0.044,4,0.044,5,0.039,10,0.187,11,1.01,13,0.989,14,0.414,15,0.005,16,0.088,22,1.11,54,0.049,55,0.165,69,1.064,89,1.854,90,2.79,100,1.442,144,2.337,242,0.003,243,0.003,294,0.442,297,0.819,347,5.426,349,2.461,350,5.426,352,4.233,511,1.029,515,2.056,519,0.702,522,1.212,646,2.078,652,3.235,728,1.841,849,1.615,952,5.946,953,4.554,983,6.929,984,6.042,988,6.042,1022,1.689,1056,3.168,1243,1.479,1267,4.215,1514,3.037,1516,4.919,1517,4.919,1518,5.876,1523,6.407,1524,3.507,1525,3.57,1526,3.594,1530,3.259,1531,3.282,1533,2.406,1534,3.141,1535,1.689,1536,1.689,1537,3.515,1540,2.79,1541,3.29,1551,4.366,1552,8.751,1553,8.751,1554,8.751,1555,8.751,1556,7.723,1557,3.485,1558,4.866,1559,4.313,1560,4.866,1561,6.735,1562,3.485,1563,4.65,1564,4.866,1565,4.866,1566,4.866,1567,6.735,1568,4.866,1569,6.735,1570,4.866,1571,4.866,1572,4.866,1573,3.905,1574,3.905,1575,4.866,1576,4.866,1577,4.866]],["title/entities/DbContribution.html",[337,3.26,1243,1.1]],["body/entities/DbContribution.html",[3,0.035,4,0.035,5,0.031,10,0.15,11,0.862,13,0.975,14,0.413,15,0.005,16,0.076,20,1.752,22,0.89,31,3.586,54,0.039,55,0.132,69,0.962,82,2.872,84,2.826,89,1.639,100,1.156,107,2.826,123,2.226,144,3.096,200,2.538,202,2.616,203,3.047,213,1.113,242,0.003,243,0.003,294,0.441,297,0.799,298,0.789,333,3.363,334,2.067,337,3.742,455,2.465,511,1.027,515,2.078,519,0.562,522,1.236,573,2.724,642,2.602,643,2.935,646,1.765,652,3.232,662,3.807,728,2.197,730,4.245,849,1.294,854,2.234,919,3.742,1022,1.353,1090,5.043,1091,5.663,1191,3.429,1243,1.263,1267,3.81,1293,3.888,1376,3.3,1399,2.517,1492,3.4,1514,2.917,1516,4.447,1517,4.447,1518,5.312,1524,2.919,1525,3.047,1526,2.88,1530,2.781,1531,3.152,1533,1.928,1534,3.017,1535,1.353,1536,1.353,1537,3.107,1541,2.636,1557,2.018,1559,2.975,1562,2.975,1563,4.204,1573,2.907,1574,2.907,1578,3.498,1579,3.235,1580,5.157,1581,3.899,1582,3.899,1583,5.157,1584,5.157,1585,5.157,1586,3.899,1587,2.517,1588,3.88,1589,3.549,1590,7.683,1591,2.616,1592,4.204,1593,1.774,1594,3.766,1595,3.836,1596,3.899,1597,2.301,1598,3.899,1599,5.748,1600,3.899,1601,4.477,1602,4.768,1603,2.749,1604,3.899,1605,3.899,1606,3.899,1607,3.899,1608,2.616,1609,3.047,1610,3.207,1611,2.451,1612,3.899,1613,5.748,1614,3.899,1615,3.899,1616,2.842,1617,2.471,1618,3.124,1619,2.99,1620,2.236,1621,3.234,1622,3.899,1623,3.498]],["title/entities/DbContributionStatTimeframe.html",[42,3.386,1243,1.1]],["body/entities/DbContributionStatTimeframe.html",[3,0.04,4,0.04,5,0.036,6,3.699,10,0.17,11,0.945,13,1.113,14,0.422,15,0.005,16,0.063,22,1.009,42,4.258,54,0.044,55,0.15,69,1.217,78,5.317,82,3.77,84,3.574,89,2.028,90,4.843,92,5.17,100,1.311,177,5.713,178,5.713,213,1.846,218,2.99,242,0.003,243,0.003,294,0.43,297,0.469,455,3.398,511,1.001,515,2.092,522,1.252,849,1.468,865,5.203,917,2.984,918,4.439,1243,1.383,1342,6.238,1374,5.024,1492,3.046,1514,3.135,1531,3.463,1534,3.204,1535,1.535,1536,1.535,1562,4.371,1563,5.317,1588,3.202,1609,4.236,1624,7.66,1625,3.668,1626,6.58,1627,6.58,1628,6.839,1629,6.219,1630,4.422,1631,3.968,1632,4.439,1633,5.634,1634,4.422,1635,3.968,1636,5.65,1637,4.422,1638,7.17,1639,7.17,1640,7.17,1641,5.224,1642,3.968,1643,3.968]],["title/entities/DbContributionsProjects.html",[45,3.53,1243,1.1]],["body/entities/DbContributionsProjects.html",[3,0.054,4,0.054,5,0.048,6,3.63,10,0.23,11,1.16,13,0.99,14,0.416,15,0.005,16,0.078,22,1.366,45,5.453,54,0.06,55,0.203,69,1.29,82,3.662,84,3.604,89,1.437,100,1.774,195,7.11,198,7.11,200,6.108,218,4.047,242,0.004,243,0.004,294,0.408,297,0.995,455,3.346,511,0.95,515,2.032,522,1.187,728,2.477,849,1.987,1243,1.699,1364,5.453,1514,2.974,1531,3.398,1534,3.144,1535,2.077,1536,2.077,1562,3.097,1563,4.316,1624,7.516,1628,6.026,1629,6.04,1641,6.417,1644,5.37,1645,7.736,1646,5.985,1647,6.941,1648,5.985,1649,5.985]],["title/entities/DbContributorCategoryTimeframe.html",[47,3.386,1243,1.1]],["body/entities/DbContributorCategoryTimeframe.html",[3,0.041,4,0.041,5,0.037,6,3.652,10,0.175,11,0.966,13,1.099,14,0.42,15,0.005,16,0.065,22,1.041,37,4.901,47,4.354,54,0.046,55,0.155,69,1.225,82,3.733,84,3.491,89,1.946,96,5.193,100,1.353,108,2.46,177,5.812,178,5.812,182,6.312,218,3.085,242,0.003,243,0.003,294,0.422,297,0.484,455,3.38,511,0.983,515,2.072,522,1.229,849,1.515,917,3.051,918,4.539,1037,6.909,1044,5.774,1243,1.414,1374,5.095,1492,3.832,1514,3.078,1531,3.418,1534,3.163,1535,1.583,1536,1.583,1562,4.194,1563,5.193,1584,7.272,1588,3.247,1609,4.296,1625,3.785,1629,6.156,1631,4.094,1635,4.094,1638,7.272,1639,9.022,1640,7.272,1641,5.341,1642,4.094,1643,4.094,1650,8.179,1651,5.777,1652,4.563,1653,5.777,1654,4.563]],["title/entities/DbCoupon.html",[433,3.53,1243,1.1]],["body/entities/DbCoupon.html",[3,0.053,4,0.053,5,0.047,10,0.224,11,1.142,14,0.401,15,0.005,16,0.076,22,1.332,54,0.059,55,0.198,69,1.082,100,1.731,107,2.855,123,1.9,144,3.421,242,0.004,243,0.004,294,0.403,297,0.619,298,0.842,405,3.764,433,5.367,511,0.939,513,6.328,514,4.099,515,2.019,522,1.173,523,6.315,642,3.228,652,3.124,849,1.938,922,4.035,1022,2.026,1242,7.6,1243,1.672,1374,5.642,1375,6.992,1376,3.931,1399,3.334,1492,3.421,1514,2.026,1524,2.949,1530,3.684,1533,3.764,1534,2.642,1535,2.026,1536,2.026,1587,3.334,1588,3.949,1589,3.789,1591,3.465,1593,2.657,1594,3.789,1595,3.859,1616,3.764,1617,3.273,1619,3.71,1655,5.239,1656,5.839,1657,5.839,1658,5.839,1659,7.613,1660,3.948,1661,5.839,1662,5.839]],["title/entities/DbCustomer.html",[374,3.53,1243,1.1]],["body/entities/DbCustomer.html",[3,0.061,4,0.061,5,0.054,10,0.258,11,1.249,13,0.91,14,0.368,15,0.005,16,0.084,22,1.534,54,0.067,55,0.228,69,1.064,100,1.994,213,1.613,242,0.004,243,0.004,294,0.396,297,0.713,374,5.871,377,5.631,511,0.923,515,2,522,1.154,646,2.135,652,3.103,687,6.908,849,2.232,1022,2.334,1067,4.211,1243,1.829,1267,4.211,1457,8.117,1514,2.89,1516,4.915,1517,4.915,1524,3.226,1530,4.03,1531,3.123,1533,3.325,1534,3.139,1535,2.334,1536,2.334,1541,4.547,1663,6.034,1664,6.034,1665,6.725,1666,6.725,1667,6.725,1668,6.725,1669,3.187,1670,6.034]],["title/entities/DbEmoji.html",[402,3.26,1243,1.1]],["body/entities/DbEmoji.html",[3,0.041,4,0.041,5,0.037,10,0.175,11,0.965,13,0.703,14,0.409,15,0.005,16,0.081,22,1.04,54,0.046,55,0.154,69,1.132,82,2.452,89,1.79,100,1.351,107,3.038,123,2.021,144,3.077,194,2.452,242,0.003,243,0.003,294,0.443,297,0.94,298,0.832,395,3.213,402,4.188,404,4.644,405,4.224,406,2.865,455,2.104,511,1.032,515,2.071,519,0.657,522,1.228,573,3.048,642,2.842,643,3.205,646,1.638,652,3.238,662,4.048,849,1.513,854,1.907,922,4.294,1032,2.967,1191,2.928,1243,1.413,1376,2.817,1399,1.996,1492,3.379,1514,2.811,1520,3.366,1524,2.492,1531,3.038,1532,4.751,1534,2.965,1535,1.581,1536,1.581,1537,3.393,1562,2.358,1579,3.533,1587,2.817,1588,3.842,1589,3.42,1591,2.928,1592,3.589,1593,2.074,1594,3.743,1595,3.812,1597,2.689,1608,2.928,1609,3.41,1610,3.589,1611,2.865,1616,3.181,1617,2.766,1618,3.496,1619,3.265,1620,2.613,1671,4.089,1672,7.456,1673,5.256,1674,6.31,1675,4.557,1676,4.557,1677,7.249,1678,4.751,1679,5.336,1680,4.557,1681,4.044,1682,3.78,1683,4.557,1684,4.557,1685,4.557,1686,5.336,1687,6.433,1688,4.557,1689,4.557,1690,4.557,1691,4.557,1692,3.181,1693,4.089,1694,2.967,1695,4.557]],["title/entities/DbEndorsement.html",[417,3.148,1243,1.1]],["body/entities/DbEndorsement.html",[3,0.042,4,0.077,5,0.037,10,0.176,11,0.969,13,0.971,14,0.422,15,0.005,16,0.065,20,1.969,22,1.046,54,0.046,55,0.155,69,1.19,89,2.275,95,5.726,100,1.36,107,2.423,123,1.612,144,2.242,213,1.573,242,0.003,243,0.003,294,0.444,297,0.486,298,0.875,417,4.062,495,4.369,511,1.033,515,2.073,522,1.291,642,2.851,646,2.082,652,3.24,662,3.062,849,1.522,854,1.916,1243,1.419,1267,4.492,1291,6.713,1292,6.713,1293,3.62,1294,6.713,1295,6.713,1296,7.75,1297,5.798,1300,5.033,1305,5.36,1313,5.798,1315,3.572,1376,2.83,1399,2.009,1492,2.463,1514,3.168,1516,5.243,1517,5.243,1524,2.503,1531,3.423,1534,3.235,1535,1.592,1536,1.592,1562,3.872,1587,2.009,1588,3.254,1589,2.728,1591,2.941,1593,2.087,1594,2.728,1595,2.778,1608,2.941,1617,2.778,1619,2.83,1669,3.062,1681,4.062,1682,3.804,1692,3.195,1694,2.985,1696,4.115,1697,4.586,1698,4.586,1699,4.586,1700,5.798,1701,4.586,1702,4.586,1703,6.462,1704,5.36,1705,4.586,1706,4.586,1707,4.586,1708,4.586,1709,3.572]],["title/classes/DbFilteredUser.html",[55,0.17,1710,3.698]],["body/classes/DbFilteredUser.html",[3,0.063,4,0.063,5,0.057,10,0.269,11,1.28,14,0.347,15,0.005,16,0.07,54,0.07,55,0.237,69,1.224,75,4.044,78,5.483,213,1.653,242,0.004,243,0.004,294,0.406,298,0.801,507,1.793,511,0.946,515,2.028,522,1.183,652,3.133,849,2.324,1329,5.603,1363,5.194,1514,2.962,1534,3.196,1535,2.429,1536,2.429,1710,6.304,1711,8.262,1712,5.807,1713,7.658,1714,7.08,1715,7.08,1716,7,1717,6.281]],["title/entities/DbInsight.html",[367,3.047,1243,1.1]],["body/entities/DbInsight.html",[3,0.034,4,0.034,5,0.031,10,0.145,11,0.843,13,0.811,14,0.408,15,0.005,16,0.08,22,0.863,54,0.038,55,0.128,69,0.948,82,2.143,89,1.35,100,1.122,107,3.118,123,2.207,144,2.885,208,2.687,213,1.667,242,0.003,243,0.003,294,0.444,297,0.913,298,0.78,335,3.38,336,2.17,349,1.913,367,3.421,369,5.021,420,2.108,455,2.893,511,1.034,514,1.831,515,2.093,519,0.546,522,1.252,642,2.557,643,2.884,646,1.891,652,3.241,733,3.519,813,3.421,849,1.256,854,2.465,1022,1.313,1027,2.539,1033,5.235,1034,5.784,1145,3.963,1146,4.217,1191,2.559,1243,1.235,1267,3.755,1319,5.092,1327,2.795,1376,3.642,1397,3.421,1399,2.938,1492,3.169,1514,2.885,1516,4.382,1517,4.382,1518,3.963,1520,2.795,1524,2.178,1530,2.721,1531,3.118,1532,4.152,1533,2.78,1534,2.988,1535,1.313,1536,1.313,1537,3.053,1557,1.958,1559,2.909,1562,1.958,1563,3.137,1573,2.843,1574,2.843,1579,3.179,1587,2.938,1588,3.784,1589,3.51,1591,2.559,1593,1.722,1594,3.51,1595,3.575,1608,3.784,1616,2.78,1617,2.417,1618,3.056,1619,3.252,1660,2.559,1669,3.519,1692,2.78,1718,3.395,1719,6.708,1720,6.708,1721,3.024,1722,3.784,1723,3.963,1724,3.784,1725,3.395,1726,3.784,1727,5.622,1728,4.664,1729,3.784,1730,3.784,1731,3.784,1732,3.784,1733,5.044,1734,5.622,1735,3.784,1736,5.622,1737,3.784,1738,5.044,1739,3.784,1740,3.963,1741,2.795,1742,3.784,1743,3.784,1744,3.784,1745,3.784,1746,2.559,1747,3.784]],["title/entities/DbInsightMember.html",[400,3.386,1243,1.1]],["body/entities/DbInsightMember.html",[3,0.034,4,0.034,5,0.031,10,0.146,11,0.847,13,0.814,14,0.409,15,0.005,16,0.057,22,0.869,54,0.038,55,0.129,69,1.132,82,3.176,89,1.788,95,3.982,100,1.129,107,2.793,123,2.08,144,3.196,213,1.094,242,0.003,243,0.003,294,0.438,297,0.884,298,0.905,400,3.819,455,2.899,511,1.021,515,2.115,522,1.276,583,4.396,642,2.566,643,2.895,646,1.895,652,3.225,849,1.264,854,2.627,922,3.949,956,2.812,1022,1.321,1191,2.571,1243,1.241,1267,2.856,1319,4.313,1327,6.802,1332,7.513,1374,3.551,1376,3.65,1399,3.262,1492,3.377,1514,2.892,1516,3.334,1517,3.334,1524,2.188,1530,2.733,1531,3.235,1533,2.793,1534,2.994,1535,1.321,1536,1.321,1562,1.971,1579,3.191,1587,3.262,1588,3.921,1589,3.741,1591,2.571,1593,1.733,1594,3.741,1595,3.809,1603,2.684,1608,3.793,1616,2.793,1617,2.428,1618,3.07,1619,3.484,1629,3.551,1660,2.575,1669,3.53,1681,3.551,1692,2.793,1694,2.479,1714,4.686,1715,3.159,1721,2.566,1723,3.982,1740,3.982,1741,2.812,1748,7.751,1749,3.417,1750,5.876,1751,4.973,1752,6.041,1753,6.734,1754,3.417,1755,4.973,1756,3.808,1757,3.808,1758,3.808,1759,2.966,1760,3.808,1761,2.317,1762,3.808,1763,6.683,1764,3.808,1765,3.808,1766,5.068,1767,4.686,1768,3.808,1769,5.068,1770,3.417,1771,3.808,1772,3.808,1773,3.808,1774,3.417]],["title/entities/DbInsightRepo.html",[369,3.386,1243,1.1]],["body/entities/DbInsightRepo.html",[3,0.042,4,0.042,5,0.038,10,0.178,11,0.978,13,0.975,14,0.41,15,0.005,16,0.082,22,1.06,54,0.047,55,0.157,69,0.833,89,1.809,100,1.377,107,3.064,123,2.038,144,2.835,242,0.003,243,0.003,294,0.436,297,0.867,298,0.766,367,4.971,369,4.409,408,3.431,420,2.445,511,1.016,515,2.078,519,0.67,522,1.236,642,2.871,646,2.088,652,3.219,728,2.557,741,2.525,849,1.542,854,2.422,922,3.456,1022,1.612,1243,1.432,1293,3.646,1319,5.125,1329,4.584,1376,3.578,1379,3.967,1399,2.856,1492,3.113,1512,3.275,1514,2.835,1519,4.168,1524,2.526,1529,4.168,1530,3.155,1531,3.064,1533,3.224,1534,2.986,1535,1.612,1536,1.612,1537,2.968,1557,2.404,1559,3.374,1573,3.297,1574,3.297,1579,3.57,1587,2.856,1588,3.746,1589,3.449,1591,2.968,1593,2.114,1594,3.449,1595,3.512,1608,3.718,1616,3.224,1617,2.803,1619,3.3,1660,3.141,1669,4.227,1692,3.224,1723,4.597,1725,4.168,1748,7.757,1751,6.355,1761,3.967,1775,4.168,1776,4.646,1777,3.619,1778,4.168,1779,4.646,1780,4.646,1781,4.168,1782,4.168,1783,4.646]],["title/entities/DbLog.html",[384,3.53,1243,1.1]],["body/entities/DbLog.html",[3,0.06,4,0.06,5,0.054,10,0.254,11,1.238,14,0.393,15,0.005,16,0.066,22,1.512,54,0.066,55,0.224,69,1.291,100,1.964,144,2.863,242,0.004,243,0.004,294,0.461,297,0.703,384,5.817,479,6.637,495,6.076,511,1.073,642,3.425,646,1.974,652,3.284,834,5.152,1022,2.299,1243,1.813,1530,3.993,1531,3.752,1617,3.863,1692,3.276,1784,5.945,1785,6.626,1786,6.626,1787,6.626,1788,6.626,1789,6.626,1790,6.626,1791,6.626,1792,6.626]],["title/entities/DbPRInsight.html",[407,3.386,1243,1.1]],["body/entities/DbPRInsight.html",[3,0.04,4,0.04,5,0.036,10,0.171,11,0.949,13,1.065,14,0.424,15,0.005,16,0.063,20,1.928,22,1.015,54,0.045,55,0.151,69,0.808,82,3.716,84,3.656,85,2.797,89,2.361,100,1.319,107,2.372,123,2.433,124,5.341,125,2.623,144,2.938,194,2.411,203,4.663,206,5.044,242,0.003,243,0.003,294,0.419,297,0.472,389,5.891,392,2.96,407,4.277,455,3.189,511,0.975,515,2.062,522,1.219,646,1.617,652,3.17,849,1.477,862,3.821,1022,1.544,1090,6.497,1243,1.389,1492,2.411,1514,3.053,1524,2.45,1525,3.353,1530,3.061,1531,3.299,1533,3.128,1534,3.14,1535,1.544,1536,1.544,1562,4.147,1563,3.529,1588,2.534,1594,2.67,1595,2.719,1608,2.879,1609,3.353,1610,3.529,1793,3.992,1794,7.359,1795,7.359,1796,5.435,1797,7.359,1798,5.675,1799,8.797,1800,4.45,1801,4.45,1802,8.014,1803,6.325,1804,6.325,1805,6.325,1806,8.014,1807,4.45,1808,4.45,1809,4.45,1810,4.45,1811,6.325,1812,5.675,1813,6.325,1814,6.325,1815,6.325,1816,4.45,1817,5.675,1818,4.45]],["title/entities/DbPullRequest.html",[388,2.955,1243,1.1]],["body/entities/DbPullRequest.html",[3,0.018,4,0.052,5,0.016,10,0.077,11,0.508,13,1.001,14,0.415,15,0.005,16,0.044,20,1.032,22,0.457,54,0.02,55,0.068,69,1.205,82,2.676,84,1.27,85,1.26,89,1.756,90,3.315,100,0.594,107,2.836,123,2.231,144,2.968,202,4.477,206,4.903,232,3.249,238,1.795,242,0.002,243,0.002,294,0.455,297,0.613,298,0.923,388,1.999,389,6.247,392,3.218,420,1.27,448,3.41,455,2.798,482,4.29,511,1.06,515,2.153,519,0.289,522,1.33,573,2.451,642,1.676,643,1.891,646,1.27,652,3.27,662,1.605,728,0.926,733,3.327,741,1.089,813,3.518,849,0.665,854,1.004,862,4.052,922,4.396,953,3.497,1022,0.695,1060,1.357,1191,2.354,1243,0.744,1293,2.129,1329,2.677,1342,4.27,1363,1.219,1379,2.061,1380,2.809,1492,2.882,1514,3.289,1524,1.312,1530,1.639,1531,3.287,1533,0.991,1534,3.303,1535,0.695,1536,0.695,1537,1.541,1545,1.662,1562,2.992,1563,4.219,1587,0.878,1588,3.582,1589,3.193,1591,1.541,1594,3.193,1595,3.252,1601,2.638,1602,4.29,1608,3.442,1609,4.009,1610,4.219,1617,1.456,1619,1.483,1620,3.315,1629,2.129,1777,1.561,1819,1.798,1820,4.399,1821,4.399,1822,4.399,1823,4.399,1824,4.399,1825,3.649,1826,4.399,1827,5.781,1828,4.399,1829,5.781,1830,4.399,1831,5.781,1832,6.681,1833,3.649,1834,4.399,1835,5.781,1836,4.399,1837,4.399,1838,5.187,1839,4.399,1840,4.399,1841,5.172,1842,2.638,1843,2.004,1844,5.172,1845,5.172,1846,3.387,1847,2.004,1848,2.004,1849,2.004,1850,2.004,1851,2.004,1852,2.004,1853,2.809,1854,3.387,1855,3.367,1856,2.004,1857,3.387,1858,4.64,1859,2.004,1860,2.004,1861,3.039,1862,2.004,1863,1.798,1864,2.004,1865,3.039,1866,2.004,1867,5.172,1868,2.004,1869,2.004,1870,3.387,1871,1.798,1872,2.004,1873,3.387,1874,2.004,1875,2.004,1876,3.387,1877,3.387,1878,4.399,1879,3.387,1880,3.387,1881,3.387,1882,3.387,1883,3.387,1884,2.004,1885,2.004,1886,3.387,1887,2.004,1888,2.004,1889,2.004,1890,2.004,1891,1.798,1892,2.004,1893,3.387,1894,2.004,1895,2.004,1896,2.004,1897,2.004,1898,2.004,1899,2.004,1900,4.64,1901,2.004,1902,2.004,1903,2.004,1904,2.004,1905,2.004,1906,2.004,1907,2.004,1908,2.004,1909,3.387,1910,3.387,1911,3.387,1912,3.039,1913,2.004,1914,2.004,1915,2.004,1916,1.798,1917,2.004,1918,1.662,1919,5.542,1920,5.172,1921,1.798,1922,2.004,1923,2.004,1924,2.004,1925,2.004,1926,1.798,1927,2.004]],["title/classes/DbPullRequestContributor.html",[55,0.17,1161,3.53]],["body/classes/DbPullRequestContributor.html",[3,0.061,4,0.061,5,0.054,10,0.259,11,1.251,14,0.339,15,0.005,16,0.068,54,0.068,55,0.228,69,1.065,144,2.893,202,3.794,206,4.78,232,6.687,242,0.004,243,0.004,294,0.397,298,0.782,392,3.181,448,4.531,507,1.725,511,0.924,515,2.001,522,1.155,573,3.951,643,3.892,652,3.104,849,2.236,862,3.822,953,5.637,1161,5.877,1170,5.894,1191,3.794,1514,2.893,1534,3.142,1535,2.338,1536,2.338,1588,3.34,1589,3.52,1608,3.794,1609,4.42,1610,4.651,1620,4.78,1926,7.48,1928,6.045,1929,6.738,1930,6.738]],["title/entities/DbPullRequestReview.html",[391,3.386,1243,1.1]],["body/entities/DbPullRequestReview.html",[3,0.04,4,0.04,5,0.036,10,0.171,11,0.951,13,0.693,14,0.396,15,0.005,16,0.074,22,1.019,54,0.045,55,0.151,69,1.025,89,1.072,100,1.324,107,3.303,123,2.198,144,3.386,202,4.123,206,5.05,242,0.003,243,0.003,294,0.431,297,0.474,298,0.869,388,4.738,389,6.027,390,2.908,391,4.288,392,3.241,448,3.447,511,1.004,515,2.064,522,1.22,573,3.005,642,2.81,643,3.17,646,1.62,652,3.206,849,1.482,862,3.908,1022,1.55,1243,0.981,1363,2.718,1492,3.357,1514,2.942,1524,2.457,1530,3.069,1531,2.765,1533,2.209,1534,3.057,1535,1.55,1536,1.55,1573,3.207,1574,3.207,1587,1.956,1588,3.908,1589,3.719,1591,2.886,1594,3.719,1595,3.787,1608,4.009,1609,4.669,1610,4.914,1617,2.727,1619,2.778,1620,4.228,1838,7.607,1858,5.69,1863,4.007,1871,4.007,1891,4.007,1916,4.007,1919,5.261,1931,4.007,1932,7.374,1933,6.616,1934,7.374,1935,9.551,1936,4.466,1937,6.342,1938,4.466,1939,6.342,1940,4.466,1941,4.466,1942,6.342,1943,4.466,1944,6.342,1945,4.466,1946,4.466,1947,4.466,1948,4.466,1949,4.466,1950,4.007]],["title/entities/DbRepoToUserStargazers.html",[345,3.26,1243,1.1]],["body/entities/DbRepoToUserStargazers.html",[3,0.041,4,0.041,5,0.036,10,0.173,11,0.958,13,0.965,14,0.41,15,0.005,16,0.085,20,1.946,22,1.029,54,0.045,55,0.153,82,2.434,89,1.78,100,1.337,107,3.024,123,2.012,144,3.067,213,1.76,242,0.003,243,0.003,294,0.442,297,0.787,298,0.829,333,3.599,335,3.67,336,2.587,345,4.158,349,2.281,455,2.089,511,1.029,515,2.024,519,0.65,522,1.179,573,3.026,642,2.826,643,3.188,646,1.996,652,3.235,728,2.327,849,1.497,854,1.893,1191,2.907,1243,1.403,1293,4.118,1376,2.797,1399,1.976,1492,3.368,1514,2.573,1524,3.423,1525,3.386,1531,2.781,1534,2.798,1535,1.566,1536,1.566,1537,3.67,1557,3.305,1559,4.173,1573,3.75,1574,3.75,1579,3.513,1587,2.797,1588,3.834,1589,3.404,1591,2.907,1592,3.563,1593,2.053,1594,3.731,1595,3.799,1597,2.662,1608,2.907,1609,3.386,1610,3.563,1611,2.836,1616,3.158,1617,2.746,1618,3.471,1619,3.247,1620,2.587,1669,3.026,1692,3.158,1721,3.243,1761,3.886,1951,4.048,1952,7.929,1953,4.511,1954,4.511,1955,4.319,1956,3.05,1957,4.511,1958,4.511,1959,4.511,1960,4.511,1961,4.511,1962,4.511,1963,4.511,1964,4.511,1965,4.511,1966,4.511,1967,4.048]],["title/entities/DbRepoToUserStars.html",[341,3.26,1243,1.1]],["body/entities/DbRepoToUserStars.html",[3,0.041,4,0.041,5,0.036,10,0.173,11,0.958,13,0.965,14,0.41,15,0.005,16,0.085,20,1.946,22,1.029,54,0.045,55,0.153,82,2.434,89,1.78,100,1.337,107,3.024,123,2.012,144,3.067,213,1.76,242,0.003,243,0.003,294,0.442,297,0.787,298,0.829,333,3.599,335,3.67,336,2.587,341,4.158,349,2.281,455,2.089,511,1.029,515,2.024,519,0.65,522,1.179,573,3.026,642,2.826,643,3.188,646,1.996,652,3.235,728,2.327,849,1.497,854,1.893,1191,2.907,1243,1.403,1293,4.118,1376,2.797,1399,1.976,1492,3.368,1514,2.573,1524,3.423,1525,3.386,1531,2.781,1534,2.798,1535,1.566,1536,1.566,1537,3.67,1557,3.305,1559,4.173,1573,3.75,1574,3.75,1579,3.513,1587,2.797,1588,3.834,1589,3.404,1591,2.907,1592,3.563,1593,2.053,1594,3.731,1595,3.799,1597,2.662,1608,2.907,1609,3.386,1610,3.563,1611,2.836,1616,3.158,1617,2.746,1618,3.471,1619,3.247,1620,2.587,1669,3.026,1692,3.158,1721,3.243,1761,3.886,1955,4.319,1956,3.05,1968,4.048,1969,7.33,1970,4.511,1971,4.511,1972,4.511,1973,4.511,1974,4.511,1975,4.511,1976,4.511,1977,4.511,1978,4.511,1979,4.511,1980,4.511,1981,4.511,1982,4.048]],["title/entities/DbRepoToUserSubmissions.html",[343,3.26,1243,1.1]],["body/entities/DbRepoToUserSubmissions.html",[3,0.039,4,0.039,5,0.035,10,0.164,11,0.923,13,0.949,14,0.409,15,0.005,16,0.084,20,1.875,22,0.977,54,0.043,55,0.145,82,2.345,89,1.729,100,1.269,107,2.953,123,2.081,144,3.013,213,1.733,242,0.003,243,0.003,294,0.444,297,0.764,298,0.859,333,3.514,335,3.583,336,2.454,343,4.005,349,2.164,420,2.307,455,2.728,511,1.034,515,2.047,519,0.617,522,1.203,573,2.915,642,2.745,643,3.096,646,1.965,652,3.24,728,2.281,733,2.915,849,1.421,854,1.824,1033,4.337,1191,2.8,1243,1.351,1293,4.036,1376,2.694,1397,3.743,1399,1.875,1492,3.309,1514,2.732,1524,3.364,1525,3.261,1531,2.953,1534,2.894,1535,1.485,1536,1.485,1537,3.583,1557,3.184,1559,4.075,1573,3.642,1574,3.642,1579,3.412,1587,2.694,1588,3.791,1589,3.666,1591,2.8,1592,3.432,1593,1.948,1594,3.666,1595,3.733,1597,2.526,1608,2.8,1609,3.261,1610,3.432,1611,2.69,1616,3.042,1617,2.645,1618,3.344,1619,3.154,1620,2.454,1669,2.915,1692,3.042,1721,3.179,1728,3.55,1761,3.743,1950,5.52,1955,4.16,1956,2.894,1983,3.84,1984,7.202,1985,8.214,1986,4.28,1987,4.28,1988,4.28,1989,6.152,1990,4.28,1991,4.28,1992,4.28,1993,4.28,1994,4.28,1995,4.28,1996,4.28,1997,4.28,1998,4.28,1999,4.28,2000,3.84]],["title/entities/DbRepoToUserVotes.html",[339,3.047,1243,1.1]],["body/entities/DbRepoToUserVotes.html",[3,0.041,4,0.041,5,0.036,10,0.173,11,0.958,13,0.965,14,0.41,15,0.005,16,0.085,20,1.946,22,1.029,54,0.045,55,0.153,82,2.434,89,1.78,100,1.337,107,3.024,123,2.012,144,3.067,213,1.76,242,0.003,243,0.003,294,0.442,297,0.787,298,0.829,333,3.599,335,3.67,336,2.587,339,3.886,349,2.281,455,2.089,511,1.029,515,2.024,519,0.65,522,1.179,573,3.026,642,2.826,643,3.188,646,1.996,652,3.235,728,2.327,849,1.497,854,1.893,1191,2.907,1243,1.403,1293,4.118,1376,2.797,1399,1.976,1492,3.368,1514,2.573,1524,3.423,1525,3.386,1531,2.781,1534,2.798,1535,1.566,1536,1.566,1537,3.67,1557,3.305,1559,4.173,1573,3.75,1574,3.75,1579,3.513,1587,2.797,1588,3.834,1589,3.404,1591,2.907,1592,3.563,1593,2.053,1594,3.731,1595,3.799,1597,2.662,1608,2.907,1609,3.386,1610,3.563,1611,2.836,1616,3.158,1617,2.746,1618,3.471,1619,3.247,1620,2.587,1669,3.026,1692,3.158,1721,3.243,1761,3.886,1955,4.319,1956,3.05,2001,4.048,2002,7.33,2003,4.511,2004,4.511,2005,4.511,2006,4.511,2007,4.511,2008,4.511,2009,4.511,2010,4.511,2011,4.511,2012,4.511,2013,4.511,2014,4.511,2015,4.048]],["title/entities/DbSubscription.html",[382,3.53,1243,1.1]],["body/entities/DbSubscription.html",[3,0.028,4,0.028,5,0.025,10,0.117,11,0.715,13,0.725,14,0.408,15,0.005,16,0.059,22,0.696,37,3.366,54,0.031,55,0.103,69,1.055,82,1.817,100,0.904,107,3.53,123,2.385,144,3.493,194,1.162,213,0.923,242,0.002,243,0.002,294,0.444,297,0.323,298,0.883,382,3.361,455,1.56,511,1.034,515,2.117,519,0.44,522,1.279,642,2.238,646,1.583,652,3.24,733,3.146,849,1.012,854,2.834,917,3.146,918,5.386,922,4.05,947,2.529,1022,1.058,1044,4.322,1243,1.047,1376,4.187,1399,3.719,1492,3.587,1514,2.501,1524,2.572,1530,2.307,1531,3.461,1533,1.507,1534,2.651,1535,1.058,1536,1.058,1537,2.17,1545,2.529,1563,3.704,1587,3.719,1588,4.07,1589,4.036,1591,3.022,1592,5.333,1593,1.387,1594,3.973,1595,4.046,1603,5.824,1617,2.05,1619,3.804,1721,2.238,2016,7.331,2017,2.735,2018,5.268,2019,5.268,2020,5.268,2021,5.268,2022,5.268,2023,5.268,2024,4.87,2025,5.268,2026,5.977,2027,4.691,2028,5.268,2029,5.268,2030,4.767,2031,3.048,2032,6.436,2033,3.048,2034,4.767,2035,3.048,2036,3.048,2037,6.64,2038,3.048,2039,3.048,2040,3.048,2041,3.048,2042,3.048,2043,3.048,2044,4.277,2045,3.048,2046,3.048,2047,3.048,2048,3.048,2049,3.048,2050,3.048,2051,6.64,2052,3.048,2053,3.048,2054,3.048,2055,3.048,2056,3.048,2057,3.048,2058,3.048,2059,3.048]],["title/classes/DbTimezone.html",[55,0.17,2060,3.698]],["body/classes/DbTimezone.html",[3,0.067,4,0.067,5,0.06,6,3.55,10,0.286,11,1.329,14,0.303,15,0.005,16,0.075,54,0.075,55,0.252,69,1.25,242,0.004,243,0.004,294,0.355,507,1.908,511,0.826,515,1.874,522,1.032,652,2.965,678,6.761,849,2.473,1514,2.586,1534,3.075,1535,2.586,1536,2.586,2060,6.545,2061,6.685,2062,8.862,2063,7.451]],["title/classes/DbTopUser.html",[55,0.17,2064,3.698]],["body/classes/DbTopUser.html",[3,0.067,4,0.067,5,0.06,10,0.284,11,1.323,14,0.3,15,0.005,16,0.074,54,0.074,55,0.25,69,1.126,78,5.566,94,4.564,213,1.708,242,0.004,243,0.004,294,0.352,298,0.827,507,1.892,511,0.819,515,1.865,522,1.024,652,2.954,849,2.453,1363,5.366,1514,2.564,1534,3.06,1535,2.564,1536,2.564,1712,6.129,1717,6.63,2064,6.513,2065,7.912]],["title/entities/DbUserCollaboration.html",[412,3.386,1243,1.1]],["body/entities/DbUserCollaboration.html",[3,0.031,4,0.031,5,0.027,10,0.129,11,0.773,13,0.765,14,0.408,15,0.005,16,0.07,22,0.769,54,0.034,55,0.114,69,1.016,82,3.033,89,1.911,95,3.633,100,1,107,2.627,123,2.131,144,3.27,213,1.894,242,0.002,243,0.002,294,0.438,297,0.664,298,0.884,335,3.769,392,2.604,412,3.485,455,2.604,511,1.021,515,2.079,519,0.486,522,1.237,583,4.134,642,2.384,643,2.69,646,1.995,652,3.226,834,4.328,849,1.119,854,2.648,1022,1.17,1191,2.346,1243,1.132,1267,3.543,1354,7.261,1357,4.624,1364,2.377,1374,4.404,1376,3.486,1399,3.306,1492,3.404,1514,2.619,1516,4.134,1517,4.134,1524,1.997,1530,2.494,1531,3.105,1533,2.549,1534,2.762,1535,1.17,1536,1.17,1537,2.847,1557,2.667,1559,3.625,1562,2.667,1573,3.164,1574,3.164,1579,2.965,1587,3.306,1588,3.938,1589,3.77,1591,2.346,1593,1.534,1594,3.77,1595,3.839,1603,3.633,1608,3.622,1616,2.549,1617,2.216,1618,2.801,1619,3.486,1660,2.28,1669,2.442,1681,3.24,1692,2.549,1694,2.195,1700,4.624,1704,4.275,1721,2.877,1723,3.633,1740,3.633,1741,2.49,1754,3.025,1755,4.621,1759,2.626,1766,6.286,1767,5.811,2027,4.914,2066,5.674,2067,3.025,2068,6.256,2069,6.256,2070,5.613,2071,7.548,2072,5.154,2073,3.372,2074,3.372,2075,3.372,2076,3.372,2077,5.154,2078,4.624,2079,5.154,2080,3.372,2081,3.372,2082,3.372,2083,3.372,2084,3.372,2085,3.372,2086,3.372,2087,3.372,2088,3.372,2089,3.372,2090,5.154,2091,3.372,2092,2.119,2093,3.372,2094,3.372,2095,3.372]],["title/entities/DbUserHighlight.html",[394,2.955,1243,1.1]],["body/entities/DbUserHighlight.html",[3,0.025,4,0.05,5,0.023,10,0.108,11,0.672,13,0.694,14,0.414,15,0.005,16,0.07,22,0.643,54,0.028,55,0.095,69,1.204,78,3.869,82,2.815,89,1.075,94,2.318,100,0.835,107,2.383,123,2.118,144,3.215,202,2.892,204,4.297,206,1.615,213,1.756,242,0.002,243,0.002,294,0.449,297,0.9,298,0.907,335,2.892,392,2.079,394,2.643,404,3.644,405,4.96,406,1.77,420,2.77,438,2.313,455,3.083,511,1.045,515,2.121,519,0.406,522,1.284,642,2.125,643,2.397,646,1.701,652,3.253,662,3.286,728,1.225,733,3.809,741,2.434,813,4.22,840,1.833,849,0.935,922,4.261,941,3.644,943,2.318,1022,0.977,1243,0.984,1329,3.393,1363,1.714,1369,4.344,1373,4.019,1374,5.053,1375,6.261,1376,3.52,1379,4.494,1380,3.715,1381,4.019,1382,4.019,1387,2.527,1392,5.702,1396,4.019,1399,2.783,1401,2.527,1492,3.063,1514,3.059,1520,2.08,1524,2.462,1530,2.167,1531,3.014,1532,3.308,1534,3.106,1535,0.977,1536,0.977,1537,2.538,1557,1.457,1559,3.289,1563,2.499,1573,2.82,1574,2.265,1579,2.642,1587,2.783,1588,3.711,1589,3.393,1591,2.038,1593,1.282,1594,3.393,1595,3.456,1603,1.985,1616,2.215,1617,1.926,1618,2.434,1619,3.038,1629,4.643,1660,1.904,1669,3.011,1673,3.931,1686,3.715,1692,2.215,1714,3.715,1715,2.336,1721,2.643,1723,3.157,1740,3.157,1741,2.08,1770,2.527,1777,2.194,1919,5.271,2066,5.776,2092,1.77,2096,2.527,2097,6.223,2098,6.936,2099,4.626,2100,2.816,2101,2.816,2102,5.271,2103,4.479,2104,2.816,2105,2.816,2106,4.019,2107,2.816,2108,2.816,2109,2.816,2110,2.816,2111,2.336,2112,2.816,2113,2.816,2114,2.816,2115,2.816,2116,3.715,2117,2.816,2118,2.816,2119,2.816,2120,4.479,2121,2.816,2122,2.816,2123,2.816,2124,2.816,2125,2.816,2126,2.816,2127,2.816,2128,2.816,2129,2.816,2130,2.816,2131,2.816,2132,2.816,2133,2.527,2134,2.527,2135,2.816,2136,2.816]],["title/entities/DbUserHighlightReaction.html",[404,2.871,1243,1.1]],["body/entities/DbUserHighlightReaction.html",[3,0.034,4,0.034,5,0.03,10,0.144,11,0.84,13,0.907,14,0.41,15,0.005,16,0.083,22,0.859,54,0.038,55,0.128,69,0.946,82,3.596,89,2.167,100,1.116,107,2.778,123,1.848,144,2.88,213,1.607,242,0.003,243,0.003,294,0.444,297,0.786,298,0.903,335,3.044,394,3.947,396,2.45,402,4.353,403,3.377,404,4.54,405,4.957,455,3.148,511,1.033,515,1.996,519,0.543,522,1.15,573,2.654,642,2.549,643,2.875,646,1.982,652,3.175,849,1.249,854,1.66,922,2.969,1191,2.549,1243,1.23,1376,2.453,1399,1.649,1492,3.163,1514,2.57,1524,3.421,1525,2.969,1531,2.969,1534,2.88,1535,1.306,1536,1.306,1537,3.603,1557,3.461,1559,4.295,1562,3.461,1573,3.745,1574,3.745,1579,3.169,1587,2.453,1588,3.679,1589,3.127,1591,2.549,1592,3.124,1593,1.713,1594,3.504,1595,3.568,1597,2.221,1608,2.549,1609,2.969,1610,3.124,1611,2.366,1616,2.769,1617,2.408,1618,3.044,1619,2.929,1620,2.158,1629,3.52,1669,2.654,1674,7.35,1677,6.167,1681,4.656,1682,3.122,1692,2.769,1694,3.646,1721,3.017,2066,5.741,2092,2.366,2116,6.568,2137,3.377,2138,6.167,2139,5.209,2140,3.764,2141,3.764,2142,3.764,2143,3.764,2144,3.764,2145,3.764,2146,3.764,2147,3.764,2148,3.764,2149,3.764,2150,3.764,2151,3.764,2152,3.764,2153,3.764,2154,3.764,2155,3.764,2156,3.377,2157,3.764,2158,3.764,2159,3.764,2160,3.764,2161,3.764]],["title/classes/DbUserHighlightReactionResponse.html",[55,0.17,2162,3.386]],["body/classes/DbUserHighlightReactionResponse.html",[3,0.059,4,0.059,5,0.053,10,0.252,11,1.231,14,0.364,15,0.005,16,0.094,54,0.082,55,0.303,69,1.232,75,3.887,104,2.047,242,0.004,243,0.004,294,0.312,298,0.77,395,4.628,404,3.764,405,4.057,406,4.127,420,2.462,438,3.402,503,2.53,507,1.681,511,0.728,515,1.893,519,0.947,520,3.467,521,2.029,522,1.137,728,2.243,741,3.568,840,4.274,943,4.246,970,2.244,971,1.819,1022,2.847,1055,3.568,1078,3.048,1086,4.154,1088,3.994,1128,4.628,1677,6.391,2138,5.114,2139,5.114,2162,5.547,2163,6.805,2164,7.423,2165,6.805,2166,6.805,2167,6.565,2168,6.565,2169,6.565,2170,5.89,2171,4.439,2172,4.127,2173,5.89,2174,5.89,2175,5.89]],["title/classes/DbUserHighlightRepo.html",[55,0.17,2176,3.698]],["body/classes/DbUserHighlightRepo.html",[3,0.066,4,0.066,5,0.059,10,0.28,11,1.313,14,0.297,15,0.005,16,0.073,54,0.073,55,0.247,69,1.118,242,0.004,243,0.004,294,0.347,297,0.929,298,0.821,405,4.808,420,3.283,507,1.869,511,0.809,515,1.852,522,1.011,652,2.939,728,2.394,741,4.758,849,2.423,1329,5.706,1379,5.326,1512,5.146,1514,2.533,1534,3.038,1535,2.533,1536,2.533,2176,6.466,2177,7.854,2178,7.299]],["title/entities/DbUserList.html",[430,3.386,1243,1.1]],["body/entities/DbUserList.html",[3,0.038,4,0.038,5,0.034,6,3.718,8,3.86,10,0.161,11,0.91,13,0.663,14,0.401,15,0.005,16,0.078,22,0.958,54,0.042,55,0.142,69,0.997,82,2.313,89,1.008,100,1.245,107,3.236,123,2.22,144,2.994,213,1.671,242,0.003,243,0.003,294,0.434,297,0.944,298,0.81,335,3.552,336,2.408,430,4.103,431,6.854,438,2.517,455,2.331,511,1.01,515,2.075,519,0.606,522,1.232,642,2.716,643,3.063,646,1.954,652,3.212,733,2.876,849,1.394,854,2.558,1022,1.457,1033,4.278,1034,4.727,1145,4.278,1146,4.479,1191,2.762,1243,1.333,1267,3.069,1319,4.714,1376,3.779,1399,3.121,1492,3.288,1514,2.709,1516,3.581,1517,3.581,1518,4.278,1524,2.351,1530,2.937,1531,2.927,1533,3.001,1534,2.873,1535,1.457,1536,1.457,1537,2.762,1557,2.174,1559,3.141,1562,2.174,1563,3.386,1573,3.069,1574,3.069,1579,3.376,1587,3.121,1588,3.864,1589,3.643,1591,2.762,1593,1.911,1594,3.643,1595,3.709,1608,3.927,1616,3.001,1617,2.609,1618,3.298,1619,3.418,1660,2.84,1669,2.876,1681,3.815,1692,3.001,1694,2.734,1721,3.155,1723,4.278,1728,3.484,1740,4.278,1741,3.102,1759,3.272,2179,3.768,2180,7.126,2181,4.2,2182,4.2,2183,4.2,2184,4.2,2185,4.2,2186,4.2,2187,4.482,2188,4.2,2189,4.2,2190,4.2,2191,4.2,2192,4.2,2193,4.2,2194,4.2]],["title/entities/DbUserListContributor.html",[27,3.148,1243,1.1]],["body/entities/DbUserListContributor.html",[3,0.04,4,0.066,5,0.036,6,3.764,8,4.976,10,0.281,11,0.945,13,0.688,14,0.402,15,0.005,16,0.08,22,1.009,27,3.959,31,2.811,54,0.044,55,0.15,69,1.179,78,4.712,82,3.046,89,1.062,94,3.259,100,1.311,107,2.362,123,1.571,144,2.773,204,4.258,213,1.846,218,2.99,242,0.003,243,0.003,294,0.44,297,0.668,298,0.866,335,3.637,336,2.536,431,6.94,448,4.591,455,2.872,511,1.024,515,2.06,519,0.638,522,1.216,642,2.795,646,1.855,652,3.229,728,1.722,849,1.468,854,1.867,922,4.236,1149,3.668,1243,1.383,1363,2.691,1376,2.758,1399,1.937,1492,3.046,1514,2.931,1524,3.401,1531,3.167,1533,3.114,1534,3.047,1535,1.535,1536,1.535,1537,3.338,1557,2.289,1559,3.259,1573,3.184,1574,3.184,1579,3.475,1587,1.937,1588,3.517,1589,2.659,1592,3.513,1593,2.013,1594,3.374,1595,3.436,1597,2.61,1616,3.114,1617,2.707,1619,2.758,1629,3.959,1669,2.984,1681,5.024,1692,3.114,1694,4.1,1721,3.219,1759,3.445,1761,2.691,2111,3.668,2195,3.968,2196,6.58,2197,7.334,2198,4.422,2199,4.422,2200,4.422,2201,4.422,2202,4.422,2203,5.65,2204,4.422,2205,4.422,2206,4.422,2207,4.422,2208,4.422,2209,4.422,2210,4.422]],["title/entities/DbUserListContributorStat.html",[30,3.386,1243,1.1]],["body/entities/DbUserListContributorStat.html",[3,0.042,4,0.042,5,0.038,6,3.676,8,4.705,10,0.179,11,0.982,13,1.119,14,0.419,15,0.005,16,0.066,22,1.065,30,4.425,31,4.095,54,0.047,55,0.158,69,0.836,78,5.599,82,3.748,84,3.615,89,2.07,90,4.943,92,5.326,100,1.384,213,1.905,218,3.157,242,0.003,243,0.003,294,0.425,297,0.495,298,0.614,431,6.777,455,3.387,511,0.991,515,2.08,522,1.238,652,2.368,849,1.55,865,5.33,922,3.469,1243,1.438,1342,6.367,1363,2.841,1514,3.101,1531,3.441,1534,3.184,1535,1.62,1536,1.62,1562,4.461,1563,5.378,1626,6.779,1627,6.779,1628,6.961,1629,6.182,1632,4.613,1633,5.772,1636,5.872,2111,3.874,2203,5.872,2211,4.19,2212,4.67,2213,4.67,2214,4.67,2215,4.67,2216,4.67,2217,4.67]],["title/entities/DbUserNotification.html",[410,3.386,1243,1.1]],["body/entities/DbUserNotification.html",[3,0.037,4,0.063,5,0.033,10,0.156,11,0.889,13,0.932,14,0.418,15,0.005,16,0.082,22,0.928,54,0.041,55,0.138,69,1.09,89,1.68,100,1.206,107,2.223,123,1.479,144,2.961,213,1.926,242,0.003,243,0.003,294,0.438,297,0.629,298,0.878,335,3.499,405,2.932,410,4.009,511,1.021,515,2.092,519,0.586,522,1.251,646,2.082,652,3.225,834,4.686,849,1.35,854,1.757,1022,1.411,1032,3.859,1089,3.499,1243,1.302,1267,4.315,1333,5.319,1363,3.607,1374,3.727,1376,3.367,1399,2.596,1492,2.93,1514,2.961,1516,5.035,1517,5.035,1524,2.297,1526,3.004,1530,2.869,1531,3.303,1533,2.011,1534,3.057,1535,1.411,1536,1.411,1537,2.698,1541,2.75,1557,2.105,1559,3.068,1562,3.068,1563,4.289,1573,2.998,1574,2.998,1587,2.596,1588,3.617,1589,3.246,1591,2.698,1593,1.851,1594,3.246,1595,3.305,1603,2.867,1608,2.698,1617,2.549,1619,3.064,1669,2.809,1670,5.319,1721,2.666,1738,5.319,1767,4.918,2066,5.692,2092,2.556,2218,3.649,2219,6.277,2220,7.333,2221,6.277,2222,6.277,2223,5.803,2224,4.067,2225,4.067,2226,5.928,2227,4.067,2228,8.6,2229,4.067,2230,4.179,2231,4.067,2232,4.067,2233,4.067,2234,5.928,2235,4.067,2236,5.928,2237,4.067,2238,5.319,2239,4.067,2240,4.067,2241,4.932,2242,4.067,2243,4.067,2244,3.373,2245,3.649,2246,3.649,2247,4.067,2248,4.067]],["title/entities/DbUserOrganization.html",[414,3.698,1243,1.1]],["body/entities/DbUserOrganization.html",[3,0.044,4,0.044,5,0.039,10,0.295,11,1.004,13,0.986,14,0.41,15,0.005,16,0.083,22,1.1,54,0.048,55,0.163,82,2.55,89,1.845,94,3.462,100,1.429,107,2.509,123,1.67,144,2.881,204,4.524,213,1.899,242,0.003,243,0.003,294,0.441,297,0.815,298,0.779,335,4.213,414,4.941,455,2.189,511,1.026,515,1.996,519,0.695,522,1.15,642,2.929,646,2.033,652,3.231,728,1.829,849,1.6,854,1.983,1243,1.47,1376,2.93,1399,2.111,1492,3.164,1514,2.667,1524,3.497,1525,3.547,1531,2.882,1534,2.881,1535,1.673,1536,1.673,1537,3.778,1557,3.462,1559,4.296,1573,3.886,1574,3.886,1579,3.641,1587,2.111,1588,3.616,1589,2.825,1592,3.733,1593,2.194,1594,3.505,1595,3.569,1597,2.845,1616,3.308,1617,2.876,1619,2.93,1669,3.17,1692,3.308,1721,3.324,1761,4.071,1955,4.524,1956,3.259,2066,5.742,2092,3.03,2249,4.325,2250,8.721,2251,7.685,2252,4.82,2253,4.82,2254,8.301,2255,4.82,2256,4.82,2257,6.691,2258,4.82,2259,4.82,2260,4.82,2261,4.82,2262,6.691]],["title/entities/DbUserRepo.html",[373,3.53,1243,1.1]],["body/entities/DbUserRepo.html",[3,0.049,4,0.049,5,0.044,6,3.754,10,0.21,11,1.093,13,1.024,14,0.389,15,0.005,16,0.073,22,1.247,54,0.055,55,0.185,69,0.931,100,1.62,107,2.733,123,1.819,144,2.529,213,1.815,242,0.003,243,0.003,294,0.434,297,0.87,298,0.684,371,6.606,373,5.138,420,2.733,511,1.01,515,2.102,522,1.262,642,3.125,646,1.801,652,3.212,728,2.562,741,2.971,849,1.814,854,2.161,922,3.863,1022,1.897,1243,1.601,1293,3.968,1329,4.989,1376,3.192,1379,4.435,1399,2.394,1492,2.778,1512,3.853,1514,3.035,1524,3.63,1530,3.527,1531,2.733,1533,2.703,1534,3.162,1535,1.897,1536,1.897,1541,3.696,1587,2.394,1588,3.504,1589,3.077,1591,3.317,1593,2.488,1594,3.077,1595,3.133,1608,3.317,1617,3.133,1619,3.192,1664,4.904,1669,3.885,1721,3.125,1777,4.258,1781,4.904,2134,6.539,2263,5.466,2264,5.466,2265,7.288,2266,5.466,2267,5.466,2268,5.466]],["title/entities/DbUserToUserFollows.html",[398,3.386,1243,1.1]],["body/entities/DbUserToUserFollows.html",[3,0.044,4,0.044,5,0.04,10,0.188,11,1.017,13,0.992,14,0.411,15,0.005,16,0.078,22,1.121,54,0.049,55,0.166,82,2.584,89,1.864,100,1.456,107,3.139,123,2.088,144,3.151,213,1.886,242,0.003,243,0.003,294,0.432,297,0.521,298,0.852,398,4.584,455,2.218,511,1.007,515,2.06,519,0.708,522,1.217,573,3.212,642,2.958,643,3.337,646,1.705,652,3.208,849,1.631,854,2.01,1191,3.085,1243,1.489,1376,2.969,1399,2.151,1492,3.46,1514,2.694,1524,3.517,1525,3.594,1531,2.911,1534,2.904,1535,1.705,1536,1.705,1537,3.085,1579,3.678,1587,2.969,1588,3.902,1589,3.533,1591,3.085,1592,3.782,1593,2.236,1594,3.833,1595,3.903,1597,2.899,1608,3.085,1609,3.594,1610,3.782,1611,3.088,1616,3.352,1617,2.914,1618,3.684,1619,3.4,1620,2.817,1669,3.212,1692,3.352,1721,2.958,1761,4.125,1955,4.584,1956,3.322,2066,5.661,2269,4.408,2270,6.046,2271,6.4,2272,4.912,2273,4.912,2274,6.082,2275,4.912,2276,4.912,2277,4.912,2278,4.912,2279,4.075]],["title/entities/DbUserTopRepo.html",[409,3.698,1243,1.1]],["body/entities/DbUserTopRepo.html",[3,0.039,4,0.039,5,0.035,10,0.279,11,0.935,13,0.955,14,0.408,15,0.005,16,0.084,20,1.899,22,0.994,54,0.044,55,0.148,82,2.375,89,1.747,94,5.141,100,1.292,107,2.977,123,1.981,144,3.032,204,4.214,213,1.742,242,0.003,243,0.003,294,0.438,297,0.772,298,0.82,333,3.544,334,2.31,335,3.613,409,4.603,455,2.039,511,1.02,515,2.009,519,0.628,522,1.164,573,2.953,642,2.772,643,3.128,646,1.976,652,3.224,728,2.629,849,1.447,854,1.847,1191,2.836,1243,1.369,1293,4.064,1376,2.729,1399,1.909,1492,3.33,1512,3.072,1514,2.524,1524,3.385,1525,3.304,1531,2.728,1534,2.755,1535,1.512,1536,1.512,1537,3.613,1557,3.225,1559,4.108,1573,3.679,1574,3.679,1579,3.447,1587,2.729,1588,3.806,1589,3.352,1592,3.477,1593,1.983,1594,3.688,1595,3.756,1597,2.572,1608,2.836,1609,3.304,1610,3.477,1611,2.739,1616,3.082,1617,2.679,1618,3.387,1619,3.186,1620,2.499,1669,2.953,1692,3.082,1721,3.201,1761,3.792,1775,3.91,1778,3.91,1955,4.214,1956,2.947,2066,5.697,2092,2.739,2280,4.358,2281,5.17,2282,4.358,2283,4.358,2284,4.358,2285,4.358,2286,4.358,2287,4.358,2288,4.358,2289,4.358,2290,4.358,2291,4.358]],["title/controllers/EmojiController.html",[524,1.142,2292,3.9]],["body/controllers/EmojiController.html",[3,0.059,4,0.059,5,0.053,10,0.251,14,0.333,15,0.005,16,0.099,19,0.859,54,0.066,55,0.222,66,1.204,67,1.82,104,2.454,242,0.004,243,0.004,290,1.646,294,0.311,296,1.267,297,0.694,298,0.614,300,1.316,402,5.328,511,0.725,519,0.943,522,0.906,524,1.492,526,1.789,528,2.414,540,2.884,603,3.8,604,3.279,605,3.07,606,2.414,632,2.34,635,2.453,759,2.079,771,2.377,970,2.236,971,1.812,1159,4.693,1163,2.762,1164,2.92,1165,3.037,1166,2.92,1167,3.037,1693,8.648,2292,6.376,2293,5.869,2294,9.362,2295,6.541,2296,4.611,2297,5.535,2298,6.541,2299,6.541,2300,4.236,2301,6.541,2302,6.298,2303,5.869,2304,5.426,2305,6.541,2306,6.541,2307,6.541,2308,6.541,2309,6.541]],["title/modules/EmojiModule.html",[244,1.282,269,3.698]],["body/modules/EmojiModule.html",[3,0.065,4,0.065,5,0.058,15,0.005,16,0.099,19,0.948,24,2.084,54,0.072,55,0.245,59,2.142,242,0.004,243,0.004,244,2.228,246,2.71,247,3.427,252,3.427,253,2.799,254,2.754,257,3.609,269,7.439,289,2.997,304,3.355,402,4.704,526,2.379,2292,7.273,2302,7.1,2303,6.483,2304,5.994,2310,6.483,2311,6.483,2312,7.226,2313,7.226,2314,7.226]],["title/injectables/EmojiService.html",[17,0.865,2302,3.53]],["body/injectables/EmojiService.html",[3,0.057,4,0.057,5,0.051,10,0.243,14,0.326,15,0.005,16,0.099,17,1.385,19,0.83,20,2.818,22,1.443,23,2.49,24,1.824,25,2.099,26,2.262,54,0.063,55,0.214,57,2.162,59,1.874,60,1.662,62,3.904,63,2.164,66,1.475,67,1.791,72,2.533,73,2.718,100,1.874,101,2.078,104,2.433,108,2.162,242,0.004,243,0.004,290,1.611,294,0.419,296,1.552,297,0.85,298,0.752,300,1.611,402,4.116,759,2.01,782,2.01,970,2.739,971,1.752,1023,4.676,1026,4.47,1050,3.436,1094,5.417,1098,5.417,1114,4.457,1115,3.974,1116,3.847,2302,5.648,2304,5.244,2315,5.673,2316,6.322,2317,6.322,2318,8.012,2319,6.322,2320,6.322,2321,6.322,2322,6.322,2323,6.322,2324,5.244]],["title/controllers/EndorsementController.html",[524,1.142,2325,3.9]],["body/controllers/EndorsementController.html",[3,0.03,4,0.03,5,0.027,10,0.128,14,0.392,15,0.005,16,0.087,19,0.438,54,0.033,55,0.113,60,0.876,63,1.196,66,1.606,67,2.041,69,1.284,101,1.326,104,2.57,108,1.379,213,1.597,242,0.002,243,0.002,290,1.028,294,0.405,296,1.648,297,0.903,298,0.798,300,1.711,417,5.911,448,4.625,503,1.379,511,0.943,519,0.481,522,0.708,524,0.761,526,0.912,528,1.231,540,3.397,560,4.585,567,2.644,599,2.527,600,1.46,602,2.709,603,2.884,604,3.495,605,3.339,606,1.231,608,3.215,609,2.597,632,1.193,635,3.272,646,1.741,728,2.476,759,2.705,771,1.211,843,2.463,902,3.602,970,1.14,971,0.924,1159,5.105,1163,3.345,1164,1.488,1165,1.548,1166,1.488,1167,1.548,1288,6.15,1296,7.055,1647,4.585,1709,7.157,2296,2.35,2300,3.604,2325,3.98,2326,2.991,2327,7.51,2328,6.965,2329,7.51,2330,6.965,2331,6.738,2332,7.51,2333,7.51,2334,6.965,2335,3.334,2336,3.334,2337,3.334,2338,3.334,2339,3.334,2340,5.11,2341,3.334,2342,2.991,2343,5.19,2344,5.11,2345,4.239,2346,3.334,2347,3.334,2348,3.334,2349,3.334,2350,6.738,2351,3.334,2352,4.585,2353,3.334,2354,3.334,2355,2.991,2356,3.334,2357,4.981,2358,3.334,2359,3.334,2360,3.334,2361,5.777,2362,3.334,2363,3.334,2364,3.334,2365,3.334,2366,3.334,2367,3.334,2368,3.774,2369,2.463,2370,3.334,2371,3.334,2372,1.58,2373,1.86,2374,4.045,2375,2.991,2376,2.991,2377,2.766,2378,2.766,2379,2.463,2380,2.991,2381,3.334,2382,2.991,2383,3.334,2384,2.766,2385,3.334,2386,2.597,2387,2.991,2388,3.334,2389,6.738,2390,3.334,2391,3.334,2392,3.334,2393,3.334,2394,3.334,2395,3.334,2396,3.602,2397,3.455,2398,3.334,2399,3.334,2400,4.585,2401,3.334,2402,3.334,2403,3.334,2404,3.334,2405,3.334,2406,3.334,2407,4.239,2408,4.239,2409,3.334,2410,3.334,2411,3.334,2412,2.991,2413,3.334,2414,3.334]],["title/modules/EndorsementModule.html",[244,1.282,270,3.698]],["body/modules/EndorsementModule.html",[3,0.058,4,0.058,5,0.052,15,0.005,16,0.102,19,0.846,24,1.86,54,0.065,55,0.218,59,1.911,242,0.004,243,0.004,244,2.077,245,5.961,246,2.418,247,3.195,252,3.195,253,2.498,254,2.457,257,3.364,258,3.487,263,6.907,270,7.665,285,5.782,289,3.364,304,2.993,354,5.785,360,4.359,417,4.053,526,2.218,1296,5.022,2325,6.913,2374,6.727,2375,5.785,2378,5.348,2379,5.991,2380,5.785,2415,5.785,2416,6.447,2417,5.785,2418,5.785,2419,6.447,2420,4.545,2421,4.545,2422,5.785,2423,6.447]],["title/injectables/EndorsementService.html",[17,0.865,2374,3.26]],["body/injectables/EndorsementService.html",[3,0.035,4,0.035,5,0.031,10,0.148,13,0.916,14,0.376,15,0.005,16,0.087,17,0.987,18,2.652,19,0.507,20,2.287,22,0.882,23,1.523,24,1.115,54,0.039,55,0.131,57,1.541,59,1.146,60,1.501,62,3.168,63,2.083,66,1.673,67,2.086,69,1.284,72,3.955,73,3.603,75,2.706,77,3.011,81,2.725,101,1.482,104,2.612,108,1.043,208,2.721,209,5.017,213,1.106,242,0.003,243,0.003,251,4.595,290,1.149,294,0.446,296,1.79,297,0.98,298,0.867,300,1.859,417,2.43,549,2.952,564,3.59,646,1.648,728,2.527,759,2.829,775,1.427,782,1.229,970,1.321,971,1.071,972,2.43,977,5.267,979,3.359,980,1.87,1094,3.862,1098,3.862,1288,5.644,1540,4.805,1709,4.449,2331,5.124,2352,3.468,2355,5.124,2357,3.59,2374,3.718,2376,3.468,2377,3.206,2378,3.206,2400,5.124,2424,3.468,2425,5.712,2426,5.712,2427,5.712,2428,3.475,2429,3.862,2430,3.865,2431,3.865,2432,5.712,2433,3.865,2434,5.712,2435,3.865,2436,3.865,2437,5.712,2438,3.865,2439,5.712,2440,3.865,2441,5.712,2442,3.865,2443,3.865,2444,5.712,2445,3.865,2446,3.475,2447,3.865,2448,5.712,2449,3.865,2450,3.865,2451,3.865,2452,3.865,2453,3.865,2454,3.865,2455,8.006,2456,3.865,2457,6.793,2458,4.738,2459,3.865,2460,6.793,2461,5.712,2462,5.712,2463,3.865,2464,5.712,2465,3.865,2466,3.865,2467,3.865,2468,3.865,2469,3.865,2470,3.865]],["title/guards/EndorsementTokenGuard.html",[2379,3.698,2471,4.154]],["body/guards/EndorsementTokenGuard.html",[3,0.06,4,0.06,5,0.054,10,0.255,14,0.336,15,0.005,16,0.083,17,1.428,19,0.871,54,0.067,55,0.225,57,1.791,63,2.266,66,1.656,242,0.004,243,0.004,290,1.661,294,0.393,296,1.6,297,0.876,298,0.775,300,1.335,306,5.659,307,3.703,392,2.171,438,2.753,444,5.171,455,2.702,733,3.145,771,2.412,843,4.903,1471,5.506,2379,6.101,2384,5.506,2386,5.171,2387,8.069,2472,6.638,2473,8.069,2474,5.956,2475,9.411,2476,5.506,2477,6.638,2478,8.261,2479,8.444,2480,6.638,2481,8.994,2482,6.638,2483,6.638,2484,6.638,2485,6.638,2486,6.638,2487,8.261]],["title/classes/FilterListContributorsDto.html",[55,0.17,2488,3.698]],["body/classes/FilterListContributorsDto.html",[3,0.047,4,0.047,5,0.042,6,3.778,10,0.198,11,1.053,13,1.085,14,0.414,15,0.005,16,0.08,54,0.052,55,0.27,66,0.951,69,1.225,89,2.052,93,3.49,123,2.3,125,3.305,143,3.017,194,3.749,197,5.183,206,4.024,242,0.003,243,0.003,294,0.439,298,0.923,503,2.488,507,1.323,511,0.991,515,1.95,519,0.745,520,3.087,521,1.597,522,0.972,658,5.618,678,5.388,800,3.132,854,2.65,946,2.963,1027,2.724,1060,2.811,1068,3.632,1069,3.549,1076,2.674,1086,4.28,1088,4.115,1136,5.618,1191,3.194,1279,3.049,1280,3.049,1492,1.969,1601,5.466,1912,6.296,2488,5.183,2489,8.461,2490,4.025,2491,7.969,2492,5.183,2493,5.618,2494,4.636,2495,5.167,2496,5.618,2497,7.018,2498,5.167,2499,4.636,2500,5.167,2501,7.018,2502,7.018,2503,5.821,2504,5.167,2505,5.167,2506,7.018,2507,7.018,2508,5.167,2509,5.167,2510,4.025,2511,5.167,2512,4.568,2513,5.183,2514,4.636,2515,5.167,2516,3.816,2517,3.816]],["title/classes/FilterOptionsDto.html",[55,0.17,2518,3.53]],["body/classes/FilterOptionsDto.html",[3,0.045,4,0.045,5,0.04,10,0.19,11,1.023,13,0.962,14,0.411,15,0.005,16,0.084,54,0.05,55,0.231,69,1.246,84,2.557,93,2.986,104,2.37,105,3.749,123,2.479,125,2.827,141,2.299,143,3.611,194,3.201,242,0.003,243,0.003,294,0.459,298,0.961,420,2.557,503,2.797,507,1.268,511,1.069,515,1.442,519,0.714,520,3.254,521,1.531,728,2.132,741,2.692,800,2.211,854,1.468,917,2.347,971,1.889,1022,2.366,1027,2.665,1035,4.787,1055,2.692,1057,3.804,1058,3.804,1060,3.528,1062,3.705,1063,4.237,1067,2.505,1068,3.528,1069,2.505,1070,2.692,1071,2.923,1072,3.942,1073,2.563,1074,2.763,1075,2.84,1076,2.563,1077,2.84,1078,3.165,1079,2.626,1080,2.763,1081,2.763,1082,3.705,1083,2.84,1084,2.692,1085,2.84,1086,4.089,1087,3.014,1088,3.931,1089,2.923,1306,4.109,2172,4.9,2496,4.806,2518,4.806,2519,7.902,2520,4.9,2521,5.271,2522,5.721,2523,3.658,2524,4.109,2525,3.858,2526,4.109,2527,3.492,2528,3.858,2529,4.444,2530,3.349,2531,3.658]],["title/classes/FilteredUsersDto.html",[55,0.17,2532,3.698]],["body/classes/FilteredUsersDto.html",[3,0.052,4,0.052,5,0.046,8,3.717,10,0.22,11,1.127,13,1.057,14,0.415,15,0.005,16,0.084,54,0.057,55,0.284,66,1.055,69,1.138,75,3.562,89,1.805,93,3.675,123,2.415,194,3.82,242,0.004,243,0.004,294,0.424,298,0.836,448,5.028,503,2.68,507,1.467,511,0.93,512,2.219,518,2.819,519,0.826,521,1.77,522,0.793,800,3.355,854,2.743,946,3.284,1027,2.869,1060,3.361,1068,3.89,1069,3.801,1076,2.964,1086,3.896,1088,3.745,1136,5.915,1163,3.174,1279,3.38,1280,3.38,1362,4.751,1398,5.139,2172,4.725,2492,5.552,2493,5.915,2494,5.139,2510,4.461,2512,4.893,2513,5.552,2514,5.139,2516,4.23,2517,4.23,2532,5.552,2533,8.301,2534,4.751,2535,5.139,2536,5.139,2537,5.299,2538,5.727,2539,5.139,2540,5.139]],["title/classes/GenerateCodeExplanationDto.html",[55,0.17,868,3.698]],["body/classes/GenerateCodeExplanationDto.html",[3,0.053,4,0.053,5,0.048,10,0.226,11,1.148,13,0.984,14,0.415,15,0.005,16,0.077,54,0.059,55,0.259,69,1.244,89,2.162,123,1.91,141,2.733,242,0.004,243,0.004,294,0.429,507,1.508,511,0.998,512,3.488,514,4.873,515,2.023,518,3.5,519,0.849,520,3.294,521,1.819,522,1.395,794,5.679,837,6.076,862,3.94,868,5.652,1135,3.582,1252,4.348,1255,6.281,1256,4.348,1257,5.652,1258,5.652,1259,5.652,1260,5.652,1261,5.652,1262,5.652,1263,5.652,1264,5.652,1265,5.652,1267,3.87,1268,4.15,1270,4.15,1278,5.536,1279,3.474,1280,3.474,1281,4.15,1282,4.15,1283,4.15,1284,4.15,1285,4.15,1287,4.348,2541,6.893,2542,5.282,2543,6.624,2544,5.887,2545,5.887,2546,5.887,2547,5.887]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[55,0.17,899,3.698]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[3,0.053,4,0.053,5,0.047,10,0.224,11,1.142,13,0.981,14,0.414,15,0.005,16,0.076,54,0.059,55,0.258,69,1.242,89,2.155,123,1.9,141,2.711,242,0.004,243,0.004,294,0.427,507,1.495,511,0.995,512,3.477,514,4.866,515,2.019,518,3.491,519,0.842,520,3.281,521,1.804,522,1.322,794,5.664,837,6.06,862,3.93,883,6.069,896,6.875,899,5.622,1135,3.553,1252,4.313,1255,6.256,1256,4.313,1257,5.622,1258,5.622,1259,5.622,1260,5.622,1261,5.622,1262,5.622,1263,5.622,1264,5.622,1265,5.622,1267,3.85,1268,4.116,1270,4.116,1278,5.514,1279,3.446,1280,3.446,1281,4.116,1282,4.116,1283,4.116,1284,4.116,1285,4.116,1287,4.313,2541,6.875,2543,6.598,2548,4.844,2549,5.839,2550,5.239,2551,5.839,2552,5.239]],["title/classes/GenerateCodeTestSuggestionDto.html",[55,0.17,927,3.698]],["body/classes/GenerateCodeTestSuggestionDto.html",[3,0.058,4,0.058,5,0.052,10,0.246,11,1.214,13,1.016,14,0.412,15,0.005,16,0.081,54,0.064,55,0.274,69,1.132,89,2.233,141,2.982,242,0.004,243,0.004,294,0.422,507,1.645,511,0.982,512,3.433,514,4.908,515,1.967,518,3.488,519,0.926,520,3.135,521,1.985,522,1.328,837,6.241,862,3.927,883,5.472,927,5.977,930,6.557,1252,4.745,1267,4.092,1268,4.529,1270,4.529,1278,5.768,1279,3.791,1280,3.791,1281,4.529,1282,4.529,1283,4.529,1284,4.529,1285,4.529,2541,6.87,2543,6.902,2548,5.329,2550,5.764,2552,5.764,2553,6.424]],["title/classes/GeneratePullRequestDescriptionDto.html",[55,0.17,2554,3.698]],["body/classes/GeneratePullRequestDescriptionDto.html",[3,0.046,4,0.046,5,0.041,10,0.194,11,1.036,13,0.925,14,0.417,15,0.005,16,0.069,54,0.051,55,0.234,69,1.296,89,2.033,123,1.724,141,2.345,202,4.266,206,4.855,242,0.003,243,0.003,294,0.436,298,0.795,392,3.066,438,2.866,507,1.293,511,1.015,512,3.28,515,2.071,518,3.326,519,0.728,520,3.28,521,1.561,522,1.398,792,6.251,794,5.396,837,5.773,851,5.382,862,3.957,943,3.576,952,4.343,1078,3.208,1086,3.656,1088,3.515,1135,3.073,1255,5.817,1256,3.73,1257,5.103,1258,5.103,1259,5.103,1260,5.103,1261,5.103,1262,5.103,1263,5.103,1264,5.103,1265,5.103,1267,3.494,1268,3.56,1270,3.56,1272,4.19,1273,5.732,1274,5.732,1275,5.732,1276,6.533,1278,5.127,1279,2.981,1280,2.981,1281,3.56,1282,3.56,1283,3.56,1284,3.56,1285,3.56,1286,4.19,1287,3.73,1842,3.934,2541,6.923,2543,6.135,2554,5.103,2555,4.532,2556,7.876,2557,7.956,2558,5.051,2559,5.051,2560,5.051,2561,5.051,2562,5.051,2563,5.051,2564,5.051,2565,5.051,2566,5.051,2567,5.051,2568,5.051,2569,4.532,2570,5.051,2571,5.051,2572,5.051,2573,5.051]],["title/controllers/HealthController.html",[524,1.142,2574,3.9]],["body/controllers/HealthController.html",[3,0.05,4,0.05,5,0.045,10,0.212,15,0.005,16,0.088,19,0.725,54,0.055,55,0.187,57,1.491,60,2.471,66,1.352,67,2.106,242,0.003,243,0.003,290,1.476,294,0.349,300,1.476,306,4.727,307,3.082,311,4.583,420,3.294,452,4.303,496,4.583,500,6.089,501,6.753,503,1.491,511,0.814,519,0.797,524,1.261,526,1.511,528,2.039,540,3.095,604,3.302,605,3.091,606,2.039,632,3.432,635,2.753,759,2.333,1397,5.344,2574,5.718,2575,4.957,2576,9.4,2577,9.4,2578,5.525,2579,7.34,2580,7.34,2581,5.525,2582,5.525,2583,7.34,2584,5.525,2585,7.34,2586,7.34,2587,7.34,2588,8.243,2589,7.34,2590,7.34,2591,5.525,2592,5.525,2593,5.525,2594,5.525,2595,5.525,2596,6.586,2597,7.34,2598,5.525,2599,5.525,2600,5.525,2601,5.525,2602,5.525,2603,5.525,2604,7.34,2605,5.525,2606,5.525,2607,5.525,2608,5.525,2609,5.525,2610,5.525,2611,5.525,2612,5.525,2613,5.525,2614,5.525,2615,5.525,2616,5.525,2617,5.525,2618,5.525,2619,5.525,2620,5.525]],["title/modules/HealthModule.html",[244,1.282,271,3.698]],["body/modules/HealthModule.html",[3,0.07,4,0.07,5,0.062,15,0.005,16,0.096,19,1.012,54,0.077,55,0.261,242,0.004,243,0.004,244,2.315,246,2.89,271,6.677,289,3.196,310,8.111,311,6.393,526,2.472,2574,7.473,2621,7.706,2622,7.706]],["title/controllers/HighlightController.html",[524,1.142,2623,3.9]],["body/controllers/HighlightController.html",[3,0.032,4,0.032,5,0.029,8,2.665,10,0.137,13,1.05,14,0.403,15,0.005,16,0.092,19,0.469,25,1.187,26,1.28,28,1.769,54,0.036,55,0.121,66,1.556,67,2.028,71,3.03,89,1.955,94,2.789,104,2.399,105,2.406,208,2.159,213,1.044,242,0.003,243,0.003,290,1.084,294,0.402,296,1.637,297,0.962,298,0.793,300,1.7,349,1.809,392,2.122,394,5.252,395,2.521,396,2.328,405,4.615,503,0.965,511,0.937,519,0.516,522,1.128,524,0.816,526,0.978,528,1.32,540,3.359,545,4.954,549,3.245,599,1.769,600,1.566,601,2.895,603,3.352,604,3.484,605,3.262,606,1.32,626,1.458,632,1.28,634,2.406,635,3.169,646,2.05,755,4.316,761,3.737,762,1.628,771,1.3,970,1.223,971,1.494,1159,4.987,1163,1.51,1164,1.596,1165,1.66,1166,1.596,1167,1.66,1583,4.836,1673,4.572,1796,3.981,2097,7.305,2162,3.645,2171,5.714,2176,4.791,2343,4.852,2368,3.981,2372,1.695,2373,1.995,2429,3.645,2623,4.199,2624,3.209,2625,7.01,2626,6.486,2627,7.221,2628,6.478,2629,7.221,2630,7.221,2631,7.221,2632,6.486,2633,3.577,2634,3.577,2635,5.39,2636,3.28,2637,5.39,2638,4.471,2639,5.333,2640,4.836,2641,4.791,2642,3.577,2643,3.577,2644,3.577,2645,5.82,2646,3.577,2647,3.209,2648,3.209,2649,3.577,2650,3.577,2651,3.577,2652,2.967,2653,3.577,2654,3.577,2655,3.209,2656,3.577,2657,3.577,2658,3.209,2659,3.209,2660,3.209,2661,3.209,2662,3.577,2663,3.577,2664,3.577,2665,5.39,2666,3.577,2667,4.028,2668,3.828,2669,1.896,2670,4.222,2671,3.577,2672,2.786,2673,3.577,2674,3.577,2675,3.577,2676,2.967,2677,5.82,2678,3.577,2679,3.209,2680,3.577,2681,3.577,2682,3.577,2683,3.577,2684,3.28,2685,3.577,2686,3.577,2687,3.577,2688,3.209,2689,3.577,2690,3.577,2691,3.209,2692,3.209,2693,3.577,2694,3.209,2695,3.209,2696,3.577,2697,3.577]],["title/modules/HighlightModule.html",[244,1.282,272,3.698]],["body/modules/HighlightModule.html",[3,0.065,4,0.065,5,0.058,15,0.005,16,0.099,19,0.948,24,2.084,54,0.072,55,0.245,59,2.142,242,0.004,243,0.004,244,2.228,246,2.71,247,3.427,252,3.427,253,2.799,254,2.754,272,7.439,285,5.944,289,3.609,304,3.355,360,4.886,394,4.264,395,5.094,396,4.704,526,2.379,2623,7.273,2698,7.226,2699,7.226,2700,7.226,2701,6.483,2702,7.226]],["title/classes/HighlightOptionsDto.html",[55,0.17,2171,3.386]],["body/classes/HighlightOptionsDto.html",[3,0.048,4,0.048,5,0.043,10,0.202,11,1.066,13,0.983,14,0.405,15,0.005,16,0.086,54,0.071,55,0.273,69,1.1,75,2.495,84,2.666,93,3.113,104,2.405,105,3.845,123,2.463,125,2.948,141,2.444,143,3.704,194,3.283,242,0.003,243,0.003,294,0.441,298,0.941,395,3.712,404,3.019,405,3.979,406,3.31,420,2.666,438,2.948,503,2.74,507,1.348,511,1.028,515,1.702,519,0.759,520,3.117,521,1.627,522,0.985,728,2.46,741,2.862,800,2.35,854,1.561,917,2.495,943,2.725,970,1.8,971,1.459,1022,2.792,1027,2.43,1035,4.89,1055,2.862,1057,3.965,1058,3.965,1060,3.604,1062,2.862,1063,2.862,1067,2.663,1068,3.678,1069,2.663,1070,2.862,1071,3.107,1072,4.069,1073,2.725,1074,2.938,1075,3.019,1076,2.725,1077,3.019,1078,3.736,1079,2.791,1080,2.938,1081,2.938,1082,3.863,1083,3.019,1084,2.862,1085,3.019,1086,3.736,1088,3.591,1128,3.712,1677,4.101,2138,4.101,2139,4.101,2162,3.56,2163,5.896,2164,4.368,2165,4.368,2166,4.368,2170,4.724,2171,4.806,2172,4.468,2173,4.724,2174,4.724,2175,4.724,2525,4.101,2703,5.265]],["title/injectables/HttpLoggerMiddleware.html",[17,0.865,361,3.9]],["body/injectables/HttpLoggerMiddleware.html",[3,0.056,4,0.056,5,0.05,10,0.237,11,1.183,14,0.251,15,0.005,16,0.092,17,1.363,19,0.81,54,0.079,55,0.209,60,2.286,63,2.145,66,1.601,108,2.129,123,1.968,149,5.576,242,0.004,243,0.004,290,1.587,294,0.375,296,1.195,297,0.654,298,0.579,300,1.241,301,4.35,319,5.118,320,5.118,321,5.118,361,6.774,392,3.169,457,6.461,498,5.826,782,1.961,807,6.742,834,4.523,1060,2.472,1470,5.118,1471,5.118,1704,5.118,2704,7.802,2705,6.145,2706,7.889,2707,9.165,2708,6.17,2709,7.889,2710,6.17,2711,7.889,2712,5.536,2713,5.118,2714,6.17,2715,6.17,2716,5.536,2717,6.17,2718,6.17,2719,7.889,2720,8.223,2721,7.889,2722,6.17,2723,6.17,2724,6.17,2725,6.17,2726,6.17,2727,6.17]],["title/controllers/InsightController.html",[524,1.142,2728,3.9]],["body/controllers/InsightController.html",[3,0.047,4,0.047,5,0.042,10,0.199,13,1.063,14,0.396,15,0.005,16,0.095,19,0.68,54,0.052,55,0.176,63,1.213,66,0.954,67,1.879,71,2.721,89,2.055,101,1.824,108,1.398,213,1.546,242,0.003,243,0.003,290,1.414,294,0.335,296,1.362,297,0.908,298,0.66,300,1.414,367,4.856,392,1.695,503,1.398,511,0.78,519,0.747,522,1.186,524,1.182,526,1.417,528,1.913,540,3.015,542,3.727,543,3.504,545,4.278,549,3.251,600,2.269,601,3.138,602,3.727,603,3.705,604,3.197,605,2.993,606,1.913,626,2.112,632,1.854,634,2.313,635,2.637,646,2.138,755,3.727,756,2.891,761,3.639,762,2.358,771,1.883,775,1.913,1027,3.154,1319,5.037,1746,3.504,2300,2.682,2343,3.923,2369,3.827,2372,2.455,2373,2.891,2429,4.754,2667,4.452,2668,4.231,2669,2.747,2728,5.477,2729,4.649,2730,8.559,2731,8.559,2732,5.182,2733,4.036,2734,5.833,2735,5.182,2736,6.309,2737,5.477,2738,5.182,2739,5.182,2740,5.182,2741,4.298,2742,4.957,2743,4.649,2744,4.649,2745,5.182,2746,4.957,2747,7.031,2748,5.193,2749,3.827,2750,4.298,2751,3.827,2752,5.017,2753,3.504,2754,5.182,2755,4.298,2756,4.036,2757,5.182,2758,5.833,2759,4.298,2760,5.182,2761,4.649,2762,5.182]],["title/injectables/InsightMemberService.html",[17,0.865,2763,3.386]],["body/injectables/InsightMemberService.html",[3,0.039,4,0.039,5,0.035,10,0.164,13,1.018,14,0.363,15,0.005,16,0.092,17,1.062,18,2.854,19,0.561,20,2.398,21,3.815,22,0.975,23,1.684,24,1.233,25,1.419,26,1.529,54,0.043,55,0.145,57,1.659,59,1.267,60,1.892,62,3.322,63,2.093,64,2.854,66,1.716,67,2.049,69,1.236,71,2.759,72,3.477,73,3.094,75,2.026,101,1.867,104,2.166,108,1.154,123,1.067,238,3.258,242,0.003,243,0.003,251,4.741,290,1.236,294,0.436,296,1.732,297,0.949,298,0.839,300,1.799,400,4.866,401,3.33,438,3.264,455,1.398,549,2.937,646,1.831,649,5.282,759,2.288,775,1.578,782,1.359,970,1.461,971,1.185,972,2.687,977,2.687,979,4.122,980,2.974,1060,1.713,1319,2.212,1746,2.891,2324,3.546,2428,3.74,2446,3.74,2458,3.546,2752,4.947,2753,2.891,2761,3.836,2763,4.156,2764,7.731,2765,3.836,2766,5.515,2767,7.197,2768,5.515,2769,6.147,2770,5.515,2771,4.275,2772,7.197,2773,4.275,2774,6.147,2775,6.147,2776,4.275,2777,7.48,2778,4.275,2779,4.275,2780,7.847,2781,8.337,2782,7.869,2783,4.275,2784,6.147,2785,4.275,2786,4.275,2787,6.147,2788,4.275,2789,5.515,2790,4.275,2791,3.33,2792,4.275,2793,4.275,2794,4.275,2795,4.275,2796,4.275,2797,4.275,2798,4.275,2799,6.147,2800,4.275,2801,4.275,2802,3.836,2803,4.275,2804,4.275,2805,4.275,2806,4.275,2807,4.275,2808,4.275,2809,4.275]],["title/classes/InsightOptionsDto.html",[55,0.17,2810,4.154]],["body/classes/InsightOptionsDto.html",[3,0.044,4,0.044,5,0.039,10,0.186,11,1.009,13,0.956,14,0.408,15,0.005,16,0.077,37,2.786,54,0.067,55,0.228,69,1.208,84,2.523,93,2.947,94,2.515,96,2.711,104,2.36,105,3.718,123,2.489,125,2.79,141,2.256,143,3.581,194,3.175,208,1.947,242,0.003,243,0.003,294,0.457,298,0.959,503,2.792,507,1.244,511,1.064,519,0.701,520,3.227,521,1.502,728,2.11,800,2.169,854,1.441,917,2.302,970,1.661,971,1.346,1022,2.335,1027,2.3,1032,3.163,1035,4.754,1055,2.641,1057,3.754,1058,3.754,1060,3.625,1062,3.657,1063,4.195,1066,4.36,1067,2.457,1068,3.482,1069,2.457,1070,2.641,1071,2.868,1072,3.903,1073,2.515,1074,2.711,1075,2.786,1076,2.515,1077,2.786,1078,3.124,1079,2.576,1080,2.711,1081,2.711,1082,3.657,1083,2.786,1084,2.641,1085,2.786,1086,4.061,1087,2.957,1088,3.904,1089,3.971,1189,5.241,1855,3.163,2172,4.851,2496,3.426,2512,3.163,2520,4.851,2521,5.218,2522,5.688,2523,3.589,2527,4.743,2531,3.589,2810,5.581,2811,6.813,2812,4.859,2813,4.859,2814,7.718,2815,4.859,2816,4.859,2817,4.031,2818,4.031,2819,4.031,2820,4.031,2821,4.031]],["title/classes/InsightPageOptionsDto.html",[55,0.17,2822,3.53]],["body/classes/InsightPageOptionsDto.html",[3,0.055,4,0.055,5,0.049,10,0.231,11,1.165,13,1.027,14,0.407,15,0.005,16,0.06,54,0.06,55,0.204,84,2.914,93,3.403,104,2.476,105,4.055,123,2.523,125,3.222,141,2.797,143,3.905,194,3.462,242,0.004,243,0.004,294,0.447,298,0.949,503,2.728,507,1.543,511,1.042,800,2.689,854,1.786,917,2.855,970,2.06,971,1.67,1022,2.696,1027,2.94,1035,5.11,1055,3.275,1057,4.334,1058,4.334,1060,3.766,1062,3.275,1063,3.275,1067,3.047,1068,4.021,1069,3.047,1070,3.275,1071,3.556,1072,4.348,1073,3.118,1074,3.361,1075,3.455,1076,3.118,1077,3.455,1078,3.607,1079,3.194,1080,3.361,1081,3.361,1082,4.223,1083,3.455,1084,3.275,1085,3.455,2811,4.693,2822,5.477]],["title/injectables/InsightRepoService.html",[17,0.865,2823,3.53]],["body/injectables/InsightRepoService.html",[3,0.054,4,0.054,5,0.048,10,0.228,13,1.048,14,0.347,15,0.005,16,0.098,17,1.331,19,0.78,20,2.754,22,1.357,23,2.342,24,1.715,54,0.06,55,0.201,57,2.078,59,1.763,60,2.025,63,1.392,66,1.418,67,1.954,101,1.542,208,2.382,242,0.004,243,0.004,290,1.549,294,0.407,296,1.655,297,0.906,298,0.802,300,1.549,349,3.006,369,4.02,426,4.631,455,1.945,646,1.306,662,2.817,724,5.208,727,4.631,728,2.336,759,2.448,782,1.89,857,3.231,952,3.737,1046,4.631,1293,2.877,1319,3.077,1323,5.883,1325,4.02,1326,4.932,1329,3.618,1751,4.391,2764,7.497,2780,6.389,2791,4.631,2823,5.43,2824,5.334,2825,7.703,2826,7.703,2827,5.946,2828,6.356,2829,5.946,2830,7.703,2831,7.703,2832,5.946,2833,7.703,2834,5.946,2835,4.631,2836,5.334,2837,4.631,2838,5.946,2839,4.932,2840,5.334,2841,5.334,2842,4.932,2843,5.334,2844,4.932,2845,5.946,2846,5.334,2847,5.946,2848,4.932,2849,5.334,2850,5.946]],["title/modules/InsightsModule.html",[244,1.282,273,3.698]],["body/modules/InsightsModule.html",[3,0.052,4,0.052,5,0.047,15,0.005,16,0.103,19,0.76,24,1.671,54,0.058,55,0.196,59,1.717,213,1.467,242,0.004,243,0.004,244,1.939,245,5.795,246,2.172,247,2.983,252,2.983,253,2.244,254,2.207,257,3.141,258,3.256,273,7.696,276,6.714,285,5.621,289,3.141,304,2.689,349,2.929,360,3.916,367,3.524,369,5.12,400,5.12,401,4.512,426,4.512,427,5.197,526,2.071,1319,4.366,2420,4.083,2421,4.083,2728,6.572,2751,4.278,2752,6.399,2753,3.916,2763,6.44,2791,5.899,2823,7.177,2851,5.197,2852,5.792,2853,5.197,2854,5.197,2855,5.792,2856,6.572,2857,6.572,2858,7.573,2859,4.512,2860,5.792,2861,4.805,2862,5.792]],["title/injectables/InsightsService.html",[17,0.865,2752,3.148]],["body/injectables/InsightsService.html",[3,0.04,4,0.04,5,0.036,10,0.172,13,1.029,14,0.358,15,0.005,16,0.094,17,1.097,18,2.947,19,0.587,20,2.448,21,3.912,22,1.02,23,1.761,24,1.29,25,1.484,26,1.6,54,0.045,55,0.151,57,1.713,59,1.326,60,1.668,62,3.391,63,2.167,64,2.947,66,1.623,67,2.031,69,0.942,71,2.553,72,3.218,73,1.923,82,1.704,100,1.326,101,2.084,104,1.584,108,1.991,208,1.791,213,0.866,238,3.365,242,0.003,243,0.003,290,1.277,294,0.431,296,1.706,297,0.935,298,0.827,300,1.772,367,3.862,426,3.483,455,1.463,549,3.263,646,1.863,649,5.361,662,3.008,724,4.292,727,3.483,759,2.346,775,1.651,782,1.422,857,2.431,952,2.811,970,1.529,971,1.239,979,3.649,980,2.164,1023,4.062,1026,3.541,1027,1.529,1046,3.483,1050,2.431,1114,3.153,1115,2.811,1116,2.721,1319,4.56,1540,2.564,1579,2.119,1721,2.419,1750,3.303,1751,3.303,1755,3.303,1774,4.012,1782,5.695,2428,3.862,2446,3.862,2751,3.303,2752,3.99,2822,5.662,2828,5.9,2835,3.483,2836,4.012,2837,3.483,2839,3.71,2840,4.012,2841,4.012,2842,3.71,2843,4.012,2844,3.71,2846,4.012,2863,4.012,2864,6.348,2865,4.688,2866,6.348,2867,6.348,2868,4.472,2869,4.472,2870,6.348,2871,6.348,2872,4.472,2873,4.472,2874,4.944,2875,4.472,2876,4.472,2877,6.348,2878,4.472,2879,6.348,2880,4.472,2881,3.71,2882,4.472,2883,6.348,2884,4.472,2885,4.472,2886,6.348,2887,6.348,2888,4.472,2889,4.472,2890,4.472,2891,4.472,2892,4.472,2893,4.472,2894,4.472,2895,4.472,2896,4.472,2897,4.472]],["title/controllers/IssueSummaryController.html",[524,1.142,2898,3.9]],["body/controllers/IssueSummaryController.html",[3,0.057,4,0.057,5,0.051,10,0.243,14,0.326,15,0.005,16,0.096,19,0.833,54,0.064,55,0.215,63,1.485,66,1.168,67,1.794,101,1.646,108,1.712,242,0.004,243,0.004,290,1.615,294,0.302,296,1.229,297,0.673,298,0.595,300,1.276,392,2.076,503,1.712,511,0.703,519,0.915,522,0.879,524,1.448,526,1.735,528,2.342,540,3.533,567,3.283,599,3.137,600,2.779,601,3.584,602,4.256,605,3.011,606,2.342,626,2.586,632,2.27,634,2.832,635,2.379,744,5.263,749,5.693,751,5.047,755,4.256,756,3.54,757,5.693,759,2.017,760,4.739,761,4.155,762,2.887,763,3.006,765,4.942,767,5.735,768,4.942,771,2.305,772,5.693,775,2.342,1337,7.206,1632,4.473,2898,6.255,2899,6.255,2900,8.308,2901,6.345,2902,6.345,2903,8.03,2904,6.21,2905,6.345,2906,6.345,2907,6.345,2908,6.345]],["title/modules/IssueSummaryModule.html",[244,1.282,274,3.698]],["body/modules/IssueSummaryModule.html",[3,0.063,4,0.063,5,0.056,15,0.005,16,0.096,19,0.914,54,0.07,55,0.236,242,0.004,243,0.004,244,2.178,246,2.61,247,3.35,252,3.35,253,2.696,254,2.652,257,3.527,258,3.657,274,7.593,275,6.499,289,3.527,420,2.61,421,3.783,422,5.421,526,2.326,767,5.537,768,5.421,780,6.244,781,6.244,2898,7.155,2899,5.421,2904,7.358,2909,6.244,2910,6.96,2911,6.244,2912,6.244]],["title/injectables/IssueSummaryService.html",[17,0.865,2904,3.53]],["body/injectables/IssueSummaryService.html",[3,0.052,4,0.052,5,0.046,10,0.22,13,0.917,14,0.341,15,0.005,16,0.084,17,1.299,19,0.752,54,0.057,55,0.194,57,1.545,60,2.205,63,1.759,66,1.384,67,1.709,69,1.213,137,3.113,242,0.004,243,0.004,290,1.512,294,0.399,296,1.625,297,0.89,298,0.787,300,1.512,420,2.148,421,3.113,497,4.038,522,0.793,540,3.259,651,3.38,669,3.38,751,3.6,759,2.39,763,2.714,765,4.461,767,6.181,771,2.081,782,1.821,783,4.751,784,5.299,785,4.038,786,5.444,787,5.139,790,5.552,791,5.8,792,6.522,793,5.139,794,5.106,795,3.873,796,4.038,797,4.038,798,3.728,799,4.23,800,2.556,801,4.038,802,4.23,803,4.23,804,4.23,805,4.23,806,4.751,807,3.873,808,4.461,809,5.139,810,5.139,811,4.038,812,4.893,813,3.485,816,5.299,817,4.038,818,4.23,819,5.139,820,4.751,821,4.038,822,5.258,823,4.038,824,4.038,825,4.038,919,3.728,1079,3.036,1337,6.58,1342,5.552,1632,4.038,2899,6.94,2900,6.744,2904,5.299,2913,7.517,2914,5.727,2915,5.139,2916,5.727,2917,5.139,2918,7.517,2919,5.727,2920,5.727,2921,5.727,2922,5.727]],["title/modules/LogModule.html",[244,1.282,2923,3.9]],["body/modules/LogModule.html",[3,0.063,4,0.063,5,0.056,15,0.005,16,0.1,19,0.912,24,2.004,54,0.07,55,0.235,242,0.004,243,0.004,244,2.175,246,2.605,247,3.346,252,3.346,253,2.691,254,2.647,257,3.523,258,3.652,289,2.881,304,3.225,305,7.622,307,3.875,384,4.897,457,4.897,466,5.762,1407,7.707,1418,7.035,1433,6.232,2923,8.006,2924,6.232,2925,6.232,2926,6.232,2927,6.946,2928,6.232,2929,6.946,2930,6.946]],["title/injectables/LogService.html",[17,0.865,1418,3.53]],["body/injectables/LogService.html",[3,0.061,4,0.061,5,0.055,10,0.259,14,0.339,15,0.005,16,0.098,17,1.443,19,0.886,20,2.885,22,1.54,23,2.659,24,1.947,54,0.068,55,0.229,57,2.252,60,1.774,63,1.58,66,1.243,67,1.846,101,1.751,242,0.004,243,0.004,290,1.679,294,0.397,296,1.617,297,0.885,298,0.783,300,1.358,384,4.759,438,2.799,466,5.599,759,2.146,763,3.198,782,2.146,857,3.669,1344,7.374,1413,5.599,1418,5.884,2928,6.056,2931,6.056,2932,8.347,2933,6.75,2934,6.75,2935,8.347,2936,8.347,2937,6.75,2938,6.75,2939,6.75,2940,8.347,2941,6.75,2942,6.75,2943,6.75]],["title/modules/OpenAiModule.html",[244,1.282,275,3.26]],["body/modules/OpenAiModule.html",[3,0.066,4,0.066,5,0.059,15,0.005,16,0.088,19,0.964,54,0.074,55,0.249,242,0.004,243,0.004,244,2.25,246,2.754,247,3.461,252,3.461,253,2.845,254,2.799,257,3.644,258,3.777,275,6.653,420,2.754,421,3.991,786,6.024,795,4.966,827,5.721,2944,6.589,2945,6.589,2946,6.589,2947,7.344]],["title/injectables/OpenAiService.html",[17,0.865,786,2.871]],["body/injectables/OpenAiService.html",[0,3.375,3,0.053,4,0.053,5,0.048,10,0.226,13,0.929,14,0.346,15,0.005,16,0.085,17,1.323,19,0.773,54,0.059,55,0.199,57,1.589,63,1.99,66,1.084,67,1.732,69,1.244,101,1.985,108,1.589,147,4.348,148,4.348,149,3.582,150,4.348,194,2.244,213,1.14,242,0.004,243,0.004,290,1.539,294,0.364,296,1.482,297,0.812,298,0.718,300,1.184,306,5.485,307,3.284,421,4.622,498,4.348,567,3.047,599,2.911,638,5.652,759,1.871,771,2.139,775,2.173,782,1.871,786,4.388,807,3.981,812,5.861,826,5.961,827,6.624,828,4.883,829,5.282,831,8.583,832,4.883,833,5.282,834,3.375,835,6.867,836,8.078,837,6.076,838,5.282,839,5.282,840,3.832,841,5.282,842,5.282,843,4.348,844,5.282,845,4.883,846,5.282,847,5.282,848,5.282,849,1.954,850,5.282,851,4.586,852,5.282,853,6.867,854,1.745,855,5.282,856,5.282,857,3.2,858,5.282,859,5.282,860,5.282,2476,4.883,2948,7.653,2949,5.887,2950,5.887]],["title/classes/PageDto.html",[25,1.662,55,0.17]],["body/classes/PageDto.html",[3,0.058,4,0.058,5,0.052,10,0.248,11,1.218,14,0.404,15,0.005,16,0.093,25,2.695,54,0.065,55,0.301,57,1.743,242,0.004,243,0.004,294,0.423,296,1.251,297,0.685,298,0.606,438,3.368,503,2.645,507,1.654,511,0.9,518,3.331,519,0.931,521,1.996,857,5.219,941,3.703,943,4.597,946,3.703,1023,5.088,1027,2.208,1048,7.014,1050,3.51,1118,7.286,1119,6.493,1121,5.795,1122,5.795,1123,5.795,1125,5.795,1126,5.795,1127,7.969,1128,4.553,1129,5.795,1130,5.795,2951,5.795,2952,8.121,2953,6.459]],["title/classes/PageMetaDto.html",[55,0.17,1023,2.532]],["body/classes/PageMetaDto.html",[3,0.047,4,0.047,5,0.042,10,0.198,11,1.051,13,1.106,14,0.413,15,0.005,16,0.07,54,0.052,55,0.175,57,1.89,89,2.302,93,3.485,104,1.286,149,4.262,194,3.254,242,0.003,243,0.003,294,0.448,296,0.998,297,0.547,298,0.483,438,2.905,455,2.291,503,2.777,507,1.319,511,1.021,512,3.568,515,2.115,518,3.534,519,0.743,522,1.276,733,4.046,854,2.647,1023,3.542,1024,7.139,1025,7.139,1026,4.982,1027,3.418,1028,7.139,1029,4.623,1030,6.306,1032,4.559,1033,6.019,1034,6.651,1037,5.456,1039,7.083,1040,7.661,1042,5.81,1044,4.559,1046,5.456,1048,3.632,1049,4.623,2516,5.877,2517,5.173,2954,7.469,2955,4.623,2956,7.004,2957,5.152,2958,5.152,2959,5.152,2960,5.152,2961,5.152,2962,5.152,2963,5.152,2964,5.152,2965,5.152,2966,5.152,2967,5.152,2968,5.152]],["title/interfaces/PageMetaParameters.html",[0,2.871,1030,3.698]],["body/interfaces/PageMetaParameters.html",[0,4.353,2,5.607,3,0.069,4,0.069,5,0.061,10,0.291,11,1.344,13,1.042,14,0.364,15,0.005,16,0.076,54,0.076,104,2.586,242,0.004,243,0.004,971,2.104,1026,5.495,1027,2.596,1030,6.619,1048,5.352,2954,5.914,2969,6.812]],["title/classes/PageOptionsDto.html",[55,0.17,104,1.249]],["body/classes/PageOptionsDto.html",[3,0.044,4,0.044,5,0.039,10,0.187,11,1.013,13,1.103,14,0.416,15,0.005,16,0.084,54,0.049,55,0.262,66,0.9,84,3.131,89,2.005,93,3.39,104,1.685,105,4.147,123,2.52,125,3.463,141,3.135,143,4.071,194,3.708,242,0.003,243,0.003,294,0.431,298,0.913,503,2.725,507,1.251,511,0.972,519,0.704,521,1.51,522,0.936,800,3.014,854,2.002,917,3.2,946,2.801,1027,2.646,1055,2.655,1057,4.318,1058,4.318,1060,3.511,1062,2.655,1063,3.671,1067,3.914,1068,3.495,1069,3.415,1070,2.655,1072,4.698,1073,4.005,1074,2.726,1076,2.528,1078,3.135,1079,3.58,1080,3.768,1081,2.726,1082,3.671,1084,2.655,1086,4.208,1087,2.973,1088,4.046,1089,2.883,1102,3.806,1135,2.973,1136,6.178,1137,4.384,1138,6.059,1279,2.883,1280,2.883,2492,4.988,2493,5.456,2510,3.806,2512,4.396,2513,4.988,2516,3.608,2517,3.608,2526,4.053,2528,3.806,2954,7.237,2970,4.886,2971,4.886,2972,4.886,2973,4.886,2974,4.886,2975,4.053,2976,4.886,2977,4.886]],["title/injectables/PagerService.html",[17,0.865,251,2.654]],["body/injectables/PagerService.html",[0,3.827,3,0.06,4,0.06,5,0.054,10,0.256,14,0.337,15,0.005,16,0.099,17,1.433,19,0.876,21,4.394,22,1.523,25,2.216,54,0.067,55,0.226,63,1.94,66,1.229,67,1.836,72,3.321,100,1.979,101,1.732,104,2.42,108,2.237,242,0.004,243,0.004,251,4.394,290,1.667,294,0.318,296,1.605,297,0.708,298,0.626,300,1.342,759,2.122,782,2.122,971,1.85,976,4.513,1023,4.768,1026,4.624,1050,3.628,1115,4.196,1116,4.061,1243,1.466,2978,5.537,2979,8.089,2980,6.675,2981,7.345,2982,6.675,2983,5.989,2984,5.989,2985,4.93,2986,7.437,2987,5.989,2988,5.537]],["title/interfaces/PaginationInput.html",[0,2.871,2981,3.9]],["body/interfaces/PaginationInput.html",[0,3.878,2,4.995,3,0.061,4,0.061,5,0.055,10,0.259,11,1.253,14,0.34,15,0.005,16,0.099,17,1.444,19,0.888,21,5.022,22,1.543,25,2.245,54,0.068,55,0.229,63,1.956,66,1.245,67,1.377,72,3.899,100,2.005,101,1.755,104,2.57,108,2.255,242,0.004,243,0.004,251,3.585,971,1.874,976,4.573,1023,4.79,1026,4.662,1050,3.676,1115,4.251,1116,4.115,2978,5.61,2979,6.068,2981,7.064,2983,6.068,2984,6.068,2985,4.995,2986,7.498,2987,6.068,2988,5.61]],["title/controllers/PizzaOvenController.html",[524,1.142,2989,3.9]],["body/controllers/PizzaOvenController.html",[3,0.03,4,0.03,5,0.026,10,0.125,13,1.033,14,0.408,15,0.005,16,0.092,19,0.429,20,2.1,25,1.085,26,1.169,54,0.033,55,0.111,57,0.882,60,1.613,63,0.765,66,1.508,67,2.028,71,2.977,89,2.126,90,3.951,101,0.848,104,2.454,108,0.882,208,2.016,242,0.002,243,0.002,290,1.012,294,0.402,296,1.637,297,0.982,298,0.793,300,1.7,347,4.486,349,1.652,350,4.486,352,4.332,392,1.069,503,1.656,511,0.937,519,0.471,522,0.955,524,0.746,526,0.893,528,1.206,540,3.359,567,1.691,599,2.488,602,2.667,603,3.199,604,3.387,605,3.252,606,1.206,632,1.169,635,3.17,646,2.233,724,5.315,728,1.884,735,4.531,755,2.667,756,1.823,760,2.969,761,2.604,775,1.206,952,5.822,953,5.315,957,3.547,961,6.183,968,2.932,970,1.117,971,0.905,973,2.71,989,4.325,993,6.183,1002,2.932,1004,2.71,1159,4.847,1163,2.59,1164,1.458,1165,1.517,1166,1.458,1167,1.517,1523,7.013,2300,3.175,2343,5.224,2369,4.531,2372,1.548,2648,2.932,2667,4.385,2668,4.167,2684,3.061,2688,2.932,2720,4.514,2828,3.994,2835,2.545,2837,2.545,2842,5.089,2989,3.919,2990,6.756,2991,2.932,2992,6.183,2993,6.891,2994,6.891,2995,7.442,2996,7.442,2997,5.505,2998,2.932,2999,3.267,3000,3.267,3001,4.779,3002,3.267,3003,3.267,3004,3.267,3005,3.267,3006,3.267,3007,3.267,3008,3.267,3009,3.267,3010,3.267,3011,3.267,3012,3.267,3013,3.267,3014,3.267,3015,3.267,3016,4.514,3017,3.267,3018,3.267,3019,3.267,3020,3.267,3021,5.031,3022,5.031,3023,3.267,3024,3.267,3025,3.267,3026,3.267,3027,3.267,3028,3.267,3029,2.413,3030,6.135,3031,5.031,3032,3.267,3033,3.267,3034,5.031,3035,5.031,3036,2.932,3037,2.71,3038,2.932,3039,2.932,3040,3.267,3041,3.267,3042,3.267,3043,3.267,3044,3.267,3045,3.267,3046,3.267,3047,3.267,3048,3.267,3049,3.267,3050,3.267,3051,3.267,3052,3.267,3053,3.267,3054,3.267,3055,3.267,3056,3.267,3057,3.267,3058,3.267,3059,3.267,3060,3.267,3061,3.267,3062,3.267,3063,3.267,3064,3.267,3065,5.031,3066,3.267,3067,3.267,3068,3.267,3069,3.267]],["title/modules/PizzaOvenModule.html",[244,1.282,276,3.53]],["body/modules/PizzaOvenModule.html",[3,0.055,4,0.055,5,0.049,15,0.005,16,0.102,19,0.798,24,1.753,54,0.061,55,0.206,59,1.801,242,0.004,243,0.004,244,2,245,5.87,246,2.279,247,3.077,252,3.077,253,2.354,254,2.316,257,3.24,258,3.358,276,7.318,289,3.24,304,2.821,308,7.009,309,5.04,347,3.956,349,3.073,350,5.085,352,4.91,526,2.136,735,5.769,952,3.82,957,7.226,973,5.04,989,7.226,1004,5.04,2420,4.284,2421,4.284,2828,6.673,2835,4.733,2989,6.725,2990,4.733,3037,5.04,3038,5.452,3039,5.452,3070,5.452,3071,5.452,3072,5.452,3073,6.076,3074,6.076,3075,6.076,3076,6.076]],["title/injectables/PizzaOvenService.html",[17,0.865,2828,3.26]],["body/injectables/PizzaOvenService.html",[3,0.046,4,0.046,5,0.041,10,0.197,13,0.867,14,0.346,15,0.005,16,0.099,17,1.206,18,3.239,19,0.672,20,2.596,22,1.169,23,2.018,24,1.478,25,1.7,26,1.833,54,0.051,55,0.174,57,1.883,59,1.519,60,2.239,62,3.596,63,2.202,64,3.239,66,1.568,67,1.978,69,0.891,71,2.923,72,3.178,73,2.999,101,1.329,104,2.294,108,1.382,242,0.003,243,0.003,251,4.988,290,1.403,294,0.424,296,1.65,297,0.904,298,0.799,300,1.713,306,5.395,307,2.858,309,4.249,347,3.335,349,2.59,444,3.99,446,3.99,503,1.382,646,1.743,662,2.427,724,5.76,727,3.99,775,1.891,782,1.628,857,2.784,970,1.751,971,1.419,972,3.22,976,3.464,977,3.22,978,3.99,979,3.923,980,2.479,2828,4.542,2837,3.99,2844,4.249,2990,7.163,2992,6.26,2997,6.26,2998,6.26,3036,4.596,3037,4.249,3077,4.596,3078,6.977,3079,5.123,3080,9.409,3081,5.123,3082,6.977,3083,5.123,3084,6.977,3085,5.123,3086,5.123,3087,6.977,3088,5.123,3089,5.123,3090,5.123,3091,5.123,3092,5.123,3093,5.123,3094,5.123,3095,5.123,3096,5.123,3097,5.123,3098,5.123,3099,5.123,3100,5.123]],["title/classes/PullRequestContributorInsightsDto.html",[55,0.17,1186,3.698]],["body/classes/PullRequestContributorInsightsDto.html",[3,0.049,4,0.049,5,0.044,10,0.208,11,1.087,13,1.043,14,0.412,15,0.005,16,0.087,31,3.233,54,0.054,55,0.277,69,0.925,84,2.717,89,1.3,93,3.575,104,2.42,105,3.89,123,2.497,125,3.004,141,2.515,143,3.746,194,3.462,242,0.003,243,0.003,294,0.445,298,0.946,392,2.37,503,2.7,507,1.387,511,1.036,519,0.781,520,2.806,521,1.674,800,3.233,854,2.148,862,3.058,917,2.566,946,3.106,970,1.852,971,1.501,1022,2.514,1027,2.476,1035,4.937,1057,4.041,1058,4.041,1060,3.639,1062,2.944,1063,2.944,1067,3.663,1068,3.749,1069,3.663,1070,2.944,1072,4.127,1073,2.803,1074,3.022,1075,3.106,1076,2.803,1077,3.106,1078,3.363,1079,2.871,1080,3.022,1081,3.022,1082,3.937,1083,3.106,1084,2.944,1085,3.106,1086,3.789,1088,3.643,1136,5.107,1170,4.716,1186,5.35,1279,3.196,1280,3.196,2512,3.526,2513,4,2520,5.131,2527,3.818,2975,4.493,3101,4.86,3102,5.416,3103,5.416]],["title/classes/PullRequestContributorOptionsDto.html",[55,0.17,1154,3.698]],["body/classes/PullRequestContributorOptionsDto.html",[3,0.044,4,0.044,5,0.039,10,0.186,11,1.008,13,0.955,14,0.41,15,0.005,16,0.083,31,3.902,54,0.049,55,0.228,69,1.241,84,2.521,93,2.944,104,2.359,105,3.716,123,2.424,125,2.788,141,2.253,143,3.579,194,3.173,242,0.003,243,0.003,294,0.457,298,0.959,392,2.86,420,2.521,503,2.791,507,1.243,511,1.064,515,1.761,519,0.7,520,3.225,521,1.5,728,2.109,741,2.637,800,2.166,854,1.439,862,3.691,917,2.299,970,1.659,971,1.863,1022,2.333,1027,2.298,1035,4.752,1055,2.637,1057,3.75,1058,3.75,1060,3.502,1062,3.653,1063,4.192,1067,2.454,1068,3.479,1069,2.454,1070,2.637,1071,2.864,1072,3.9,1073,2.511,1074,2.707,1075,2.782,1076,2.511,1077,2.782,1078,3.121,1079,2.572,1080,2.707,1081,2.707,1082,3.653,1083,2.782,1084,2.637,1085,2.782,1086,4.059,1087,2.953,1088,3.902,1089,2.864,1154,4.965,1170,5.691,2172,4.848,2187,3.584,2496,4.739,2520,4.848,2521,5.215,2522,5.685,2523,3.584,2524,4.025,2525,3.78,2526,4.025,2527,3.421,2528,3.78,2529,4.354,2530,3.281,2531,3.584,3104,4.354]],["title/controllers/PullRequestController.html",[524,1.142,3105,3.9]],["body/controllers/PullRequestController.html",[3,0.04,4,0.04,5,0.036,10,0.17,13,0.803,14,0.388,15,0.005,16,0.099,19,0.583,25,1.473,26,1.588,54,0.045,55,0.15,57,1.198,60,1.932,66,1.474,67,1.985,69,0.806,71,2.938,104,2.408,124,2.62,143,1.908,197,4.663,202,4.472,203,4.484,242,0.003,243,0.003,290,1.27,294,0.381,296,1.55,297,0.897,298,0.751,300,1.61,386,4.597,388,4.992,390,2.89,391,4.269,392,3.157,393,3.458,407,4.269,408,3.278,503,1.983,511,0.887,519,0.64,524,1.013,526,1.214,528,1.638,540,3.256,604,3.388,605,3.172,606,1.638,632,1.588,635,3.002,646,1.858,840,2.89,862,3.571,865,2.89,879,3.278,880,3.278,970,1.517,971,2.036,1027,1.517,1155,3.458,1156,5.665,1157,4.663,1158,4.11,1159,4.59,1163,1.874,1164,1.981,1165,2.061,1166,1.981,1167,2.061,1168,4.62,1169,3.278,1174,3.458,1191,2.874,1746,4.269,2343,3.523,2369,3.278,2372,2.103,2503,5.238,2518,5.643,2639,5.912,2652,3.682,2667,3.523,2668,3.347,2676,3.682,2753,3.001,3105,4.918,3106,3.983,3107,8.005,3108,8.005,3109,8.005,3110,8.005,3111,4.439,3112,4.439,3113,4.439,3114,4.439,3115,4.439,3116,4.439,3117,6.314,3118,4.439,3119,4.439,3120,4.439,3121,6.314,3122,4.439,3123,4.439,3124,5.912,3125,4.439,3126,3.983,3127,5.428,3128,3.983,3129,4.451,3130,5.181,3131,3.983,3132,4.439,3133,5.665,3134,4.439,3135,4.439,3136,4.439,3137,4.439,3138,4.439,3139,3.458,3140,4.439,3141,4.439,3142,4.439,3143,4.439,3144,4.439,3145,4.439,3146,4.439]],["title/controllers/PullRequestDescriptionController.html",[524,1.142,3147,3.9]],["body/controllers/PullRequestDescriptionController.html",[3,0.056,4,0.056,5,0.05,10,0.239,14,0.322,15,0.005,16,0.095,19,0.817,54,0.062,55,0.211,63,1.457,66,1.146,67,1.778,101,1.615,108,1.679,202,3.61,203,3.299,206,4.548,242,0.004,243,0.004,290,1.595,294,0.296,296,1.205,297,0.66,298,0.584,300,1.252,386,4.311,392,3.107,511,0.69,519,0.897,522,1.345,524,1.42,526,1.702,528,2.297,540,2.795,567,3.221,572,4.208,599,3.078,600,2.726,601,3.541,602,4.205,605,2.975,606,2.297,626,2.536,632,2.227,634,2.778,635,2.334,755,4.205,756,3.472,759,1.978,760,4.681,761,4.105,762,2.832,763,2.949,771,2.261,775,2.297,862,3.349,865,4.052,866,7.162,871,5.858,873,4.986,879,4.597,880,4.597,882,4.848,902,5.592,2554,7.377,3147,6.179,3148,5.584,3149,6.224,3150,6.224,3151,6.224,3152,6.224,3153,5.584,3154,6.155,3155,5.584,3156,6.224,3157,6.224]],["title/injectables/PullRequestDescriptionService.html",[17,0.865,3154,3.53]],["body/injectables/PullRequestDescriptionService.html",[3,0.051,4,0.051,5,0.045,10,0.216,13,0.909,14,0.338,15,0.005,16,0.083,17,1.284,19,0.739,54,0.056,55,0.191,57,1.519,60,2.187,63,1.739,66,1.368,67,1.694,69,1.207,137,3.059,202,3.382,206,3.227,242,0.003,243,0.003,290,1.495,294,0.396,296,1.611,297,0.883,298,0.781,300,1.495,386,4.809,392,3.091,420,2.111,421,3.059,497,3.968,514,2.724,522,1.226,651,3.322,669,3.322,751,3.538,759,2.362,763,2.667,771,2.045,782,1.789,784,5.239,785,3.968,786,5.418,790,5.489,791,5.76,792,6.485,794,5.062,795,3.806,796,3.968,797,3.968,798,3.664,799,4.157,800,2.512,801,3.968,802,4.157,803,4.157,804,4.157,805,4.157,806,4.669,807,3.806,811,3.968,812,4.838,816,5.239,817,3.968,818,4.157,820,4.669,821,3.968,822,5.222,823,3.968,824,3.968,825,3.968,851,5.789,862,3.736,891,3.806,894,4.669,910,6.668,912,6.668,919,3.664,2554,6.535,2557,5.05,2915,5.05,2917,5.05,3153,5.05,3154,5.239,3158,5.05,3159,5.629,3160,5.629,3161,5.629,3162,5.629,3163,5.629,3164,5.629,3165,5.629,3166,5.629,3167,5.629,3168,5.629,3169,5.629,3170,5.629]],["title/injectables/PullRequestInsightsService.html",[17,0.865,3129,3.53]],["body/injectables/PullRequestInsightsService.html",[3,0.037,4,0.037,5,0.033,10,0.157,13,0.989,14,0.381,15,0.005,16,0.091,17,1.031,18,2.771,19,0.539,20,2.353,21,4.348,22,0.936,23,1.617,24,1.184,54,0.041,55,0.139,57,1.61,59,1.217,60,1.848,62,3.26,63,2.067,66,1.422,67,1.215,69,1.128,71,1.305,72,2.817,73,3.023,84,3.313,101,1.065,105,3.662,108,1.107,112,4.408,114,4.207,116,4.958,123,2.136,124,5.957,125,3.202,137,4.801,143,1.764,144,2.679,157,4.755,194,2.274,208,1.644,209,3.031,242,0.003,243,0.003,290,1.2,294,0.42,296,1.658,297,0.87,298,0.77,300,1.721,306,5.065,307,2.29,386,4.919,392,3.019,407,4.035,408,3.031,775,1.515,782,1.305,840,2.672,854,1.769,862,3.821,971,1.137,979,3.477,1060,3.093,1079,2.175,1119,2.775,1158,2.672,1191,2.716,1379,2.497,1796,6.322,1798,3.682,2518,6.034,2520,2.58,2985,3.031,3126,3.682,3127,3.031,3129,4.207,3139,4.649,3171,3.682,3172,5.968,3173,5.968,3174,7.721,3175,5.968,3176,5.968,3177,4.104,3178,5.553,3179,4.104,3180,5.968,3181,4.104,3182,4.104,3183,4.104,3184,5.968,3185,4.104,3186,4.104,3187,4.104,3188,4.104,3189,4.104,3190,4.104,3191,4.649,3192,2.893,3193,3.031,3194,2.893,3195,3.197,3196,4.104,3197,4.104,3198,5.354,3199,5.354,3200,5.354,3201,5.354,3202,5.354,3203,4.104,3204,3.682,3205,4.104,3206,3.682,3207,4.95,3208,5.834,3209,5.968,3210,5.354,3211,3.682,3212,3.682,3213,5.834,3214,3.682,3215,5.968,3216,4.104,3217,4.104,3218,4.104,3219,4.104,3220,5.354,3221,4.104,3222,4.104,3223,4.95,3224,4.104,3225,5.968,3226,4.104,3227,4.104,3228,4.104,3229,4.104,3230,4.104,3231,4.104,3232,3.682,3233,3.682,3234,3.682,3235,4.104]],["title/modules/PullRequestModule.html",[244,1.282,277,3.386]],["body/modules/PullRequestModule.html",[3,0.047,4,0.047,5,0.042,15,0.005,16,0.104,19,0.676,24,1.486,54,0.052,55,0.175,59,1.527,202,4.192,242,0.003,243,0.003,244,1.794,246,1.932,247,2.759,252,2.759,253,1.996,254,1.964,257,2.905,258,3.011,275,5.996,277,7.063,289,2.905,304,2.392,386,2.8,388,3.041,390,3.354,391,4.736,392,3.013,393,4.013,407,4.736,408,3.805,420,1.932,421,2.8,422,4.013,514,4.457,526,1.915,861,6.198,862,2.175,877,6.493,878,4.623,895,6.198,896,5.173,905,6.493,906,5.81,924,6.198,930,3.632,932,6.493,1168,6.285,1169,3.805,1219,4.623,2753,3.484,3105,6.198,3127,5.877,3129,6.493,3130,7.049,3131,4.623,3147,6.198,3154,6.493,3155,4.623,3192,3.632,3236,4.623,3237,4.623,3238,4.623,3239,4.623,3240,6.493,3241,5.152,3242,4.623,3243,5.152,3244,5.152,3245,5.152,3246,5.152,3247,5.152]],["title/classes/PullRequestPageOptionsDto.html",[55,0.17,3124,3.698]],["body/classes/PullRequestPageOptionsDto.html",[3,0.036,4,0.036,5,0.032,10,0.152,11,0.871,13,0.883,14,0.41,15,0.005,16,0.076,31,3.073,54,0.069,55,0.197,69,1.272,80,5.084,84,2.178,93,2.544,104,2.235,105,3.386,123,2.402,125,2.409,141,1.836,143,3.262,194,2.891,242,0.003,243,0.003,294,0.458,298,0.961,392,2.99,420,2.845,503,2.805,507,1.013,511,1.067,515,1.895,519,0.57,520,3.273,521,1.222,642,2.214,643,2.497,728,1.882,741,2.149,800,1.765,854,1.172,862,3.859,917,1.874,970,1.352,971,1.609,1022,2.016,1027,3.221,1035,4.392,1055,2.149,1056,4.481,1057,3.241,1058,3.241,1060,3.385,1062,4.123,1063,4.746,1067,2,1068,3.006,1069,2,1070,2.149,1071,2.334,1072,3.481,1073,2.047,1074,2.206,1075,2.268,1076,2.047,1077,2.268,1078,2.697,1079,2.096,1080,2.206,1081,2.206,1082,3.157,1083,2.268,1084,2.149,1085,2.268,1086,4.244,1087,2.406,1088,4.08,1089,4.769,1170,5.951,1363,2.406,1681,3.651,1694,2.574,1825,4.818,1833,4.818,1918,4.818,2027,4.481,2172,4.327,2187,2.921,2496,5.348,2520,4.327,2521,4.655,2522,5.311,2523,2.921,2525,3.081,2527,2.788,2528,3.081,2530,2.674,2531,2.921,3104,3.548,3124,4.29,3248,3.955,3249,3.955,3250,3.955,3251,3.955,3252,7.835,3253,6.884,3254,3.955,3255,3.548,3256,3.955,3257,3.955,3258,7.58,3259,3.955,3260,3.955,3261,3.955,3262,3.955,3263,3.955]],["title/injectables/PullRequestReviewService.html",[17,0.865,3130,3.53]],["body/injectables/PullRequestReviewService.html",[3,0.061,4,0.061,5,0.054,10,0.259,13,0.989,14,0.339,15,0.005,16,0.095,17,1.441,19,0.884,20,2.883,22,1.537,23,2.654,24,1.944,54,0.068,55,0.228,57,2.25,59,1.997,60,1.771,66,1.241,67,1.844,71,2.65,242,0.004,243,0.004,290,1.677,294,0.397,296,1.615,297,0.884,298,0.782,300,1.355,386,4.921,391,4.556,392,3.095,393,5.248,646,1.48,782,2.142,862,3.822,1933,6.045,3127,4.976,3130,5.877,3264,6.045,3265,8.337,3266,6.738,3267,6.738,3268,8.337,3269,8.337,3270,6.738,3271,8.337,3272,6.738,3273,6.738]],["title/injectables/PullRequestService.html",[17,0.865,1168,3.148]],["body/injectables/PullRequestService.html",[3,0.024,4,0.024,5,0.022,10,0.103,13,0.791,14,0.348,15,0.005,16,0.092,17,0.748,19,0.354,20,1.889,22,0.615,23,1.062,24,0.778,25,0.895,26,0.964,31,2.767,54,0.027,55,0.091,57,1.167,59,0.799,60,1.784,62,2.617,63,2.389,64,2.008,66,1.334,67,1.918,69,1.093,71,2.72,72,3.678,73,2.329,84,2.324,85,4.266,93,1.181,100,1.606,101,1.608,102,3.049,104,2.396,105,4.415,106,5.621,108,1.955,112,3.194,114,3.049,116,3.049,123,1.352,124,5.143,125,3.385,143,2.329,144,1.88,157,5.519,160,5.142,161,4,194,1.648,208,2.902,209,5.35,230,4.219,231,6.313,232,1.991,242,0.002,243,0.002,290,0.87,294,0.421,296,1.657,297,0.908,298,0.803,300,1.753,306,4.364,307,1.504,386,4.878,388,1.591,390,1.755,392,2.028,570,1.755,643,1.159,760,1.591,782,0.857,854,1.606,862,3.789,970,1.479,971,1.718,1023,4.235,1026,4.246,1027,0.922,1037,2.1,1044,1.755,1050,1.465,1060,1.08,1072,1.363,1073,2.238,1094,2.925,1098,1.823,1101,2.236,1102,2.1,1112,3.588,1113,3.588,1114,1.9,1115,1.695,1116,3.296,1154,5.843,1158,2.816,1161,3.818,1168,2.719,1171,2.236,1186,5.35,1191,1.968,1204,2.419,1379,1.64,1796,4.578,2493,1.9,2520,5.264,2522,1.695,2530,1.823,3124,4,3127,1.991,3128,5.561,3139,3.369,3178,3.896,3191,5.643,3192,1.9,3193,1.991,3194,1.9,3195,2.1,3198,3.881,3199,3.881,3200,3.881,3201,3.881,3202,3.881,3204,2.419,3206,2.419,3207,3.588,3208,3.588,3210,2.419,3211,2.419,3212,2.419,3213,4.493,3214,2.419,3223,5.142,3274,2.419,3275,4.325,3276,5.416,3277,4.325,3278,4.325,3279,4.325,3280,3.881,3281,5.416,3282,4.325,3283,4.325,3284,6.198,3285,2.696,3286,4.86,3287,2.696,3288,4.325,3289,2.696,3290,2.696,3291,4.325,3292,2.696,3293,2.696,3294,2.696,3295,2.696,3296,2.696,3297,2.696,3298,2.696,3299,2.696,3300,2.696,3301,2.419,3302,2.696,3303,2.696,3304,2.696,3305,2.696,3306,4.325,3307,5.416,3308,2.696,3309,2.696,3310,4.325,3311,2.696,3312,2.696,3313,2.696,3314,2.696,3315,2.696,3316,2.696,3317,6.313,3318,7.244,3319,2.696,3320,2.696,3321,3.588,3322,2.696,3323,2.696,3324,2.696,3325,2.696,3326,3.881,3327,3.881,3328,4.325,3329,4.325,3330,6.198,3331,6.198,3332,2.696,3333,2.696,3334,2.696,3335,2.236,3336,2.696,3337,6.198,3338,2.696,3339,6.198,3340,2.696,3341,2.696,3342,2.696,3343,5.416,3344,5.416,3345,6.198,3346,2.696,3347,4.325,3348,4.325,3349,4.325,3350,4.325,3351,2.696]],["title/controllers/RepoContributionsController.html",[524,1.142,1015,3.9]],["body/controllers/RepoContributionsController.html",[3,0.047,4,0.047,5,0.042,10,0.198,13,0.871,14,0.375,15,0.005,16,0.096,19,0.678,25,1.715,26,1.848,54,0.052,55,0.175,60,1.358,63,1.642,66,1.292,67,1.878,69,1.177,71,2.717,89,1.685,101,1.821,104,2.3,200,5.565,208,2.07,242,0.003,243,0.003,290,1.411,294,0.334,296,1.359,297,0.845,298,0.658,300,1.411,337,5.188,503,1.894,511,0.778,519,0.745,522,0.972,524,1.179,526,1.413,528,1.907,540,3.012,603,3.7,604,3.192,605,2.988,606,1.907,632,2.511,635,2.632,646,2.025,728,2.769,771,1.877,971,1.432,979,3.47,1013,5.618,1015,5.466,1016,4.286,1017,4.636,1027,1.766,1053,6.965,1103,4.636,1163,3.364,1164,2.306,1165,2.399,1166,2.306,1167,2.399,1590,4.286,2297,5.78,2300,4.124,2343,3.915,2357,5.373,2372,2.448,2396,3.642,2397,3.494,2639,5.183,2667,3.915,2668,3.72,2684,3.144,3001,4.025,3352,7.15,3353,4.636,3354,8.938,3355,8.938,3356,5.167,3357,5.167,3358,8.548,3359,7.018,3360,7.018,3361,5.167,3362,5.167,3363,5.167,3364,5.167,3365,4.331,3366,3.364,3367,3.642,3368,3.642,3369,5.167,3370,7.018,3371,3.642,3372,7.018,3373,7.018,3374,5.167,3375,3.642]],["title/controllers/RepoController.html",[524,1.142,3376,3.9]],["body/controllers/RepoController.html",[3,0.043,4,0.043,5,0.039,10,0.184,13,0.838,14,0.394,15,0.005,16,0.095,19,0.63,20,2.525,25,1.593,26,1.718,54,0.048,55,0.163,66,1.526,67,2.013,69,1.151,71,2.997,89,1.602,104,2.068,208,3.489,242,0.003,243,0.003,290,1.342,294,0.394,296,1.605,297,0.924,298,0.778,300,1.667,333,4.127,503,1.295,511,0.919,519,0.692,522,0.924,524,1.095,526,1.313,528,1.772,540,3.322,603,3.56,604,3.489,605,3.266,606,1.772,632,1.718,635,3.108,646,1.913,728,2.618,771,1.744,971,1.849,1027,1.641,1094,5.603,1098,3.246,1155,3.74,1157,4.928,1158,4.343,1159,4.752,1163,2.027,1164,2.143,1165,2.229,1166,2.143,1167,2.229,1174,3.74,2300,3.968,2343,5.26,2357,5.209,2369,3.546,2372,2.275,2397,3.246,2428,5.042,2446,2.921,2537,3.384,2652,3.982,2667,3.722,2668,3.537,2676,3.982,2733,3.74,2756,3.74,2859,3.74,3001,3.74,3365,4.168,3367,3.384,3368,3.384,3371,3.384,3375,3.384,3376,5.197,3377,4.307,3378,8.287,3379,7.435,3380,5.042,3381,4.703,3382,4.801,3383,4.801,3384,6.121,3385,4.801,3386,5.986,3387,4.801,3388,4.307,3389,4.801,3390,4.801,3391,4.801,3392,3.982,3393,5.986,3394,4.801,3395,4.801,3396,4.801,3397,4.511,3398,4.801,3399,3.384,3400,4.801,3401,4.801]],["title/modules/RepoFilterModule.html",[244,1.282,3240,3.53]],["body/modules/RepoFilterModule.html",[3,0.067,4,0.067,5,0.059,15,0.005,16,0.088,19,0.966,54,0.074,55,0.249,242,0.004,243,0.004,244,2.253,246,2.76,247,3.465,252,3.465,253,2.851,254,2.805,257,3.648,258,3.782,728,2.012,3178,6.605,3193,5.435,3240,7.208,3402,6.603,3403,6.603,3404,6.603,3405,6.104,3406,7.359]],["title/injectables/RepoFilterService.html",[17,0.865,3178,3.148]],["body/injectables/RepoFilterService.html",[3,0.046,4,0.046,5,0.041,10,0.302,13,0.756,14,0.32,15,0.005,16,0.085,17,1.195,19,0.664,21,4.491,22,1.154,54,0.051,55,0.171,63,1.184,66,0.931,69,1.133,72,2.771,82,2.636,84,2.956,85,3.179,93,2.215,105,3.96,107,2.594,123,1.726,124,2.985,125,2.098,137,3.759,157,5.329,161,5.108,208,2.026,242,0.003,243,0.003,290,1.391,294,0.329,296,1.526,297,0.734,298,0.649,300,1.391,301,3.565,541,7.602,728,2.155,782,1.608,857,4.284,873,4.347,902,5.973,971,1.916,1060,2.771,1069,3.985,1119,3.42,1157,5.108,1158,6.377,1163,2.92,1540,2.9,1679,4.195,1817,4.538,1855,3.292,2372,4.34,2518,5.973,2520,4.347,2521,3.42,2522,3.179,2530,3.42,2985,3.736,3178,4.347,3191,5.387,3220,6.205,3233,4.538,3234,4.538,3405,6.538,3407,4.538,3408,6.916,3409,6.916,3410,6.916,3411,5.058,3412,6.916,3413,5.058,3414,6.916,3415,4.195,3416,6.538,3417,5.058,3418,5.058,3419,5.058,3420,5.058,3421,5.058,3422,5.058,3423,7.882,3424,5.058,3425,5.058,3426,5.058,3427,6.205,3428,6.916,3429,5.058,3430,5.058,3431,6.916,3432,5.058,3433,5.058,3434,5.058,3435,5.058,3436,4.538,3437,4.538,3438,5.058,3439,5.058]],["title/classes/RepoInfo.html",[55,0.17,1323,3.26]],["body/classes/RepoInfo.html",[3,0.062,4,0.062,5,0.056,10,0.264,11,1.267,13,0.923,14,0.405,15,0.005,16,0.085,54,0.069,55,0.286,69,1.217,89,2.028,242,0.004,243,0.004,294,0.402,297,0.896,420,3.167,507,1.762,511,0.936,512,3.272,515,2.016,518,3.427,519,0.992,520,3.272,521,2.126,522,1.17,646,2.149,728,2.606,731,6.172,741,3.739,1278,5.498,1323,5.498,1379,5.139,1713,8.199,3440,6.749,3441,6.172,3442,6.88,3443,6.88,3444,6.88,3445,6.88]],["title/modules/RepoModule.html",[244,1.282,278,2.955]],["body/modules/RepoModule.html",[3,0.062,4,0.062,5,0.055,15,0.005,16,0.1,19,0.9,24,1.977,54,0.069,55,0.232,59,2.032,242,0.004,243,0.004,244,2.158,246,2.57,247,3.319,252,3.319,253,2.655,254,2.612,257,3.494,258,3.622,278,6.052,289,3.494,304,3.182,333,3.059,526,2.304,1019,4.831,2859,5.338,3192,4.831,3240,7.012,3242,6.149,3365,5.662,3376,7.106,3392,5.685,3446,6.149,3447,6.149,3448,6.853,3449,6.149,3450,6.853,3451,6.853]],["title/classes/RepoPageOptionsDto.html",[55,0.17,3380,3.047]],["body/classes/RepoPageOptionsDto.html",[3,0.046,4,0.046,5,0.041,10,0.193,11,1.033,13,0.967,14,0.398,15,0.005,16,0.079,37,2.884,54,0.079,55,0.233,84,2.584,93,3.017,94,2.603,96,2.806,104,2.379,105,3.773,123,2.502,125,2.857,141,2.335,143,3.634,194,3.221,208,2.015,242,0.003,243,0.003,294,0.435,297,0.731,298,0.934,503,2.706,507,1.288,511,1.014,519,0.725,521,1.554,642,2.626,643,2.962,800,2.245,854,1.491,917,2.383,970,1.719,971,1.394,1022,2.391,1027,2.89,1032,3.274,1035,4.813,1055,2.734,1056,5.116,1057,3.844,1058,3.844,1060,3.663,1062,3.745,1063,4.271,1064,6.915,1067,2.543,1068,3.565,1069,2.543,1070,2.734,1071,2.968,1072,3.974,1073,2.603,1074,2.806,1075,2.884,1076,2.603,1077,2.884,1078,3.199,1079,2.666,1080,2.806,1081,2.806,1082,3.745,1083,2.884,1084,2.734,1085,2.884,1086,3.199,1087,3.06,1088,3.075,1089,4.638,1189,5.367,1632,4.857,1855,3.274,2512,3.274,2817,4.172,2818,4.172,2819,4.172,2820,4.172,2821,4.172,3380,4.192,3440,5.088,3452,6.519,3453,4.512,3454,5.029,3455,4.512,3456,5.367,3457,6.182,3458,6.182,3459,5.715,3460,5.715,3461,5.715,3462,5.715,3463,5.715,3464,5.029]],["title/classes/RepoSearchOptionsDto.html",[55,0.17,3384,3.698]],["body/classes/RepoSearchOptionsDto.html",[3,0.044,4,0.044,5,0.039,10,0.185,11,1.003,13,0.952,14,0.41,15,0.005,16,0.083,54,0.048,55,0.226,69,1.205,84,2.507,93,2.928,104,2.175,105,3.703,123,2.501,125,2.772,141,2.235,143,3.567,194,3.162,242,0.003,243,0.003,294,0.462,298,0.965,503,2.802,507,1.233,511,1.075,519,0.694,520,3.214,521,1.488,728,2.269,800,2.149,854,1.427,917,2.281,971,1.852,1022,2.32,1027,2.625,1035,4.903,1055,2.616,1056,4.351,1057,3.729,1058,3.729,1060,3.614,1062,4.174,1063,4.509,1064,5.672,1067,2.434,1068,3.459,1069,2.434,1070,2.616,1071,2.841,1072,3.883,1073,2.491,1074,2.685,1075,2.76,1076,2.491,1077,2.76,1078,3.103,1079,2.552,1080,2.685,1081,2.685,1082,3.633,1083,2.76,1084,2.616,1085,2.76,1086,4.047,1087,2.929,1088,3.891,1089,2.841,1306,3.993,2172,4.827,2496,3.393,2520,4.827,2521,5.192,2522,5.671,2523,3.555,2524,3.993,2527,4.712,2530,3.255,2531,3.555,2537,6.145,3255,4.319,3380,5.048,3384,4.937,3440,6.438,3452,3.993,3453,4.319,3465,4.814,3466,4.814,3467,4.814]],["title/injectables/RepoService.html",[17,0.865,3365,2.721]],["body/injectables/RepoService.html",[3,0.024,4,0.024,5,0.021,10,0.1,13,0.944,14,0.344,15,0.005,16,0.089,17,0.728,18,2.459,19,0.342,20,1.853,21,3.537,22,0.595,23,1.027,24,0.752,25,0.866,26,0.933,54,0.026,55,0.088,57,1.136,59,0.773,60,2.054,62,2.567,63,2.269,64,1.955,66,1.439,67,1.875,69,1.219,71,2.565,72,3.46,73,2.277,75,1.236,78,1.455,81,1.838,82,1.605,84,1.579,85,2.647,100,1.248,101,1.731,104,2.155,105,4.364,106,3.11,107,1.986,108,1.926,112,1.926,114,1.838,116,2.969,123,1.517,124,5.899,125,3.851,143,2.614,157,4.111,161,5.961,194,2.978,200,2.741,211,2.163,213,0.505,215,4.394,219,1.763,230,2.031,242,0.002,243,0.002,290,0.847,294,0.403,296,1.641,297,0.916,298,0.778,300,1.667,306,4.305,307,1.455,333,1.164,337,2.741,339,1.587,341,1.698,343,1.698,345,1.698,420,0.978,482,4.394,549,2.843,590,1.838,646,1.466,728,1.825,759,0.829,775,1.554,782,0.829,854,2.393,970,1.44,971,1.685,979,3.529,980,2.038,1023,3.797,1026,3.392,1027,0.891,1050,1.417,1060,2.122,1064,1.926,1072,1.319,1073,2.179,1094,3.581,1098,1.763,1100,2.847,1101,2.163,1102,2.031,1106,3.778,1107,3.778,1109,2.34,1110,2.34,1112,3.493,1113,3.493,1114,1.838,1115,2.647,1116,2.562,1119,1.763,1158,1.698,1243,1.163,1293,1.262,1623,2.34,1721,0.994,1796,5.772,1967,2.34,1982,2.34,2000,2.34,2015,2.34,2357,1.639,2384,2.163,2428,2.562,2446,1.587,2521,1.763,2522,1.639,2530,1.763,2537,1.838,2848,3.493,2985,1.926,3139,6.087,3178,3.822,3191,3.28,3192,1.838,3193,1.926,3194,1.838,3195,2.031,3207,6.482,3208,6.482,3213,2.163,3223,3.493,3280,3.778,3286,4.752,3301,3.778,3317,3.493,3321,3.493,3326,2.34,3327,2.34,3335,2.163,3365,2.289,3379,3.778,3380,3.7,3384,4.491,3388,3.778,3392,2.163,3393,3.778,3436,3.778,3452,2.163,3456,4.126,3459,2.163,3460,2.163,3461,2.163,3462,2.163,3463,2.163,3468,2.34,3469,4.211,3470,4.211,3471,4.211,3472,4.211,3473,5.297,3474,2.608,3475,2.608,3476,4.211,3477,4.211,3478,2.608,3479,2.608,3480,5.297,3481,2.608,3482,2.608,3483,2.608,3484,2.608,3485,4.211,3486,2.608,3487,4.211,3488,2.608,3489,2.608,3490,2.608,3491,2.608,3492,5.297,3493,2.608,3494,2.608,3495,4.211,3496,2.608,3497,4.211,3498,2.608,3499,2.608,3500,2.608,3501,2.608,3502,2.608,3503,4.211,3504,2.608,3505,2.608,3506,2.608,3507,2.608,3508,2.608,3509,2.608,3510,6.673,3511,6.673,3512,2.34,3513,2.34,3514,2.34,3515,2.608,3516,2.608,3517,2.608,3518,2.608,3519,2.608,3520,2.608,3521,2.608,3522,2.608,3523,2.608,3524,2.608,3525,4.211,3526,4.211,3527,4.211,3528,4.211,3529,4.211,3530,4.211,3531,4.211,3532,2.608,3533,2.608,3534,2.608,3535,2.608,3536,2.608,3537,2.608,3538,2.608,3539,2.608,3540,2.608,3541,2.608,3542,2.608,3543,2.608,3544,2.608,3545,2.608,3546,2.34,3547,5.297,3548,2.608,3549,2.608,3550,2.608,3551,4.211,3552,2.608,3553,2.608,3554,4.211,3555,2.608,3556,2.608,3557,2.34,3558,2.608,3559,2.608,3560,2.608,3561,2.608,3562,2.163,3563,2.608,3564,2.608,3565,4.211,3566,2.608,3567,2.34,3568,2.608,3569,2.608,3570,2.608]],["title/controllers/RepoStarController.html",[524,1.142,3571,3.9]],["body/controllers/RepoStarController.html",[3,0.031,4,0.031,5,0.028,10,0.133,13,1.084,14,0.397,15,0.005,16,0.092,19,0.455,25,1.152,26,1.241,54,0.035,55,0.118,60,0.912,63,1.664,66,1.408,67,1.947,69,1.184,71,2.86,89,1.707,101,1.844,104,1.314,208,2.551,213,1.02,242,0.002,243,0.002,290,1.059,294,0.364,296,1.48,297,0.887,298,0.717,300,1.887,333,2.842,334,1.839,341,4.976,342,2.703,503,1.421,511,0.847,519,0.5,522,1.284,524,0.792,526,0.949,528,1.281,540,3.17,542,2.792,549,3.558,600,1.52,601,3.592,603,3.549,604,3.224,605,3.018,606,1.281,626,1.414,632,1.884,634,3.412,635,2.867,646,2.037,728,2.833,762,1.579,771,1.261,971,0.961,979,3.516,1027,1.186,1159,3.02,1163,2.224,1164,1.549,1165,1.611,1166,1.549,1167,1.611,1325,2.346,1969,8.323,2300,3.679,2343,5.02,2357,5.416,2372,1.644,2373,1.936,2396,3.713,2397,3.562,2667,3.552,2668,3.375,2669,1.839,2742,5.012,3365,3.461,3366,2.259,3367,2.446,3368,2.446,3371,3.713,3375,3.713,3380,4.326,3381,2.446,3397,2.346,3399,2.446,3456,2.703,3571,4.103,3572,7.221,3573,3.113,3574,7.11,3575,7.644,3576,7.644,3577,7.11,3578,7.644,3579,3.469,3580,3.469,3581,5.898,3582,7.11,3583,7.11,3584,5.251,3585,4.94,3586,5.012,3587,3.469,3588,3.469,3589,3.469,3590,3.469,3591,3.469,3592,3.469,3593,3.469,3594,7.221,3595,3.469,3596,3.469,3597,3.469,3598,4.628,3599,2.703,3600,3.469,3601,3.469,3602,3.469,3603,3.469,3604,2.562,3605,5.169,3606,4.489,3607,3.113,3608,2.703,3609,3.469,3610,3.469,3611,3.469,3612,5.267,3613,3.469,3614,3.469,3615,3.469,3616,5.267,3617,3.469]],["title/controllers/RepoStargazeController.html",[524,1.142,3618,3.9]],["body/controllers/RepoStargazeController.html",[3,0.032,4,0.032,5,0.028,10,0.134,13,1.085,14,0.397,15,0.005,16,0.092,19,0.459,25,1.161,26,1.251,54,0.035,55,0.118,60,0.919,63,1.671,66,1.412,67,1.95,69,1.186,71,2.866,89,1.714,101,1.852,104,1.322,208,2.563,213,1.026,242,0.002,243,0.002,290,1.066,294,0.365,296,1.486,297,0.889,298,0.72,300,1.89,333,2.856,334,1.853,345,4.993,346,2.724,503,1.43,511,0.85,519,0.504,522,1.287,524,0.798,526,0.956,528,1.291,540,3.176,542,2.809,549,3.561,600,1.531,601,3.603,603,3.561,604,3.234,605,3.027,606,1.291,626,1.425,632,1.896,634,3.424,635,2.877,646,2.04,728,2.845,762,1.591,771,1.27,971,0.969,979,3.53,1027,1.195,1159,3.038,1163,2.237,1164,1.561,1165,1.623,1166,1.561,1167,1.623,1325,2.364,1952,5.74,2230,5.69,2271,6.691,2300,3.694,2343,5.03,2357,5.429,2372,1.657,2373,1.951,2396,3.735,2397,3.583,2667,3.569,2668,3.391,2669,1.853,2684,3.224,3365,3.477,3366,2.276,3367,2.465,3368,2.465,3371,3.735,3375,3.735,3380,4.343,3381,2.465,3397,2.364,3399,2.465,3514,3.137,3584,5.272,3585,4.952,3599,4.127,3604,2.582,3605,5.186,3608,2.724,3618,4.127,3619,7.242,3620,3.137,3621,7.671,3622,7.671,3623,7.671,3624,7.671,3625,7.671,3626,3.497,3627,3.497,3628,5.299,3629,7.138,3630,6.404,3631,3.497,3632,3.497,3633,3.497,3634,3.497,3635,3.497,3636,3.497,3637,3.497,3638,3.497,3639,3.497,3640,5.299,3641,3.497,3642,3.497,3643,3.497,3644,3.497,3645,4.51,3646,3.137,3647,3.497,3648,3.497,3649,4.127,3650,5.299,3651,3.497,3652,3.497,3653,4.754,3654,5.299,3655,3.497]],["title/controllers/RepoSubmitController.html",[524,1.142,3656,3.9]],["body/controllers/RepoSubmitController.html",[3,0.031,4,0.031,5,0.028,10,0.133,13,1.083,14,0.397,15,0.005,16,0.092,19,0.454,25,1.147,26,1.236,54,0.035,55,0.117,60,0.908,63,1.661,66,1.405,67,1.946,69,1.183,71,2.857,89,1.704,101,1.841,104,1.311,208,2.545,213,1.017,242,0.002,243,0.002,290,1.056,294,0.363,296,1.478,297,0.886,298,0.716,300,1.885,333,2.835,334,1.832,343,4.968,344,2.692,503,1.417,511,0.846,519,0.498,522,1.283,524,0.789,526,0.945,528,1.276,540,3.167,542,2.784,549,3.556,600,1.514,601,3.587,603,3.543,604,3.219,605,3.014,606,1.276,626,1.408,632,1.879,634,3.406,635,2.862,646,2.035,728,2.832,762,1.573,771,1.256,971,0.958,979,3.509,1027,1.182,1159,3.011,1163,2.217,1164,1.543,1165,1.605,1166,1.543,1167,1.605,1325,2.337,1985,8.966,2300,3.672,2343,5.015,2357,5.41,2372,1.638,2373,1.928,2396,3.702,2397,3.551,2667,3.544,2668,3.367,2669,1.832,2684,3.196,2742,5.002,3365,3.453,3366,2.25,3367,2.436,3368,2.436,3371,3.702,3375,3.702,3380,4.317,3381,2.436,3397,2.337,3399,2.436,3513,3.101,3581,5.886,3584,5.241,3585,4.935,3586,5.002,3598,4.619,3599,2.692,3604,2.553,3605,5.16,3608,2.692,3656,4.091,3657,7.21,3658,3.101,3659,7.631,3660,7.631,3661,7.631,3662,7.631,3663,7.631,3664,3.456,3665,3.456,3666,7.096,3667,7.096,3668,3.456,3669,3.456,3670,3.456,3671,3.456,3672,3.456,3673,3.456,3674,3.456,3675,8.036,3676,3.456,3677,3.456,3678,3.456,3679,3.456,3680,3.456,3681,3.456,3682,3.456,3683,4.478,3684,3.101,3685,3.101,3686,3.456,3687,3.456,3688,5.252,3689,3.456,3690,3.456,3691,5.252,3692,3.456]],["title/controllers/RepoVoteController.html",[524,1.142,3693,3.9]],["body/controllers/RepoVoteController.html",[3,0.029,4,0.029,5,0.026,10,0.122,13,1.095,14,0.4,15,0.005,16,0.091,19,0.417,25,1.054,26,1.136,54,0.032,55,0.108,60,0.835,63,1.588,66,1.431,67,1.961,69,1.16,70,4.884,71,2.793,89,1.865,101,1.761,104,1.228,208,2.414,213,1.57,242,0.002,243,0.002,290,0.99,294,0.37,296,1.505,297,0.912,298,0.729,300,1.936,333,2.689,334,1.683,339,4.469,340,2.238,503,1.328,511,0.861,519,0.458,522,1.29,524,0.724,526,0.868,528,1.172,540,3.2,542,4.118,549,3.571,600,1.391,601,3.617,603,3.41,604,3.247,605,3.039,606,1.172,626,1.294,632,1.76,634,3.468,635,2.914,646,1.995,728,2.821,759,1.009,762,1.445,771,1.154,971,0.88,979,3.356,1027,1.085,1159,2.822,1163,2.078,1164,1.417,1165,1.474,1166,1.417,1167,1.474,1325,2.147,2002,8.231,2300,3.512,2343,5.068,2357,5.265,2372,1.504,2373,1.771,2396,3.469,2397,3.327,2667,3.786,2668,3.598,2669,1.683,2742,4.785,3365,3.275,3366,2.067,3367,2.238,3368,2.238,3371,3.469,3375,3.469,3380,4.13,3381,2.238,3397,2.147,3399,2.238,3512,2.849,3581,5.63,3584,5.013,3585,4.802,3586,4.785,3598,4.418,3599,2.473,3604,2.345,3605,4.966,3608,2.473,3693,3.833,3694,7.271,3695,2.849,3696,6.787,3697,7.344,3698,7.344,3699,6.09,3700,6.787,3701,7.344,3702,3.175,3703,3.175,3704,6.787,3705,6.787,3706,3.175,3707,3.175,3708,3.175,3709,3.175,3710,3.175,3711,3.175,3712,3.175,3713,6.844,3714,3.175,3715,2.849,3716,3.175,3717,3.175,3718,4.45,3719,3.175,3720,3.175,3721,3.175,3722,3.175,3723,3.175,3724,3.175,3725,3.175,3726,3.175,3727,2.345,3728,3.175,3729,4.248,3730,2.849,3731,3.175,3732,3.175,3733,3.175,3734,3.175,3735,3.175,3736,3.175,3737,4.921,3738,3.175,3739,3.175,3740,3.175,3741,4.921,3742,3.175]],["title/modules/StarModule.html",[244,1.282,279,3.698]],["body/modules/StarModule.html",[3,0.061,4,0.061,5,0.055,15,0.005,16,0.101,19,0.889,24,1.955,54,0.068,55,0.23,59,2.009,242,0.004,243,0.004,244,2.142,246,2.541,247,3.295,252,3.295,253,2.625,254,2.582,257,3.47,258,3.597,278,5.854,279,7.56,289,3.47,304,3.146,331,4.581,333,3.024,334,3.592,341,5.446,342,5.278,526,2.288,728,1.853,1019,4.777,3571,7.07,3606,7.333,3607,6.079,3743,6.079,3744,6.079,3745,6.079,3746,6.776,3747,6.776,3748,6.776]],["title/injectables/StarService.html",[17,0.865,3606,3.53]],["body/injectables/StarService.html",[3,0.05,4,0.05,5,0.045,10,0.212,13,1.104,14,0.335,15,0.005,16,0.088,17,1.269,18,2.565,19,0.725,20,2.677,22,1.261,23,2.176,24,1.594,54,0.055,55,0.187,57,1.981,59,1.638,60,1.452,62,3.708,63,2.14,64,3.408,66,1.617,67,1.914,70,6.029,71,2.792,72,2.941,73,3.156,101,2.279,108,2.224,242,0.003,243,0.003,290,1.476,294,0.418,296,1.596,297,0.874,298,0.773,300,1.658,341,3.596,342,4.303,549,3.537,728,2.007,775,3.043,782,1.756,980,3.552,1293,2.673,1721,2.106,1969,4.583,3585,4.209,3586,3.895,3594,6.586,3606,5.175,3749,4.957,3750,7.34,3751,7.34,3752,5.525,3753,5.525,3754,7.34,3755,5.525,3756,7.34,3757,5.525,3758,7.34,3759,5.525,3760,3.473,3761,5.525,3762,5.525,3763,7.34,3764,7.34,3765,9.4,3766,7.34,3767,4.963,3768,5.525,3769,5.525,3770,4.08,3771,5.525]],["title/modules/StargazeModule.html",[244,1.282,280,3.698]],["body/modules/StargazeModule.html",[3,0.061,4,0.061,5,0.055,15,0.005,16,0.101,19,0.889,24,1.955,54,0.068,55,0.23,59,2.009,242,0.004,243,0.004,244,2.142,246,2.541,247,3.295,252,3.295,253,2.625,254,2.582,257,3.47,258,3.597,278,5.854,280,7.56,289,3.47,304,3.146,331,4.581,333,3.024,334,3.592,345,5.446,346,5.278,526,2.288,728,1.853,1019,4.777,3618,7.07,3645,7.333,3646,6.079,3772,6.079,3773,6.079,3774,6.776,3775,6.079,3776,6.776,3777,6.776]],["title/injectables/StargazeService.html",[17,0.865,3645,3.53]],["body/injectables/StargazeService.html",[3,0.05,4,0.05,5,0.044,10,0.211,13,1.103,14,0.334,15,0.005,16,0.088,17,1.263,18,2.549,19,0.721,20,2.67,22,1.253,23,2.163,24,1.584,54,0.055,55,0.186,57,1.973,59,1.628,60,1.443,62,3.699,63,2.136,64,3.394,66,1.613,67,1.911,70,6.02,71,2.785,72,3.51,73,3.143,101,2.273,108,2.218,242,0.003,243,0.003,290,1.47,294,0.417,296,1.592,297,0.872,298,0.771,300,1.653,345,3.574,346,4.277,549,3.534,728,2.247,775,3.033,782,1.745,980,3.537,1293,2.657,1721,2.093,2230,3.871,3585,4.192,3630,6.559,3645,5.154,3760,3.452,3767,4.943,3770,4.055,3778,4.927,3779,7.31,3780,7.31,3781,5.491,3782,5.491,3783,7.31,3784,5.491,3785,7.31,3786,5.491,3787,7.31,3788,5.491,3789,5.491,3790,5.491,3791,7.31,3792,7.31,3793,9.383,3794,7.31,3795,5.491,3796,5.491,3797,5.491]],["title/modules/StripeModule.html",[244,1.282,716,3.53]],["body/modules/StripeModule.html",[3,0.067,4,0.067,5,0.059,15,0.005,16,0.088,19,0.966,54,0.074,55,0.249,242,0.004,243,0.004,244,2.253,246,2.76,247,3.465,252,3.465,253,2.851,254,2.805,257,3.648,258,3.782,289,3.052,610,7.105,716,7.208,3798,6.603,3799,6.603,3800,6.603,3801,7.359,3802,7.359]],["title/injectables/StripeService.html",[17,0.865,610,3.386]],["body/injectables/StripeService.html",[3,0.053,4,0.053,5,0.047,10,0.225,11,1.144,13,0.927,14,0.365,15,0.005,16,0.085,17,1.319,19,0.769,54,0.059,55,0.198,57,1.581,60,2.23,63,1.371,66,1.562,67,1.946,69,1.22,101,1.52,108,1.581,194,2.233,242,0.004,243,0.004,290,1.534,294,0.444,296,1.643,297,0.9,298,0.874,300,1.534,306,5.478,307,3.268,377,6.579,438,2.43,549,2.064,554,5.256,583,5.304,610,5.158,646,1.676,687,6.328,759,2.425,771,2.129,782,1.862,1100,3.961,1450,6.845,1585,5.256,1608,2.666,2024,4.859,2026,4.859,2032,4.563,2044,5.256,2476,4.859,2492,5.634,3803,5.256,3804,8.484,3805,7.629,3806,7.629,3807,7.629,3808,5.858,3809,7.629,3810,5.858,3811,5.858,3812,5.858,3813,8.484,3814,5.858,3815,5.858,3816,5.858,3817,5.858,3818,5.858,3819,5.858,3820,5.858,3821,5.858,3822,5.256,3823,5.858,3824,5.858,3825,5.858,3826,5.256,3827,5.858,3828,5.858,3829,5.858,3830,5.858,3831,5.858,3832,5.858]],["title/modules/StripeSubscriptionModule.html",[244,1.282,281,3.53]],["body/modules/StripeSubscriptionModule.html",[3,0.065,4,0.065,5,0.058,15,0.005,16,0.097,19,0.939,24,2.064,54,0.072,55,0.242,59,2.121,242,0.004,243,0.004,244,2.215,246,2.683,247,3.407,252,3.407,253,2.771,254,2.726,257,3.587,258,3.718,281,7.167,289,2.967,304,3.321,377,4.837,380,5.572,382,5.043,383,5.934,2016,5.572,3833,6.418,3834,6.418,3835,6.418,3836,7.383,3837,7.154,3838,6.418,3839,7.154]],["title/injectables/StripeSubscriptionService.html",[17,0.865,3836,3.53]],["body/injectables/StripeSubscriptionService.html",[3,0.061,4,0.061,5,0.055,10,0.26,14,0.34,15,0.005,16,0.095,17,1.446,19,0.889,20,2.889,22,1.546,23,2.669,24,1.955,54,0.068,55,0.23,57,2.258,59,2.009,60,1.781,62,4.002,66,1.541,67,1.849,242,0.004,243,0.004,290,1.683,294,0.432,296,1.62,297,0.887,298,0.785,300,1.683,377,4.581,382,4.777,383,5.621,649,5.523,759,2.154,782,2.154,2016,7.384,2032,5.278,3836,5.898,3840,6.079,3841,8.367,3842,6.776,3843,6.776,3844,8.367,3845,6.776,3846,8.367,3847,6.776,3848,6.776,3849,6.776,3850,6.776]],["title/modules/StripeWebHookModule.html",[244,1.282,282,3.698]],["body/modules/StripeWebHookModule.html",[3,0.06,4,0.06,5,0.054,15,0.005,16,0.099,19,0.875,54,0.067,55,0.226,242,0.004,243,0.004,244,2.12,246,2.499,247,3.261,252,3.261,253,2.581,254,2.539,257,2.763,258,3.56,268,6.679,281,6.964,282,7.696,285,5.83,289,3.434,360,4.505,376,5.527,377,4.505,380,5.19,381,5.978,526,2.264,716,6.964,721,5.978,3851,5.978,3852,5.978,3853,6.663,3854,7.589,3855,5.19,3856,6.663,3857,6.663]],["title/controllers/StripeWebhookController.html",[524,1.142,3854,3.698]],["body/controllers/StripeWebhookController.html",[3,0.04,4,0.04,5,0.036,10,0.169,14,0.256,15,0.005,16,0.094,19,0.58,37,2.533,54,0.044,55,0.15,57,1.192,60,2.469,63,2.315,66,0.813,67,1.787,69,1.231,101,2.277,108,2.278,213,1.219,242,0.003,243,0.003,290,1.265,294,0.299,296,1.219,297,0.667,298,0.59,300,1.265,306,4.202,307,2.464,377,4.956,380,3.441,457,4.436,511,0.49,519,0.637,524,1.008,526,1.208,528,1.63,549,2.814,599,2.184,604,2.521,606,1.63,608,3.793,609,3.441,610,4.956,611,3.963,612,4.956,613,3.963,632,1.58,642,1.683,646,1.382,651,2.607,669,2.607,670,4.901,689,6.576,759,2,760,4.714,775,2.705,822,2.607,840,5.713,854,1.865,1067,2.234,1505,3.963,1681,2.776,1721,1.683,2018,3.963,2019,3.963,2020,3.963,2021,3.963,2022,3.963,2023,3.963,2024,3.664,2025,3.963,2026,3.664,2027,4.096,2028,3.963,2029,3.963,2032,6.836,3416,3.664,3836,5.167,3838,3.963,3854,4.647,3855,5.709,3858,6.08,3859,3.664,3860,6.292,3861,6.292,3862,4.417,3863,7.987,3864,4.417,3865,4.417,3866,6.08,3867,6.292,3868,4.417,3869,6.292,3870,3.664,3871,4.417,3872,3.664,3873,3.441,3874,5.645,3875,5.645,3876,5.645,3877,5.645,3878,4.417,3879,4.417,3880,4.417,3881,7.329,3882,4.417,3883,4.417,3884,4.417,3885,4.417,3886,4.417,3887,4.417,3888,4.417,3889,4.417,3890,7.329,3891,4.417,3892,6.292,3893,4.417,3894,4.417,3895,4.417,3896,4.417,3897,4.417,3898,4.417,3899,4.417,3900,4.417,3901,4.417,3902,4.417,3903,4.417,3904,4.417,3905,4.417,3906,4.417,3907,4.417,3908,4.417,3909,4.417,3910,6.292,3911,4.417,3912,4.417,3913,4.417,3914,4.417,3915,4.417,3916,4.417,3917,7.329,3918,4.417,3919,4.417,3920,4.417,3921,6.576,3922,4.417,3923,3.963,3924,4.417,3925,4.417,3926,4.417,3927,4.417,3928,6.292,3929,4.417,3930,4.417,3931,4.417,3932,4.417,3933,4.417,3934,4.417,3935,4.417,3936,4.417,3937,4.417,3938,4.417]],["title/modules/SubmitModule.html",[244,1.282,283,3.698]],["body/modules/SubmitModule.html",[3,0.061,4,0.061,5,0.055,15,0.005,16,0.101,19,0.889,24,1.955,54,0.068,55,0.23,59,2.009,242,0.004,243,0.004,244,2.142,246,2.541,247,3.295,252,3.295,253,2.625,254,2.582,257,3.47,258,3.597,278,5.854,283,7.56,289,3.47,304,3.146,331,4.581,333,3.024,334,3.592,343,5.446,344,5.278,526,2.288,728,1.853,1019,4.777,3656,7.07,3683,7.333,3684,6.079,3939,6.079,3940,6.776,3941,6.079,3942,6.079,3943,6.776,3944,6.776]],["title/injectables/SubmitService.html",[17,0.865,3683,3.53]],["body/injectables/SubmitService.html",[3,0.05,4,0.05,5,0.045,10,0.212,13,1.104,14,0.335,15,0.005,16,0.088,17,1.269,18,2.565,19,0.725,20,2.677,22,1.261,23,2.176,24,1.594,54,0.055,55,0.187,57,1.981,59,1.638,60,1.452,62,3.708,63,2.14,64,3.408,66,1.617,67,1.914,70,6.029,71,2.792,72,2.941,73,3.156,101,2.279,108,2.224,242,0.003,243,0.003,290,1.476,294,0.418,296,1.596,297,0.874,298,0.773,300,1.658,343,3.596,344,4.303,549,3.537,728,2.007,775,3.043,782,1.756,980,3.552,1293,2.673,1721,2.106,3585,4.209,3586,3.895,3683,5.175,3685,4.957,3760,3.473,3767,4.963,3770,4.08,3945,4.957,3946,7.34,3947,7.34,3948,5.525,3949,5.525,3950,7.34,3951,5.525,3952,7.34,3953,5.525,3954,7.34,3955,5.525,3956,5.525,3957,5.525,3958,7.34,3959,7.34,3960,9.4,3961,7.34,3962,7.34,3963,5.525,3964,5.525,3965,5.525]],["title/classes/SupabaseAuthDto.html",[55,0.17,622,3.9]],["body/classes/SupabaseAuthDto.html",[3,0.026,4,0.026,5,0.023,10,0.108,11,0.673,13,0.695,14,0.402,15,0.005,16,0.028,54,0.028,55,0.096,69,1.293,78,2.502,84,1.682,89,1.527,213,1.968,242,0.002,243,0.002,294,0.463,297,0.822,298,0.963,455,2.418,460,4.024,503,2.832,507,0.722,511,1.077,512,1.093,513,3.161,514,2.17,515,2.176,518,1.682,519,0.407,522,1.346,523,3.72,529,6.883,542,4.675,572,5.964,573,2.125,583,4.096,607,6.533,622,3.493,638,5.724,640,4.63,641,5.008,642,2.127,643,2.4,646,1.226,647,4.63,654,4.63,655,4.63,656,5.008,657,5.407,658,4.893,659,4.348,660,5.407,661,4.348,662,3.926,663,4.348,664,4.348,665,4.348,666,5.008,667,4.63,733,3.502,854,2.517,919,2.919,1033,4.484,1078,4.489,1086,4.512,1090,3.312,1191,2.895,1376,3.522,1397,2.729,1399,3.522,1492,1.709,1524,1.737,1580,4.024,1588,3.222,1589,3.395,1591,2.041,1592,4.487,1621,3.72,1669,2.125,1678,3.312,1746,3.032,1769,4.024,1855,2.919,1921,4.024,2102,5.276,2228,4.024,2386,4.954,3966,8.76,3967,2.531,3968,2.821,3969,2.821,3970,4.485,3971,4.485,3972,2.821,3973,2.821,3974,2.821,3975,4.024,3976,4.024,3977,2.821,3978,3.493,3979,2.821,3980,4.485,3981,2.821,3982,4.024,3983,4.024,3984,2.821,3985,2.821,3986,2.821,3987,6.36,3988,4.485,3989,2.821,3990,4.485,3991,2.821,3992,2.821,3993,4.024,3994,4.024,3995,2.821,3996,4.485,3997,4.485,3998,2.821,3999,4.485,4000,2.821,4001,4.485,4002,2.821,4003,2.821,4004,4.024,4005,4.024,4006,2.821,4007,2.821,4008,4.485,4009,3.72,4010,2.821,4011,2.821]],["title/injectables/SupabaseGuard.html",[17,0.865,626,2.041]],["body/injectables/SupabaseGuard.html",[3,0.071,4,0.071,5,0.064,15,0.005,16,0.092,17,1.582,19,1.034,54,0.079,55,0.267,242,0.004,243,0.004,626,3.731,720,6.533,782,2.503,1022,2.733,4012,7.066,4013,7.875,4014,7.875]],["title/injectables/SupabaseStrategy.html",[17,0.865,717,3.698]],["body/injectables/SupabaseStrategy.html",[3,0.06,4,0.06,5,0.054,10,0.254,14,0.335,15,0.005,16,0.094,17,1.426,19,0.87,54,0.066,55,0.224,57,2.425,66,1.22,67,1.83,213,1.283,242,0.004,243,0.004,290,1.659,294,0.428,296,1.598,297,0.875,298,0.774,300,1.659,301,4.671,313,4.894,529,4.671,551,7.801,607,5.817,652,2.586,717,6.094,720,5.496,759,2.106,782,2.106,1022,2.299,1051,5.945,3866,5.496,4015,5.945,4016,8.251,4017,8.251,4018,6.626,4019,8.251,4020,8.986,4021,6.626,4022,8.251,4023,6.626,4024,6.626,4025,6.626,4026,6.626,4027,6.626,4028,6.626,4029,6.626,4030,6.626,4031,6.626,4032,6.626,4033,6.626,4034,6.626,4035,6.626,4036,6.626,4037,6.626,4038,6.626,4039,6.626,4040,6.626]],["title/classes/TopUsersDto.html",[55,0.17,4041,3.698]],["body/classes/TopUsersDto.html",[3,0.052,4,0.052,5,0.046,8,3.725,10,0.22,11,1.13,13,1.096,14,0.415,15,0.005,16,0.084,54,0.058,55,0.285,66,1.058,84,2.825,89,2.018,93,3.681,123,2.417,194,3.822,213,1.459,242,0.004,243,0.004,294,0.425,298,0.892,503,2.681,507,1.471,511,0.932,519,0.828,521,1.776,522,0.796,549,2.961,646,1.655,800,3.362,854,2.233,946,3.294,1027,2.873,1060,3.367,1067,4.25,1068,3.898,1069,3.809,1070,3.123,1076,2.973,1078,2.667,1086,4.141,1088,3.981,1136,5.925,1279,3.391,1280,3.391,2172,4.735,2492,5.564,2493,5.925,2510,4.476,2512,4.904,2513,5.564,2516,4.244,2517,4.244,2534,4.766,2535,5.155,2536,5.155,2539,5.155,2540,5.155,2975,4.766,4041,5.564,4042,8.309,4043,7.533,4044,5.746]],["title/classes/UpdateEndorsementDto.html",[55,0.17,4045,4.154]],["body/classes/UpdateEndorsementDto.html",[3,0.071,4,0.071,5,0.063,15,0.005,16,0.092,54,0.079,55,0.266,242,0.004,243,0.004,507,2.012,519,1.133,564,4.94,1022,2.727,1288,5.54,1290,6.519,2377,6.519,4045,7.585,4046,7.051,4047,7.858,4048,7.858]],["title/classes/UpdateInsightDto.html",[55,0.17,2748,3.698]],["body/classes/UpdateInsightDto.html",[3,0.063,4,0.063,5,0.056,10,0.267,11,1.274,14,0.406,15,0.005,16,0.07,20,2.117,54,0.07,55,0.235,69,1.085,208,3.403,242,0.004,243,0.004,294,0.437,297,0.973,438,2.881,507,1.779,511,1.017,512,3.555,515,1.941,564,4.366,572,4.697,733,4.025,738,5.13,941,3.983,943,3.595,944,5.762,1022,2.948,1027,2.904,1035,4.988,1145,4.897,1146,5.34,1147,5.411,1316,7.37,1318,5.762,1319,4.396,1321,6.232,1323,5.53,2748,6.274,2750,5.762,4049,5.762,4050,6.946,4051,6.946,4052,6.946]],["title/classes/UpdateInsightMemberDto.html",[55,0.17,4053,3.9]],["body/classes/UpdateInsightMemberDto.html",[3,0.065,4,0.065,5,0.058,10,0.276,11,1.3,14,0.378,15,0.005,16,0.087,54,0.072,55,0.294,69,1.235,242,0.004,243,0.004,294,0.342,507,1.839,511,0.796,512,2.782,515,1.834,518,3.251,519,1.036,520,3.359,521,2.22,522,0.995,1135,4.37,1319,5.005,1331,5.958,1332,6.753,1750,7.311,1755,6.403,2737,5.595,4049,7.192,4053,6.753,4054,7.182,4055,7.192,4056,6.403,4057,7.182,4058,7.182]],["title/classes/UpdateUserCollaborationDto.html",[55,0.17,4059,3.9]],["body/classes/UpdateUserCollaborationDto.html",[3,0.066,4,0.066,5,0.058,10,0.278,11,1.307,14,0.38,15,0.005,16,0.087,54,0.073,55,0.295,69,1.238,213,1.687,242,0.004,243,0.004,294,0.345,392,2.85,492,7.816,507,1.854,511,0.803,512,2.805,515,1.843,518,3.267,519,1.044,520,3.375,521,2.237,522,1.003,1135,4.405,1353,6.006,1354,6.434,2027,6.459,4059,6.786,4060,6.434,4061,7.24,4062,7.24,4063,6.496,4064,7.24]],["title/classes/UpdateUserDto.html",[55,0.17,580,3.698]],["body/classes/UpdateUserDto.html",[3,0.035,4,0.035,5,0.031,10,0.148,11,0.856,14,0.419,15,0.005,16,0.057,54,0.039,55,0.193,69,1.332,189,4.445,213,1.922,242,0.003,243,0.003,294,0.451,297,0.849,298,0.94,448,4.076,455,1.263,503,2.451,507,0.989,511,1.052,512,2.211,515,2.149,518,2.546,519,0.557,520,3.357,521,1.193,522,1.314,580,4.215,583,4.722,594,8.802,652,3.209,657,6.233,658,5.641,659,5.288,660,6.233,661,5.288,662,4.441,663,5.288,664,5.288,665,5.288,678,5.411,733,3.554,735,5.014,740,3.715,834,3.272,919,3.715,956,2.852,1078,4.29,1086,4.351,1088,4.184,1334,3.464,1336,5.12,1397,2.349,1492,2.175,1678,4.215,1855,2.514,2165,4.734,2386,4.445,3975,5.12,3976,3.464,3978,4.445,3982,5.12,3983,5.12,3993,5.12,3994,3.464,4004,7.982,4005,3.464,4009,3.203,4056,2.852,4060,7.078,4065,3.464,4066,3.861,4067,3.861,4068,5.707,4069,3.861,4070,3.861,4071,3.861,4072,3.861,4073,3.861,4074,3.861,4075,3.861,4076,3.861,4077,3.861,4078,3.861,4079,3.861,4080,3.861,4081,3.861,4082,6.221,4083,3.861,4084,3.861,4085,3.861,4086,7.5,4087,5.707,4088,5.707,4089,5.707,4090,5.707,4091,3.861,4092,3.861,4093,3.861,4094,3.861,4095,8.002,4096,3.861,4097,3.861,4098,3.861]],["title/classes/UpdateUserEmailPreferencesDto.html",[55,0.17,581,3.698]],["body/classes/UpdateUserEmailPreferencesDto.html",[3,0.061,4,0.061,5,0.054,10,0.257,11,1.245,14,0.402,15,0.005,16,0.083,54,0.067,55,0.281,203,4.399,213,1.941,242,0.004,243,0.004,294,0.395,455,2.715,507,1.712,511,0.92,512,3.215,515,1.996,518,3.384,519,0.964,521,2.067,522,1.15,581,6.129,583,5.725,652,3.175,733,4.8,738,6.129,740,5.874,1354,6.129,1678,6.129,4060,6.665,4099,6,4100,8.096,4101,8.096,4102,6.687,4103,8.299,4104,6.687]],["title/classes/UpdateUserProfileInterestsDto.html",[55,0.17,588,3.698]],["body/classes/UpdateUserProfileInterestsDto.html",[3,0.065,4,0.065,5,0.058,10,0.277,11,1.303,14,0.379,15,0.005,16,0.087,54,0.072,55,0.294,69,1.237,213,1.683,242,0.004,243,0.004,294,0.343,438,3.604,507,1.847,511,0.799,512,2.794,515,1.838,518,3.259,519,1.04,521,2.228,522,0.999,588,6.419,590,6.986,652,2.924,941,4.983,943,5.011,2187,5.326,4060,6.419,4105,6.47,4106,5.982,4107,7.211,4108,5.617]],["title/controllers/UserCollaborationController.html",[524,1.142,4109,3.9]],["body/controllers/UserCollaborationController.html",[3,0.037,4,0.037,5,0.033,10,0.155,13,1.004,14,0.357,15,0.005,16,0.097,19,0.53,25,1.339,26,1.443,28,1.995,54,0.04,55,0.137,57,1.089,60,1.549,63,1.907,66,1.085,67,1.927,69,1.041,71,2.793,101,2.207,104,2.123,108,2.067,203,2.139,213,1.951,242,0.003,243,0.003,290,1.185,294,0.365,296,1.483,297,0.812,298,0.719,300,1.54,313,2.98,392,2.783,412,5.179,413,3.143,503,1.591,511,0.849,519,0.582,522,1.129,524,0.921,526,1.103,528,1.489,529,2.844,540,3.096,542,3.125,543,2.728,545,4.957,549,3.433,551,6.354,567,3.05,570,2.627,598,2.844,599,2.915,600,1.767,601,3.419,602,3.125,603,3.233,604,2.79,605,2.872,606,1.489,607,2.844,608,3.604,626,1.644,632,1.443,634,3.109,635,2.612,646,1.53,649,2.455,755,4.319,756,2.251,761,3.604,762,1.836,763,1.912,775,2.176,970,1.379,971,1.118,1163,2.488,1164,1.801,1165,1.873,1166,1.801,1167,1.873,1300,3.143,1351,7.017,1354,6.786,2027,2.627,2296,2.844,2297,3.986,2342,3.62,2372,1.912,2373,2.251,2412,3.62,2429,3.986,2636,3.586,2639,2.98,2669,2.139,2742,4.155,2746,4.91,2749,2.98,3029,2.98,3598,3.837,3605,3.986,3760,2.536,4059,6.628,4109,4.591,4110,4.808,4111,3.62,4112,4.035,4113,7.31,4114,7.31,4115,7.659,4116,6.248,4117,4.035,4118,5.894,4119,6.964,4120,3.62,4121,5.289,4122,5.289,4123,4.035,4124,4.035,4125,3.62,4126,6.964,4127,4.035,4128,4.035,4129,4.035,4130,4.035,4131,4.035,4132,3.62,4133,4.035,4134,4.035,4135,4.035,4136,2.627,4137,4.91,4138,3.62,4139,5.894,4140,4.035,4141,2.627,4142,4.035,4143,4.035,4144,4.035,4145,4.035,4146,4.035,4147,4.035,4148,6.964,4149,4.035,4150,5.894,4151,4.035,4152,4.035,4153,4.035,4154,3.62,4155,4.035,4156,4.035]],["title/injectables/UserCollaborationService.html",[17,0.865,4137,3.53]],["body/injectables/UserCollaborationService.html",[3,0.045,4,0.045,5,0.04,10,0.19,13,0.851,14,0.37,15,0.005,16,0.093,17,1.177,18,3.162,19,0.649,20,2.558,21,4.13,22,1.129,23,1.948,24,1.427,25,1.642,26,1.77,28,2.446,54,0.05,55,0.168,57,1.838,59,1.466,60,1.79,62,3.544,63,1.964,64,3.162,66,1.675,67,2.061,69,1.231,71,2.668,72,3.362,73,2.928,101,1.283,104,2.326,108,1.335,213,0.958,238,2.622,242,0.003,243,0.003,251,4.941,290,1.37,294,0.444,296,1.762,297,0.965,298,0.854,300,1.83,412,4.605,413,3.853,549,3.101,646,1.934,649,5.536,759,2.476,775,1.826,782,1.572,970,1.691,971,1.371,972,3.109,977,3.109,979,3.852,980,2.393,1540,2.836,2070,4.438,2428,4.144,2446,4.144,4110,5.604,4113,6.111,4114,6.99,4116,6.111,4125,4.438,4132,6.111,4137,4.802,4154,7.898,4157,4.438,4158,6.811,4159,4.946,4160,4.946,4161,6.811,4162,6.811,4163,4.946,4164,4.946,4165,4.946,4166,4.946,4167,6.811,4168,4.946,4169,4.946,4170,4.946,4171,4.946,4172,4.946,4173,4.946,4174,4.946,4175,4.946,4176,4.946,4177,4.946,4178,4.946,4179,4.946]],["title/controllers/UserController.html",[524,1.142,4180,3.9]],["body/controllers/UserController.html",[3,0.034,4,0.034,5,0.03,8,2.765,10,0.144,14,0.383,15,0.005,16,0.099,19,0.493,25,1.247,26,1.344,28,1.857,54,0.038,55,0.127,57,1.014,60,1.945,63,1.309,66,1.527,67,2.013,69,1.205,71,2.998,75,3.165,94,4.292,101,1.451,104,2.527,202,3.367,203,2.964,208,3.169,213,1.846,242,0.003,243,0.003,290,1.125,294,0.395,296,1.606,297,0.88,298,0.778,300,1.668,333,2.496,334,1.991,335,2.545,386,2.042,388,3.3,389,2.445,390,2.445,394,3.3,396,2.445,448,5.126,511,0.919,519,0.542,522,1.096,524,0.857,526,1.027,528,1.386,540,3.323,544,3.116,603,3.672,604,3.441,605,3.221,606,1.386,608,3.457,632,1.344,635,3.11,761,2.894,970,1.284,971,1.041,1155,2.926,1163,3.124,1164,1.677,1165,1.744,1166,1.677,1167,1.744,1168,4.199,1169,2.774,1174,2.926,1710,4.13,2064,4.933,2092,2.361,2297,5.003,2300,4.567,2343,4.128,2372,1.78,2407,5.541,2408,5.541,2532,5.465,2537,3.942,2625,6.138,2638,3.116,2645,3.37,2655,3.37,2670,4.348,2672,2.926,2677,3.37,2695,3.37,3133,3.37,3365,3.63,3366,2.445,3381,2.648,3386,3.37,3397,2.54,3399,2.648,3822,5.017,4041,5.465,4136,2.445,4141,2.445,4180,4.355,4181,3.37,4182,7.911,4183,7.911,4184,7.911,4185,5.591,4186,5.591,4187,7.399,4188,3.756,4189,3.756,4190,6.138,4191,3.756,4192,3.756,4193,3.756,4194,3.756,4195,3.756,4196,3.756,4197,3.756,4198,3.756,4199,3.756,4200,3.756,4201,3.756,4202,3.756,4203,5.591,4204,3.756,4205,3.756,4206,3.756,4207,5.591,4208,5.591,4209,3.756,4210,3.756,4211,3.756,4212,3.756,4213,3.37,4214,5.017,4215,3.37,4216,5.017,4217,3.37,4218,3.37,4219,3.37,4220,3.756,4221,3.756,4222,3.756,4223,3.756,4224,3.756,4225,3.756,4226,5.017,4227,3.756,4228,3.756,4229,3.756,4230,3.756,4231,3.756,4232,3.756]],["title/controllers/UserEndorsementController.html",[524,1.142,4233,3.9]],["body/controllers/UserEndorsementController.html",[3,0.051,4,0.051,5,0.045,10,0.215,13,1.031,14,0.359,15,0.005,16,0.098,19,0.736,54,0.056,55,0.19,66,1.366,67,1.923,104,2.566,213,1.712,242,0.003,243,0.003,290,1.492,294,0.353,296,1.436,297,0.787,298,0.696,300,1.492,417,5.777,418,4.654,503,1.514,511,0.822,519,0.809,524,1.28,526,1.534,528,2.071,540,3.114,542,4.685,549,3.238,600,2.457,601,3.708,604,3.328,605,3.115,606,2.071,626,2.287,632,2.007,634,3.31,635,2.781,759,2.357,762,2.554,771,2.039,970,1.918,971,1.555,1159,5.067,1163,3.507,1164,2.504,1165,2.605,1166,2.504,1167,2.605,1633,5.228,1709,6.884,2343,4.93,2350,6.654,2361,6.152,2374,5.408,2382,5.034,2389,6.654,2669,2.974,4110,4.902,4233,5.777,4234,5.034,4235,5.611,4236,8.838,4237,8.838,4238,5.611,4239,5.611,4240,5.611,4241,5.611,4242,5.611,4243,5.611,4244,5.034,4245,5.611,4246,5.611,4247,5.611,4248,5.611,4249,5.611,4250,5.611,4251,5.611]],["title/injectables/UserFollowService.html",[17,0.865,4252,3.386]],["body/injectables/UserFollowService.html",[3,0.04,4,0.04,5,0.036,10,0.171,13,1.117,14,0.344,15,0.005,16,0.088,17,1.094,18,2.068,19,0.585,20,2.444,22,1.017,23,1.755,24,1.285,28,2.203,54,0.045,55,0.151,57,1.708,59,1.321,60,1.936,62,3.385,63,2.203,64,2.939,66,1.621,67,1.986,71,2.798,72,3.706,73,3.447,75,2.111,100,1.877,101,2.4,108,2.164,213,1.64,219,3.012,238,3.356,242,0.003,243,0.003,290,1.273,294,0.419,296,1.64,297,0.898,298,0.795,300,1.704,398,3.012,399,3.47,549,3.465,608,4.685,759,1.416,775,2.96,782,1.416,980,3.564,1115,2.801,1721,1.698,2230,4.463,2270,3.47,3585,2.555,3760,2.801,3767,4.281,3770,4.676,4110,5.343,4136,2.9,4252,4.281,4253,3.997,4254,6.331,4255,6.331,4256,6.331,4257,6.331,4258,4.455,4259,5.893,4260,4.455,4261,6.331,4262,6.331,4263,8.301,4264,4.455,4265,4.455,4266,6.331,4267,4.455,4268,6.331,4269,8.564,4270,4.455,4271,6.331,4272,4.455,4273,3.47,4274,4.455,4275,4.455,4276,4.455,4277,4.455,4278,6.331,4279,7.364,4280,7.364,4281,9.252,4282,4.931,4283,6.331,4284,6.331,4285,6.331,4286,4.455,4287,6.331,4288,4.455,4289,4.455,4290,4.455]],["title/controllers/UserFollowsController.html",[524,1.142,4291,3.9]],["body/controllers/UserFollowsController.html",[3,0.043,4,0.043,5,0.038,10,0.183,13,1.044,14,0.353,15,0.005,16,0.093,19,0.625,28,2.355,54,0.048,55,0.161,60,1.252,63,1.787,66,1.406,67,1.947,69,1.221,71,2.858,75,2.257,101,1.981,107,2.488,213,2,242,0.003,243,0.003,290,1.334,294,0.363,296,1.479,297,0.81,298,0.716,300,1.746,398,4.486,399,3.71,448,5.195,503,1.79,511,0.847,519,0.687,522,1.246,524,1.087,526,1.302,528,1.758,540,3.168,542,3.517,549,3.503,600,2.086,601,3.686,603,3.834,604,2.658,605,3.097,606,1.758,608,3.952,626,1.941,632,1.704,634,3.408,635,2.863,762,2.167,771,1.73,873,4.171,2230,4.677,2271,5.822,2300,4.274,2372,2.257,2373,2.657,2407,6.334,2408,6.334,2669,2.525,3584,4.9,3585,3.804,3604,3.518,3605,5.163,3649,6.433,3653,5.953,4110,4.874,4136,3.1,4141,3.1,4219,4.273,4226,6.851,4252,5.163,4282,5.168,4291,5.168,4292,4.273,4293,7.636,4294,8.683,4295,7.636,4296,4.763,4297,4.763,4298,6.635,4299,6.635,4300,4.763,4301,4.763,4302,4.763,4303,6.635,4304,4.763,4305,4.763,4306,4.763,4307,6.635,4308,4.763,4309,4.763,4310,4.763,4311,3.951,4312,4.763,4313,4.763,4314,4.763,4315,4.763,4316,4.763,4317,4.763]],["title/controllers/UserHighlightsController.html",[524,1.142,4318,3.9]],["body/controllers/UserHighlightsController.html",[3,0.023,4,0.023,5,0.021,10,0.098,13,1.108,14,0.402,15,0.005,16,0.084,19,0.336,25,0.85,26,0.916,28,2.051,54,0.026,55,0.087,63,1.408,66,1.303,67,1.986,69,0.904,71,2.941,75,2.85,89,2.063,101,2.013,104,1.501,108,1.909,208,1.662,213,1.881,242,0.002,243,0.002,290,0.834,294,0.382,296,1.553,297,0.952,298,0.752,300,1.613,349,1.294,392,2.623,394,3.9,396,1.666,404,2.378,405,4.932,406,1.609,503,0.691,511,0.889,519,0.369,522,1.258,524,0.584,526,0.7,528,0.945,540,3.26,542,4.812,543,4.067,545,5.392,549,3.554,567,2.706,570,2.7,573,1.965,598,1.804,599,2.051,600,1.121,601,3.579,602,2.772,603,3.603,604,3.109,605,3.089,606,0.945,626,1.043,632,0.916,634,3.464,635,3.007,646,2.014,662,1.213,755,4.812,756,2.314,761,4.15,762,1.165,763,1.213,771,0.93,775,0.945,813,1.557,971,0.709,1163,2.208,1245,2.296,1367,6.084,1369,1.994,1673,3.687,1674,5.511,2099,2.123,2162,2.805,2171,5.038,2176,3.063,2345,4.989,2368,4.442,2372,1.213,2373,3.687,2625,4.338,2636,3.659,2638,3.441,2640,5.396,2641,4.442,2658,2.296,2659,2.296,2660,2.296,2661,2.296,2667,4.157,2668,3.95,2669,1.357,2670,3.404,2672,1.994,2679,2.296,2684,4.021,2691,2.296,2692,2.296,2694,2.296,2733,1.994,2741,2.123,2756,1.994,2759,2.123,3029,1.89,3598,3.915,3605,2.805,3649,3.231,3760,1.609,3767,1.731,4108,1.994,4110,4.862,4120,2.296,4141,1.666,4318,3.231,4319,2.296,4320,2.559,4321,6.609,4322,4.692,4323,6.609,4324,6.609,4325,6.609,4326,6.609,4327,6.609,4328,6.014,4329,6.609,4330,2.559,4331,6.962,4332,2.559,4333,2.559,4334,2.559,4335,2.559,4336,2.559,4337,7.246,4338,2.559,4339,4.148,4340,2.296,4341,2.559,4342,5.23,4343,2.559,4344,3.722,4345,2.559,4346,2.559,4347,2.559,4348,2.559,4349,2.559,4350,2.559,4351,2.559,4352,2.559,4353,2.559,4354,6.014,4355,4.148,4356,2.559,4357,2.559,4358,2.559,4359,2.559,4360,2.559,4361,2.559,4362,2.559,4363,2.559,4364,2.123,4365,2.559,4366,2.559,4367,4.148,4368,2.296,4369,2.296,4370,2.559,4371,2.296,4372,2.559,4373,2.559,4374,2.559,4375,2.559,4376,2.559,4377,2.123,4378,5.23,4379,2.559,4380,2.559,4381,2.559,4382,2.559,4383,2.559,4384,2.559,4385,2.559,4386,2.559,4387,2.559,4388,2.559,4389,2.559,4390,2.559,4391,4.148,4392,2.559,4393,2.559,4394,2.559,4395,2.559,4396,2.559,4397,2.559,4398,2.559,4399,2.559,4400,2.559]],["title/injectables/UserHighlightsService.html",[17,0.865,2670,3.26]],["body/injectables/UserHighlightsService.html",[3,0.022,4,0.022,5,0.02,10,0.193,13,1.122,14,0.368,15,0.005,16,0.089,17,0.686,18,2.34,19,0.318,20,2.22,21,2.672,22,0.554,23,0.956,24,0.7,25,0.805,26,0.868,28,1.964,54,0.024,55,0.082,57,1.072,59,1.177,60,1.814,62,2.46,63,2.244,64,1.844,66,1.61,67,2.059,69,1.034,71,2.737,72,3.666,73,2.763,75,2.389,81,1.71,82,1.513,84,1.489,100,1.495,101,2.195,102,2.8,104,2.353,105,1.773,106,1.792,108,1.966,124,1.432,125,1.006,144,0.842,147,1.792,148,1.792,149,1.476,150,1.792,157,1.641,202,1.104,213,1.245,219,3.409,238,3.088,242,0.002,243,0.002,251,3.861,290,0.799,294,0.431,296,1.737,297,0.951,298,0.841,300,1.804,394,2.344,396,1.579,404,2.277,405,4.003,406,1.525,549,3.501,608,3.77,646,1.28,649,3.067,662,1.15,703,3.093,728,1.086,759,2.416,763,1.15,775,1.861,782,0.771,813,1.476,854,0.719,857,2.74,970,1.358,971,1.1,972,1.525,977,3.169,979,3.412,980,2.439,1023,2.946,1026,2.216,1050,1.319,1094,2.685,1098,2.685,1100,3.939,1116,1.476,1158,1.579,1367,4.303,1369,1.89,1540,2.891,1579,1.882,1673,1.71,1674,1.89,1721,1.513,1842,1.89,2099,2.013,2116,2.013,2138,3.093,2139,1.89,2156,2.177,2162,2.685,2164,2.013,2171,3.939,2270,1.89,2274,2.177,2279,2.013,2428,2.416,2446,2.416,2628,3.563,2647,2.177,2670,2.585,2746,1.71,2802,2.177,2865,2.933,2874,3.093,3194,1.71,3195,1.89,3317,2.013,3321,2.013,3335,2.013,3416,2.013,3427,3.563,3437,2.177,3546,2.177,3562,3.294,3585,1.391,3760,1.525,3767,1.641,4110,5.4,4136,1.579,4252,4.926,4259,4.742,4269,5.766,4273,1.89,4311,2.013,4331,7.439,4337,7.591,4369,2.177,4371,2.177,4401,2.177,4402,3.971,4403,3.971,4404,3.971,4405,3.971,4406,3.971,4407,3.971,4408,3.971,4409,3.971,4410,3.971,4411,3.971,4412,3.971,4413,2.426,4414,4.523,4415,2.426,4416,3.971,4417,3.971,4418,2.426,4419,3.971,4420,2.426,4421,3.971,4422,5.766,4423,2.426,4424,2.426,4425,3.971,4426,2.426,4427,3.971,4428,2.426,4429,2.426,4430,2.426,4431,3.971,4432,2.426,4433,3.971,4434,2.426,4435,3.971,4436,2.426,4437,2.426,4438,3.971,4439,2.426,4440,3.971,4441,2.426,4442,2.426,4443,2.426,4444,3.971,4445,2.426,4446,2.426,4447,2.177,4448,2.426,4449,3.971,4450,3.971,4451,2.426,4452,2.426,4453,2.426,4454,3.971,4455,2.177,4456,2.426,4457,2.426,4458,2.426,4459,2.426,4460,2.426,4461,2.426,4462,2.426,4463,2.426,4464,2.426,4465,2.426,4466,2.426,4467,2.426,4468,2.426,4469,2.426,4470,3.971,4471,2.426,4472,2.426,4473,2.426,4474,2.426,4475,2.426,4476,2.426,4477,2.426,4478,2.426,4479,2.426,4480,2.426,4481,2.426,4482,3.971,4483,2.426,4484,2.426,4485,2.426,4486,2.177,4487,2.426,4488,2.426,4489,2.426,4490,2.426,4491,2.426,4492,2.426,4493,3.563,4494,2.426,4495,2.426,4496,2.426,4497,2.426,4498,5.041,4499,2.426,4500,2.426,4501,2.426,4502,3.971,4503,3.971,4504,2.426,4505,2.426,4506,2.426,4507,5.041,4508,2.426,4509,2.426,4510,3.971,4511,2.426,4512,2.426]],["title/controllers/UserInsightMemberController.html",[524,1.142,2857,3.9]],["body/controllers/UserInsightMemberController.html",[3,0.029,4,0.029,5,0.025,10,0.121,13,1.083,14,0.391,15,0.005,16,0.093,19,0.413,25,1.046,26,1.127,54,0.032,55,0.107,57,0.85,60,1.576,63,2.15,66,1.104,67,1.847,69,0.989,71,2.655,89,2.006,101,2.411,104,1.22,108,2.181,213,0.947,242,0.002,243,0.002,290,0.984,294,0.322,296,1.309,297,0.886,298,0.634,300,1.359,367,3.648,392,1.961,400,4.054,401,2.454,455,1.03,503,1.32,511,0.749,519,0.454,522,1.157,524,0.719,526,0.861,528,1.163,540,2.943,545,5.334,549,3.409,567,3.103,570,3.184,572,2.13,573,1.493,598,2.221,599,1.558,600,1.38,601,3.266,602,3.178,603,3.397,604,2.931,605,2.744,606,1.163,608,3.103,609,2.454,626,1.284,632,1.127,634,3.017,635,2.534,646,1.992,649,1.917,755,4.105,756,1.757,761,3.498,762,1.434,763,1.493,775,2.701,971,0.873,1027,1.077,1163,2.065,1164,1.406,1165,1.462,1166,1.406,1167,1.462,1319,5.214,1327,2.326,1330,6.295,1332,6.954,1721,1.864,1750,3.612,1751,2.326,1752,2.826,1755,4.428,1763,2.826,2297,3.307,2300,1.63,2372,1.493,2373,1.757,2429,3.307,2636,2.976,2639,3.612,2641,2.326,2667,4.082,2668,3.879,2669,1.67,2684,4.112,2734,4.057,2737,4.67,2742,3.448,2746,5.158,2749,2.326,2751,2.326,2752,3.769,2753,2.13,2755,2.613,2758,4.057,2763,4.054,2766,5.379,2768,4.388,2770,6.565,2777,2.826,2780,6.929,2789,2.826,2791,2.454,2822,4.764,2857,3.81,2861,2.613,2881,2.613,3001,2.454,3585,1.806,3598,3.184,3760,1.98,4053,6.507,4055,6.07,4056,5.404,4122,2.826,4190,4.057,4513,6.07,4514,2.826,4515,2.826,4516,5.379,4517,7.317,4518,3.15,4519,3.15,4520,4.891,4521,4.891,4522,4.891,4523,5.995,4524,3.15,4525,3.15,4526,2.826,4527,3.15,4528,4.891,4529,3.15,4530,3.15,4531,3.15,4532,7.744,4533,3.15,4534,3.15,4535,3.15,4536,3.15,4537,2.826,4538,3.15,4539,3.15,4540,3.15,4541,4.388,4542,4.891,4543,2.826,4544,3.15,4545,3.15,4546,4.891,4547,4.891,4548,6.064,4549,6.565,4550,3.15,4551,3.15,4552,6.948,4553,4.891,4554,3.15,4555,3.15,4556,3.15,4557,3.15,4558,4.891,4559,3.15,4560,3.15,4561,3.15,4562,3.15,4563,3.15,4564,4.891,4565,4.891,4566,4.891,4567,4.891,4568,3.15,4569,3.15,4570,3.15,4571,3.15,4572,3.15,4573,3.15]],["title/controllers/UserInsightsController.html",[524,1.142,2856,3.9]],["body/controllers/UserInsightsController.html",[3,0.033,4,0.033,5,0.03,10,0.142,13,0.981,14,0.372,15,0.005,16,0.095,19,0.485,25,1.226,26,1.322,54,0.037,55,0.125,57,0.997,60,1.738,63,2.101,66,1.218,67,1.829,69,0.845,71,2.62,89,1.326,101,2.216,104,1.378,108,2.224,208,2.94,213,1.701,242,0.003,243,0.003,290,1.111,294,0.315,296,1.281,297,0.874,298,0.621,300,1.33,367,4.465,392,1.807,503,1.49,511,0.733,519,0.533,522,1.142,524,0.843,526,1.01,528,1.364,540,2.904,542,3.89,543,3.734,545,5.344,549,3.407,567,2.858,570,3.595,573,3.134,598,2.604,599,2.731,600,1.618,601,3.276,602,3.506,603,3.407,604,2.94,605,2.752,606,1.364,626,1.506,632,1.322,634,2.952,635,2.48,646,1.725,651,2.18,669,2.18,670,2.878,728,2.148,755,3.89,756,2.061,760,3.259,761,3.423,762,1.681,763,1.751,775,2.441,971,1.024,1027,2.685,1044,2.405,1146,3.472,1163,2.332,1164,1.649,1165,1.715,1166,1.649,1167,1.715,1316,6.486,1319,4.917,1323,2.405,1721,1.408,1733,3.315,1746,4.962,1865,3.315,2296,2.604,2297,3.734,2300,2.858,2372,1.751,2429,2.498,2636,4.024,2667,3.081,2668,2.928,2669,1.958,2684,2.248,2734,5.486,2743,4.955,2744,3.315,2746,3.893,2748,6.486,2749,2.729,2750,4.581,2751,2.729,2752,4.157,2753,2.498,2755,3.065,2758,4.581,2763,4.472,2822,5.173,2823,3.893,2856,4.302,2859,2.878,2861,3.065,2881,3.065,3029,2.729,3598,3.595,3873,2.878,4055,3.065,4056,2.729,4190,4.581,4322,6.584,4364,3.065,4377,3.065,4513,6.087,4515,3.315,4516,7.048,4526,3.315,4537,3.315,4541,4.955,4543,3.315,4548,3.315,4549,3.315,4552,4.955,4574,3.315,4575,7.855,4576,3.694,4577,3.694,4578,3.694,4579,3.694,4580,3.694,4581,3.694,4582,3.694,4583,5.523,4584,3.694,4585,3.694,4586,3.694,4587,3.694,4588,5.523,4589,3.694,4590,5.523,4591,3.694,4592,3.694,4593,3.694,4594,3.694,4595,3.694,4596,3.694,4597,3.694,4598,3.694,4599,3.694,4600,3.694,4601,3.694,4602,3.694,4603,3.694,4604,5.523,4605,3.694,4606,3.694,4607,3.694,4608,3.694,4609,3.694,4610,3.694,4611,3.694,4612,3.694,4613,3.694,4614,3.694,4615,3.694,4616,3.694,4617,3.694,4618,3.694,4619,3.694]],["title/controllers/UserListController.html",[524,1.142,4620,3.9]],["body/controllers/UserListController.html",[3,0.022,4,0.022,5,0.02,6,3.339,7,5.427,8,4.705,10,0.095,13,0.972,14,0.401,15,0.005,16,0.089,19,0.324,25,0.82,26,0.884,27,2.533,28,1.992,29,1.741,31,2.278,38,1.741,54,0.025,55,0.084,63,1.518,66,1.409,67,1.998,69,1.261,71,2.967,75,1.909,80,5.139,89,0.967,96,4.543,101,1.904,104,2.192,108,1.589,213,1.913,242,0.002,243,0.002,290,0.81,294,0.388,296,1.533,297,0.965,298,0.743,300,1.638,335,1.834,336,1.416,392,2.727,430,4.386,432,1.924,503,0.666,511,0.903,519,0.356,522,1.283,524,0.563,526,0.675,528,0.912,540,3.289,542,4.058,543,3.451,544,2.049,545,5.679,549,3.353,567,2.641,570,2.623,573,1.909,598,1.741,599,1.992,600,1.082,601,3.635,602,2.705,603,3.87,604,3.066,605,3.126,606,0.912,626,1.006,632,0.884,634,3.534,635,3.054,646,2.09,755,4.869,756,2.248,761,4.214,762,1.124,763,1.17,771,0.897,939,4.587,970,0.844,971,0.684,1144,6.1,1146,1.552,1163,2.155,1164,1.102,1165,1.147,1166,2.278,1167,1.147,1188,3.342,2060,2.976,2296,1.741,2345,3.342,2368,5.653,2372,1.17,2373,4.095,2488,4.349,2636,4.234,2641,4.791,2668,4.058,2669,1.309,2684,3.947,2733,1.924,2741,2.049,2756,1.924,2759,2.049,2839,6.349,3029,1.824,3415,2.049,3598,2.623,4141,1.608,4344,2.216,4364,2.049,4377,2.049,4620,3.139,4621,2.216,4622,5.82,4623,5.888,4624,5.888,4625,5.103,4626,5.888,4627,6.487,4628,6.959,4629,5.888,4630,6.487,4631,6.487,4632,6.487,4633,2.47,4634,5.888,4635,5.888,4636,2.47,4637,2.47,4638,2.47,4639,2.47,4640,6.243,4641,2.47,4642,3.615,4643,4.029,4644,5.283,4645,2.47,4646,2.47,4647,2.47,4648,2.47,4649,2.47,4650,2.47,4651,2.47,4652,2.47,4653,2.47,4654,2.47,4655,2.47,4656,2.47,4657,4.579,4658,2.47,4659,2.47,4660,2.47,4661,2.47,4662,2.47,4663,2.47,4664,2.47,4665,2.47,4666,2.47,4667,2.47,4668,2.47,4669,2.47,4670,4.029,4671,2.47,4672,2.47,4673,2.47,4674,4.029,4675,2.216,4676,3.598,4677,2.216,4678,2.47,4679,2.216,4680,2.216,4681,2.47,4682,2.47,4683,4.029,4684,2.47,4685,2.47,4686,2.47,4687,2.47,4688,2.47,4689,2.47,4690,2.47,4691,2.47,4692,2.47,4693,4.029,4694,2.47,4695,2.47,4696,2.47,4697,2.47,4698,2.47,4699,2.47,4700,2.47,4701,2.47,4702,2.47,4703,2.47,4704,2.47,4705,2.47,4706,2.47,4707,2.47,4708,2.47,4709,4.029,4710,2.47,4711,2.47,4712,2.47,4713,2.47,4714,2.47,4715,2.47,4716,2.47]],["title/modules/UserListModule.html",[244,1.282,284,3.698]],["body/modules/UserListModule.html",[3,0.052,4,0.052,5,0.046,6,2.302,7,3.74,8,4.411,15,0.005,16,0.103,19,0.754,24,1.658,27,4.735,28,4.156,29,4.05,30,5.093,31,2.565,32,4.476,42,5.093,43,4.476,44,5.868,47,5.093,48,4.476,54,0.058,55,0.195,56,6.875,59,1.703,202,2.615,213,1.728,242,0.004,243,0.004,244,1.929,245,5.782,246,2.155,247,2.967,252,2.967,253,2.226,254,2.19,257,3.124,258,3.238,284,7.586,285,5.608,289,3.124,304,2.667,335,3.428,336,3.294,360,3.885,388,4.446,389,3.74,390,3.74,430,5.093,432,4.476,526,2.06,2420,4.05,2421,4.05,4620,6.546,4676,7.168,4677,5.155,4717,5.155,4718,5.155,4719,5.746,4720,5.155,4721,5.746,4722,6.546,4723,5.746,4724,5.155,4725,5.746,4726,5.155]],["title/classes/UserListMostActiveContributorsDto.html",[35,3.53,55,0.17]],["body/classes/UserListMostActiveContributorsDto.html",[3,0.045,4,0.045,5,0.04,6,3.139,10,0.192,11,1.029,13,0.966,14,0.401,15,0.005,16,0.079,33,7.283,34,6.905,35,4.838,37,5.067,54,0.079,55,0.233,84,2.574,90,3.935,92,4.838,93,3.006,104,2.376,105,3.764,108,1.852,115,6.104,123,2.54,125,2.846,138,6.104,141,2.322,143,3.625,182,5.069,194,3.214,242,0.003,243,0.003,294,0.445,298,0.946,503,2.704,507,1.281,511,1.037,519,0.721,521,1.546,800,2.232,854,1.483,917,2.37,970,1.71,971,1.386,1022,2.382,1027,2.346,1035,4.803,1056,5.101,1057,3.829,1058,3.829,1060,3.745,1062,4.259,1063,4.803,1067,2.529,1068,3.552,1069,2.529,1070,2.718,1071,2.952,1072,3.962,1073,2.588,1074,2.79,1075,2.868,1076,2.588,1077,2.868,1078,3.186,1079,2.651,1080,2.79,1081,2.79,1082,3.73,1083,2.868,1084,2.718,1085,2.868,1086,3.638,1087,3.043,1088,3.497,1089,4.977,1132,4.487,1139,4.487,2490,3.896,2499,4.487,4727,6.5,4728,5.001,4729,7.836,4730,5.001,4731,6.158,4732,5.001]],["title/injectables/UserListService.html",[17,0.865,4676,3.53]],["body/injectables/UserListService.html",[3,0.027,4,0.027,5,0.024,6,3.759,7,6.108,8,3.924,10,0.115,13,1.015,14,0.358,15,0.005,16,0.091,17,0.814,18,2.698,19,0.394,20,2.635,21,4.207,22,0.684,23,1.182,24,0.865,25,0.996,26,1.073,27,1.886,28,2.328,29,2.115,31,2.594,38,2.115,54,0.03,55,0.102,57,1.27,58,2.488,59,1.723,60,1.73,61,4.82,62,2.779,63,2.175,64,3.523,65,3.905,66,1.673,67,2.057,69,1.267,71,2.802,72,3.589,73,2.498,75,2.753,76,2.488,80,6.069,82,1.143,84,1.125,85,1.886,101,1.708,102,2.115,104,2.199,107,1.125,108,1.776,124,1.77,125,1.244,143,1.29,213,0.581,219,3.183,238,3.08,242,0.002,243,0.002,251,4.207,290,0.947,294,0.442,296,1.707,297,0.95,298,0.827,300,1.85,335,1.365,336,1.72,405,3.255,430,3.929,432,2.337,448,3.577,549,3.421,646,1.899,649,3.536,658,3.319,678,3.929,759,2.273,763,1.421,775,2.429,782,0.954,891,2.028,970,1.609,971,0.831,972,1.886,977,2.959,979,3.753,980,2.278,1023,1.517,1050,1.63,1100,3.929,1144,4.64,1146,1.886,1540,1.72,1721,1.794,2060,3.477,2196,4.224,2300,1.552,2428,2.865,2446,2.865,2458,2.488,2488,4.861,2736,2.692,2737,2.337,2746,2.115,2865,3.477,2874,3.667,3415,2.488,3562,4.82,4640,5.905,4642,4.224,4657,4.224,4675,2.692,4676,3.319,4679,2.692,4733,2.692,4734,4.708,4735,4.708,4736,6.582,4737,6.582,4738,4.708,4739,4.708,4740,4.708,4741,4.708,4742,6.582,4743,4.708,4744,3,4745,5.214,4746,3,4747,4.708,4748,4.708,4749,3,4750,4.708,4751,3,4752,3,4753,3,4754,3,4755,4.708,4756,3,4757,4.708,4758,3,4759,3,4760,4.708,4761,3,4762,3,4763,3,4764,3,4765,4.708,4766,3,4767,3,4768,4.708,4769,3,4770,3,4771,2.692,4772,3,4773,2.692,4774,4.708,4775,4.708,4776,4.708,4777,3,4778,3,4779,3,4780,3,4781,3,4782,3,4783,3,4784,3,4785,3,4786,3,4787,3,4788,3,4789,3,4790,3,4791,3,4792,3,4793,3,4794,3,4795,3,4796,3,4797,4.708,4798,3,4799,4.708,4800,3,4801,3,4802,3,4803,3,4804,3,4805,3,4806,3,4807,3,4808,3,4809,3,4810,3,4811,3,4812,3,4813,3]],["title/controllers/UserListStatsController.html",[524,1.142,4722,3.9]],["body/controllers/UserListStatsController.html",[3,0.032,4,0.032,5,0.028,6,3.243,7,5.27,8,4.654,10,0.135,13,0.702,14,0.406,15,0.005,16,0.093,19,0.463,25,1.17,26,1.261,28,1.743,30,4.346,31,3.614,32,2.745,35,5.052,36,2.923,37,4.821,38,2.484,39,5.927,40,2.923,41,2.923,42,3.604,43,4.152,44,4.152,45,3.757,46,2.923,47,3.604,48,2.745,54,0.035,55,0.119,56,4.346,66,1.417,67,1.953,69,1.288,70,4.505,71,2.872,94,2.758,95,3.757,96,3.998,97,4.421,104,1.604,137,4.4,200,6.127,213,0.682,242,0.002,243,0.002,290,1.072,294,0.366,296,1.491,297,0.958,298,0.722,300,1.548,392,2.518,503,0.951,511,0.853,519,0.508,522,1.252,524,0.804,526,0.964,528,1.301,540,3.183,545,5.497,600,1.543,601,3.614,603,3.759,604,3.243,605,3.036,606,1.301,626,1.436,632,1.261,634,3.435,635,2.886,646,2.201,755,4.789,761,4.19,762,1.604,771,1.28,891,5.854,1163,3.026,1164,1.573,1165,1.636,1166,1.573,1167,1.636,1188,7.494,1364,5.426,2372,1.67,2641,5.685,2668,4.292,2684,4.36,4141,2.294,4622,4.782,4644,3.162,4680,3.162,4722,4.152,4724,3.162,4814,3.162,4815,7.166,4816,8.658,4817,7.697,4818,7.697,4819,3.524,4820,6.428,4821,3.524,4822,6.428,4823,3.524,4824,3.524,4825,3.524,4826,5.33,4827,7.166,4828,5.33,4829,5.33,4830,5.33,4831,5.33,4832,3.524,4833,6.428,4834,3.524,4835,3.524,4836,3.524,4837,3.524,4838,3.524,4839,3.524,4840,3.524,4841,5.33,4842,3.524,4843,3.524,4844,3.524,4845,3.524,4846,3.524,4847,3.524,4848,3.524,4849,3.524,4850,3.524,4851,6.428,4852,6.428,4853,3.524,4854,3.524,4855,3.524,4856,3.524,4857,3.524,4858,3.524,4859,3.524]],["title/injectables/UserListStatsService.html",[17,0.865,56,3.386]],["body/injectables/UserListStatsService.html",[0,1.329,1,1.712,3,0.021,4,0.021,5,0.019,6,3.461,7,5.624,8,4.437,9,1.923,10,0.089,12,2.08,13,0.99,14,0.339,15,0.005,16,0.085,17,0.661,18,1.076,19,0.304,20,1.727,21,4.425,22,0.529,23,0.913,24,0.669,25,0.769,26,0.829,27,1.457,28,1.892,29,1.634,30,2.586,31,1.035,32,1.806,33,1.806,34,1.712,35,3.995,36,1.923,37,2.193,38,1.634,39,4.76,40,4.051,41,1.923,42,1.567,43,2.98,44,2.98,45,2.697,46,1.923,47,1.567,48,1.806,49,1.712,50,2.08,51,2.08,52,1.712,53,2.08,54,0.023,55,0.079,56,2.586,57,1.032,58,1.923,59,0.687,60,2.095,61,3.173,62,2.393,63,2.249,64,1.776,65,1.923,66,1.243,67,1.846,68,3.432,69,1.255,70,3.942,71,2.598,72,3.344,73,2.903,74,2.08,75,3.956,76,5.601,77,3.804,78,2.134,79,3.432,80,6.861,81,3.995,82,3.038,83,4.382,84,2.352,85,5.011,86,5.085,87,7.152,88,3.432,89,0.918,90,1.329,91,1.923,92,1.634,93,1.015,94,1.2,95,1.634,96,1.293,97,1.923,98,2.08,99,2.08,100,1.68,101,1.627,102,2.697,103,4.382,104,0.955,105,4.53,106,1.712,107,2.902,108,1.529,109,2.08,110,3.432,111,2.08,112,2.825,113,2.08,114,5.263,115,2.98,116,5.619,117,3.432,118,2.08,119,3.432,120,2.08,121,3.432,122,2.08,123,1.685,124,5.018,125,3.526,126,6.408,127,2.08,128,3.432,129,4.382,130,3.432,131,3.432,132,3.432,133,3.432,134,2.08,135,3.432,136,4.382,137,2.654,138,4.885,139,2.08,140,2.08,141,2.267,142,3.432,143,3.327,144,1.967,145,2.08,146,2.08,147,1.712,148,1.712,149,1.41,150,1.712,151,2.08,152,2.08,153,3.432,154,2.08,155,5.085,156,2.08,157,6.128,158,2.08,159,2.08,160,6.419,161,6.166,162,2.08,163,2.08,164,2.08,165,4.382,166,2.08,167,2.08,168,2.08,169,2.08,170,4.382,171,2.08,172,2.08,173,2.08,174,2.08,175,4.382,176,2.08,177,1.806,178,1.806,179,2.08,180,2.08,181,2.08,182,1.712,183,3.432,184,1.923,185,2.08,186,2.08,187,2.08,188,2.08,189,1.806,190,2.08,191,2.08,192,2.08,193,2.08,194,0.883,195,1.923,196,2.08,197,1.712,198,1.923,199,2.08,200,1.509,201,2.08,202,1.055,203,1.229,204,1.567,205,2.08,206,1.329,207,2.98,208,1.532,209,1.712,210,2.08,211,1.923,212,2.08,213,0.449,214,2.08,215,3.173,216,2.08,217,2.08,218,1.567,219,1.567,220,2.08,221,2.08,222,2.08,223,2.08,224,2.08,225,2.08,226,2.08,227,6.408,228,2.08,229,4.382,230,5.259,231,5.601,232,4.986,233,4.382,234,4.382,235,4.382,236,4.382,237,4.382,238,3.579,239,4.382,240,4.382,241,4.382,242,0.002,243,0.002,290,0.769,294,0.405,296,1.617,297,0.886,298,0.783,300,1.679,301,3.443,782,0.737,1060,2.27,4860,3.825,4861,3.825,4862,3.825,4863,3.825,4864,3.825,4865,3.825,4866,2.318,4867,2.318,4868,2.318,4869,2.318,4870,2.318,4871,2.318,4872,2.318,4873,2.318,4874,2.318,4875,2.318,4876,2.318,4877,2.318,4878,2.318,4879,2.318,4880,2.318,4881,2.318,4882,2.318,4883,2.318,4884,2.318,4885,2.318,4886,2.318,4887,2.318]],["title/modules/UserModule.html",[244,1.282,285,2.955]],["body/modules/UserModule.html",[3,0.04,4,0.04,5,0.036,15,0.005,16,0.105,19,0.587,24,1.29,28,4.481,54,0.045,55,0.151,59,1.326,94,2.314,202,2.035,213,1.85,242,0.003,243,0.003,244,1.625,245,5.361,246,1.677,247,2.5,252,2.5,253,1.732,254,1.704,257,2.633,258,2.729,277,5.958,278,5.2,285,6.165,289,2.633,304,2.076,331,3.024,333,2.833,334,2.371,335,2.889,349,2.261,386,2.431,387,3.71,394,3.746,396,2.911,398,4.292,399,3.483,404,3.64,405,2.211,406,2.811,409,4.688,410,4.292,411,3.483,412,4.292,413,3.483,414,4.688,415,4.012,417,3.99,418,3.71,526,1.736,608,5.05,2092,2.811,2374,6.353,2420,3.153,2421,3.153,2422,4.012,2670,6.353,2672,3.483,2701,4.012,3178,5.539,3192,3.153,3193,3.303,3365,5.304,3366,2.911,4109,5.748,4136,2.911,4137,6.212,4138,4.012,4180,6.257,4233,5.748,4244,4.012,4252,6.598,4259,5.736,4273,3.483,4291,5.748,4311,3.71,4318,6.257,4726,4.012,4888,4.012,4889,4.472,4890,4.012,4891,4.012,4892,4.472,4893,5.748,4894,5.748,4895,4.472,4896,4.472,4897,4.472,4898,4.472,4899,4.472]],["title/controllers/UserNotificationController.html",[524,1.142,4893,3.9]],["body/controllers/UserNotificationController.html",[3,0.056,4,0.056,5,0.05,10,0.238,13,0.952,14,0.321,15,0.005,16,0.1,19,0.813,25,2.055,26,2.215,28,3.062,54,0.062,55,0.21,66,1.14,67,1.774,71,2.513,104,2.49,213,1.777,242,0.004,243,0.004,290,1.59,294,0.295,296,1.199,297,0.657,298,0.581,300,1.245,410,4.186,411,4.823,511,0.686,519,0.893,522,0.858,524,1.413,526,1.693,528,2.285,540,2.785,542,4.191,543,4.186,545,4.81,549,3.233,600,2.712,601,3.529,603,3.67,604,3.167,605,2.965,606,2.285,626,2.523,632,2.215,634,2.764,635,2.322,762,2.818,771,2.25,970,2.117,971,1.716,1163,3.338,2223,5.136,2296,4.365,2368,5.839,2669,3.282,4110,4.666,4141,4.031,4259,5.67,4273,4.823,4340,5.555,4368,5.555,4486,8.233,4893,6.158,4900,5.555,4901,6.192,4902,9.481,4903,6.192,4904,6.192,4905,6.192,4906,6.192,4907,6.192]],["title/injectables/UserNotificationService.html",[17,0.865,4259,3.26]],["body/injectables/UserNotificationService.html",[3,0.037,4,0.037,5,0.033,10,0.157,13,1.132,14,0.386,15,0.005,16,0.093,17,1.031,19,0.539,20,2.353,21,3.728,22,0.936,23,1.617,24,1.184,25,1.362,26,1.468,28,2.951,54,0.041,55,0.139,57,1.61,59,1.217,60,1.569,62,3.26,63,2.194,64,2.771,66,1.576,67,2.038,72,2.391,73,1.764,75,1.945,100,1.769,101,2.292,104,2.258,108,2.214,144,2.071,219,2.775,242,0.003,243,0.003,290,1.2,294,0.431,296,1.711,297,0.937,298,0.829,300,1.777,405,2.951,410,2.775,411,3.197,549,3.346,570,2.672,608,4.571,646,0.901,649,4.279,703,5.478,759,2.608,782,1.305,834,4.427,970,2.04,971,1.137,976,2.775,1023,3.904,1026,3.329,1050,2.231,1114,2.893,1115,2.58,1116,2.497,1540,2.353,1633,2.893,1721,2.943,2166,3.404,2219,3.682,2220,6.928,2221,6.928,2222,3.682,2223,3.404,2230,2.893,2241,5.443,2244,3.404,2865,4.408,4110,5.446,4136,2.672,4259,3.885,4263,6.928,4337,7.1,4422,8.121,4908,3.682,4909,5.968,4910,5.968,4911,5.968,4912,5.968,4913,5.968,4914,4.104,4915,4.104,4916,5.968,4917,5.968,4918,4.104,4919,5.968,4920,4.104,4921,5.968,4922,4.104,4923,5.968,4924,4.104,4925,4.104,4926,4.104,4927,5.968,4928,4.104,4929,5.968,4930,4.104,4931,5.968,4932,4.104,4933,4.104,4934,4.104,4935,4.104,4936,4.104,4937,4.104,4938,4.104,4939,4.104,4940,4.104,4941,4.104,4942,4.104,4943,4.104,4944,4.104,4945,4.104,4946,4.104,4947,4.104,4948,4.104,4949,4.104,4950,7.033,4951,7.033,4952,4.104,4953,7.721,4954,4.104,4955,4.104,4956,4.104,4957,4.104,4958,4.104]],["title/classes/UserOnboardingDto.html",[55,0.17,568,3.698]],["body/classes/UserOnboardingDto.html",[3,0.061,4,0.061,5,0.054,10,0.259,11,1.251,14,0.403,15,0.005,16,0.084,54,0.068,55,0.282,69,1.295,213,1.615,242,0.004,243,0.004,294,0.397,438,3.458,507,1.725,511,0.924,512,3.23,515,2.001,518,3.395,519,0.971,520,3.23,521,2.082,522,1.155,568,6.158,590,6.854,652,3.104,678,6.574,941,4.78,943,4.896,1855,4.386,2187,4.976,4082,7.848,4106,5.589,4108,5.248,4959,8.123,4960,6.045,4961,6.738,4962,6.738,4963,6.738]],["title/controllers/UserRecommendationController.html",[524,1.142,4894,3.9]],["body/controllers/UserRecommendationController.html",[3,0.05,4,0.05,5,0.045,10,0.212,13,1.027,14,0.357,15,0.005,16,0.099,19,0.724,54,0.055,55,0.187,60,1.45,63,1.716,66,1.35,67,1.914,101,1.431,104,2.43,208,3.517,213,1.7,242,0.003,243,0.003,290,1.475,294,0.349,296,1.42,297,0.778,298,0.688,300,1.475,333,3.677,334,2.924,503,1.979,511,0.813,519,0.795,524,1.259,526,1.508,528,2.036,540,3.093,542,4.653,549,3.22,590,3.889,600,2.416,601,3.677,604,3.3,605,3.089,606,2.036,608,4.263,626,2.248,632,1.973,634,3.273,635,2.75,703,4.297,759,2.331,762,2.51,771,2.004,902,5.169,970,1.886,971,1.528,1163,3.096,1164,2.462,1165,2.561,1166,2.462,1167,2.561,2297,5.936,2669,2.924,3365,4.477,3366,3.591,3397,4.958,4110,4.861,4136,3.591,4141,3.591,4894,5.712,4964,4.949,4965,5.516,4966,8.778,4967,8.778,4968,5.516,4969,5.516,4970,8.778,4971,5.516,4972,7.333,4973,5.516,4974,5.516,4975,5.516,4976,5.516,4977,5.516,4978,5.516,4979,5.516,4980,5.516,4981,5.516,4982,5.516,4983,5.516,4984,5.516,4985,5.516,4986,5.516,4987,5.516]],["title/classes/UserRepoOptionsDto.html",[55,0.17,4988,3.386]],["body/classes/UserRepoOptionsDto.html",[3,0.054,4,0.054,5,0.049,6,2.41,10,0.231,11,1.164,13,1.027,14,0.407,15,0.005,16,0.06,54,0.06,55,0.204,84,2.91,93,3.399,104,2.475,105,4.052,123,2.522,125,3.219,141,2.793,143,3.903,194,3.46,242,0.004,243,0.004,294,0.447,298,0.948,503,2.727,507,1.54,511,1.042,728,1.645,800,2.685,854,1.783,917,2.85,970,2.056,971,1.667,1022,2.693,1027,2.653,1035,5.107,1055,3.269,1057,4.33,1058,4.33,1060,3.764,1062,3.269,1063,3.269,1067,3.042,1068,4.016,1069,3.042,1070,3.269,1071,3.55,1072,4.345,1073,3.113,1074,3.356,1075,3.449,1076,3.113,1077,3.449,1078,3.603,1079,3.189,1080,3.356,1081,3.356,1082,4.218,1083,3.449,1084,3.269,1085,3.449,3727,4.443,4988,5.248]],["title/classes/UserRepoOptionsDto-1.html",[55,0.141,194,1.587,4988,2.816]],["body/classes/UserRepoOptionsDto-1.html",[3,0.061,4,0.061,5,0.055,6,3.352,10,0.26,11,1.255,13,0.914,14,0.385,15,0.005,16,0.091,54,0.084,55,0.307,89,2.009,208,3.352,213,1.312,238,3.592,242,0.004,243,0.004,294,0.322,339,5.091,340,4.777,438,3.764,503,2.449,507,1.735,511,0.751,512,2.625,515,1.92,518,3.404,519,0.977,521,2.094,522,1.159,571,6.517,728,1.853,733,3.964,740,5.446,857,3.683,942,7.07,943,4.906,1088,3.734,1525,3.592,2636,5.091,3713,6.517,3718,5.004,3727,6.179,4106,5.621,4988,5.657,4989,5.621,4990,6.776,4991,6.079]],["title/modules/UserReposModule.html",[244,1.282,286,3.53]],["body/modules/UserReposModule.html",[3,0.063,4,0.063,5,0.056,6,2.772,15,0.005,16,0.098,19,0.908,24,1.996,54,0.069,55,0.234,59,2.051,213,1.641,242,0.004,243,0.004,244,2.17,245,6.066,246,2.595,247,3.338,252,3.338,253,2.681,254,2.637,257,3.515,258,3.644,286,7.241,289,3.515,304,3.212,349,3.499,371,4.878,373,4.878,2420,4.878,2421,4.878,4992,6.208,4993,6.919,4994,6.208,4995,6.208,4996,7.703,4997,6.919,4998,6.919,4999,6.919]],["title/injectables/UserReposService.html",[17,0.865,4996,3.698]],["body/injectables/UserReposService.html",[3,0.047,4,0.047,5,0.042,6,3.704,10,0.2,13,1.01,14,0.349,15,0.005,16,0.096,17,1.221,18,3.28,19,0.685,20,2.616,21,4.246,22,1.191,23,2.056,24,1.506,25,1.732,26,1.867,54,0.052,55,0.177,57,1.907,59,1.547,60,1.857,62,3.624,63,2.099,64,3.28,66,1.581,67,1.985,69,1.023,71,2.729,72,3.209,73,2.244,101,1.354,104,1.763,108,1.408,213,1.011,238,2.767,242,0.003,243,0.003,251,5.012,290,1.421,294,0.427,296,1.662,297,0.911,298,0.805,300,1.726,349,2.639,371,6.518,373,4.981,549,3.331,628,4.683,646,1.76,728,2.347,759,1.659,775,1.926,782,1.659,971,1.446,972,3.281,977,3.281,978,4.066,979,3.961,980,2.526,1293,2.526,1323,5.588,1325,3.529,1326,4.33,1329,3.176,1721,1.989,2428,4.299,2446,4.299,2848,4.33,2849,4.683,2865,5.219,2874,5.504,4988,5.804,4996,5.219,5000,4.683,5001,7.066,5002,5.22,5003,5.22,5004,7.066,5005,7.066,5006,5.22,5007,5.22,5008,5.22,5009,5.22,5010,5.22,5011,7.066,5012,5.22,5013,5.22,5014,5.22,5015,5.22]],["title/injectables/UserService.html",[17,0.865,608,2.591]],["body/injectables/UserService.html",[3,0.021,4,0.021,5,0.019,10,0.09,13,1.052,14,0.352,15,0.005,16,0.09,17,0.669,18,2.289,19,0.308,20,2.19,21,3.349,22,0.536,23,0.926,24,0.678,25,0.78,26,0.841,28,1.913,54,0.024,55,0.08,57,1.044,59,1.147,60,1.017,62,2.413,63,2.146,64,2.653,66,1.572,67,2.036,69,1.071,71,2.665,72,3.208,73,2.457,75,1.114,77,1.831,78,2.751,81,4.454,82,2.59,84,2.549,85,2.432,89,1.372,91,1.949,93,1.029,100,1.147,101,2.309,102,2.727,104,1.696,107,0.881,108,2.429,123,0.586,124,1.387,125,0.975,143,1.01,144,1.342,207,1.831,208,0.941,213,1.865,238,4.351,242,0.002,243,0.002,290,0.778,294,0.424,296,1.679,297,0.964,298,0.814,300,1.768,335,2.601,404,1.347,405,1.162,406,1.477,438,2.819,448,4.353,455,1.87,513,4.029,549,2.394,564,1.477,568,4.221,571,1.831,573,2.708,577,2.108,580,4.221,581,4.221,583,4.43,588,4.221,590,2.727,608,2.002,615,2.108,616,2.108,617,2.108,629,2.108,638,5.02,640,3.209,642,0.896,643,1.01,644,2.108,646,1.875,647,3.209,651,4.24,654,1.949,655,3.209,657,1.831,658,1.657,659,1.831,660,1.831,661,1.831,662,1.114,663,1.831,664,1.831,665,1.831,667,1.949,669,4.24,670,5.596,678,2.616,733,1.114,759,1.817,760,2.283,775,2.652,782,0.747,822,2.283,832,1.949,854,0.697,865,1.53,918,1.657,919,1.53,970,0.803,976,2.616,979,4.145,980,2.386,1023,3.633,1026,3.188,1050,1.277,1060,0.941,1067,1.188,1116,2.354,1329,1.43,1540,1.347,1579,1.114,1673,1.657,1710,1.736,1721,2.178,2027,2.518,2064,1.736,2092,1.477,2133,3.471,2241,3.476,2244,1.949,2245,2.108,2270,3.013,2279,4.09,2428,2.354,2446,2.354,2532,4.221,2749,3.642,2988,3.209,3232,2.108,3557,2.108,3567,5.669,4041,4.221,4100,2.108,4101,2.108,4213,2.108,4214,3.471,4215,2.108,4216,3.471,4217,2.108,4218,2.108,4414,4.424,4447,2.108,4455,2.108,4493,2.108,4745,3.471,4771,2.108,4773,2.108,5016,2.108,5017,3.869,5018,3.869,5019,3.869,5020,3.869,5021,3.869,5022,3.869,5023,5.715,5024,3.869,5025,3.869,5026,3.869,5027,3.869,5028,3.869,5029,3.869,5030,2.35,5031,2.35,5032,3.869,5033,2.35,5034,2.35,5035,3.869,5036,2.35,5037,3.869,5038,2.35,5039,5.715,5040,2.35,5041,3.869,5042,2.35,5043,3.869,5044,2.35,5045,3.869,5046,2.35,5047,2.35,5048,3.869,5049,2.35,5050,3.869,5051,2.35,5052,3.869,5053,2.35,5054,3.869,5055,2.35,5056,3.869,5057,2.35,5058,3.869,5059,2.35,5060,2.35,5061,2.35,5062,2.35,5063,2.35,5064,2.35,5065,2.35,5066,2.35,5067,2.35,5068,2.35,5069,4.931,5070,2.35,5071,2.35,5072,2.35,5073,2.35,5074,2.35,5075,2.35,5076,2.35,5077,2.35,5078,3.869,5079,2.35,5080,2.35,5081,2.35,5082,3.869,5083,3.869,5084,3.869,5085,2.35,5086,2.35,5087,2.35,5088,2.35,5089,2.35,5090,2.35,5091,2.35,5092,4.931,5093,2.35,5094,2.35,5095,2.35,5096,2.35,5097,2.35,5098,2.35,5099,2.35,5100,2.35,5101,2.35,5102,6.796,5103,2.35,5104,2.35,5105,3.869,5106,3.869,5107,3.869,5108,2.35,5109,2.35,5110,2.35,5111,2.35,5112,2.35,5113,7.185,5114,2.35,5115,2.35,5116,2.35,5117,2.35,5118,2.35,5119,2.35,5120,2.35,5121,2.35,5122,3.869,5123,2.35,5124,2.35,5125,2.35,5126,5.715,5127,3.869,5128,2.35,5129,2.35,5130,2.35,5131,2.35]],["title/modules/VoteModule.html",[244,1.282,287,3.698]],["body/modules/VoteModule.html",[3,0.061,4,0.061,5,0.055,15,0.005,16,0.101,19,0.889,24,1.955,54,0.068,55,0.23,59,2.009,242,0.004,243,0.004,244,2.142,246,2.541,247,3.295,252,3.295,253,2.625,254,2.582,257,3.47,258,3.597,278,5.854,287,7.56,289,3.47,304,3.146,331,4.581,333,3.024,334,3.592,339,5.091,340,4.777,526,2.288,728,1.853,1019,4.777,3693,7.07,3729,7.333,3730,6.079,5132,6.079,5133,6.776,5134,6.079,5135,6.079,5136,6.776,5137,6.776]],["title/injectables/VoteService.html",[17,0.865,3729,3.53]],["body/injectables/VoteService.html",[3,0.044,4,0.044,5,0.039,10,0.187,13,1.136,14,0.356,15,0.005,16,0.084,17,1.166,18,2.265,19,0.64,20,2.543,22,1.113,23,1.922,24,1.408,54,0.049,55,0.165,57,1.821,59,1.446,60,2.193,62,3.523,63,2.05,64,3.132,66,1.743,67,2.018,70,5.838,71,2.653,72,2.703,73,2.098,101,2.272,108,2.087,238,3.577,242,0.003,243,0.003,290,1.357,294,0.431,296,1.696,297,0.929,298,0.822,300,1.762,339,2.969,340,3.44,438,2.023,455,2.207,549,3.604,728,1.845,759,2.145,775,2.855,782,1.551,857,4.204,980,2.361,1293,2.361,1721,1.859,2002,4.047,3585,3.869,3586,3.44,3699,6.054,3713,6.823,3715,6.054,3729,4.756,3760,3.067,3767,4.562,3770,3.604,5138,4.378,5139,6.747,5140,6.747,5141,6.747,5142,4.879,5143,4.879,5144,6.747,5145,4.879,5146,6.747,5147,4.879,5148,4.879,5149,6.747,5150,4.879,5151,6.747,5152,4.879,5153,4.879,5154,4.879,5155,9.609,5156,7.734,5157,7.734,5158,4.879,5159,4.879,5160,4.879,5161,4.879,5162,4.879,5163,4.879]],["title/classes/VotedRepoDto.html",[55,0.17,3718,3.698]],["body/classes/VotedRepoDto.html",[3,0.06,4,0.06,5,0.054,6,3.606,10,0.255,11,1.24,13,0.727,14,0.394,15,0.005,16,0.09,54,0.083,55,0.305,89,1.597,208,2.664,213,1.602,238,4.384,242,0.004,243,0.004,294,0.394,339,5.477,340,4.688,438,3.43,503,1.794,507,1.703,511,0.917,512,2.576,515,1.904,518,3.376,519,0.959,521,2.055,522,1.146,571,5.18,728,2.261,733,4.462,740,5.384,857,4.892,942,5.18,943,4.658,1088,4.018,1525,3.525,2636,4.046,3713,7.545,3718,6.108,3727,6.648,4988,4.497,4989,5.516,4991,5.967,5164,6.65,5165,6.65,5166,6.65]],["title/coverage.html",[5167,5.698]],["body/coverage.html",[0,2.886,1,1.42,5,0.016,6,3.688,7,3.673,8,2.79,9,2.712,14,0.078,15,0.005,17,1.704,25,0.638,27,1.208,30,1.3,31,2.247,35,1.355,37,1.102,39,1.355,42,1.3,45,1.355,47,1.3,49,1.42,52,1.42,55,0.343,56,1.3,84,4.004,94,0.995,104,0.48,108,0.519,202,0.875,213,1.392,242,0.002,243,0.002,251,1.019,322,1.595,323,1.595,324,1.595,325,1.595,326,1.595,327,1.595,328,1.595,329,1.595,333,0.858,335,0.875,337,1.251,339,1.17,341,1.251,343,1.251,345,1.251,347,1.251,350,1.251,352,1.208,361,1.497,364,1.497,367,1.17,369,1.3,371,2.305,373,1.355,374,1.355,382,1.355,384,1.355,386,3.336,388,1.134,389,2.777,391,1.3,392,2.508,394,1.134,398,1.3,400,1.3,402,1.251,404,1.102,405,1.617,407,1.3,409,1.42,410,1.3,412,1.3,414,1.42,417,1.208,421,1.777,430,1.3,431,3.151,433,1.355,506,1.497,508,1.725,509,1.725,514,2.065,524,2.192,525,1.497,527,1.725,529,1.355,549,0.677,568,1.42,580,1.42,581,1.42,583,1.134,588,1.42,608,0.995,610,1.3,612,1.3,620,1.355,622,1.497,626,0.783,653,1.595,717,1.42,724,1.3,725,1.725,726,1.725,728,0.526,742,1.497,743,2.547,744,2.712,748,1.42,764,1.497,766,1.355,767,1.251,783,2.712,786,1.102,826,1.497,827,2.547,828,2.712,861,1.497,862,3.834,863,4.15,864,1.725,868,1.42,877,1.355,885,1.725,895,1.497,896,3.151,897,1.725,899,1.42,905,1.355,909,2.712,924,1.497,925,1.725,927,1.42,930,2.305,932,1.355,939,1.497,940,1.725,949,1.595,950,1.725,957,1.355,958,1.725,959,1.725,981,1.595,982,1.725,989,1.355,990,1.725,1013,1.355,1015,1.497,1020,3.323,1021,1.725,1023,0.972,1027,1.721,1030,1.42,1048,1.355,1053,1.42,1054,1.595,1055,4.273,1093,1.725,1117,1.725,1131,1.725,1140,2.712,1141,2.712,1144,1.355,1150,1.497,1151,1.725,1154,1.42,1161,1.355,1164,0.858,1166,0.858,1168,1.208,1170,3.277,1177,1.497,1178,1.725,1179,1.725,1186,1.42,1227,1.725,1243,2.125,1247,1.725,1248,2.712,1288,1.355,1289,1.725,1290,2.712,1316,1.42,1317,2.712,1318,2.712,1319,2.208,1323,1.251,1330,1.497,1331,2.712,1337,1.42,1338,1.725,1344,1.497,1345,1.725,1346,1.725,1351,1.497,1352,2.712,1353,2.712,1367,1.42,1368,1.725,1407,1.42,1408,1.725,1409,1.725,1418,1.355,1449,1.725,1469,1.725,1470,2.712,1511,1.725,1512,3.978,1524,0.745,1543,1.725,1551,1.725,1578,1.725,1624,2.712,1625,2.712,1644,1.725,1650,1.725,1655,1.725,1663,1.725,1671,1.725,1696,1.725,1710,1.42,1711,1.725,1712,2.712,1718,1.725,1748,2.712,1749,1.725,1784,1.725,1793,1.725,1819,1.725,1928,1.725,1931,1.725,1951,1.725,1968,1.725,1983,1.725,2001,1.725,2016,2.547,2017,1.725,2060,1.42,2061,1.725,2064,1.42,2065,1.725,2066,4.195,2067,1.725,2096,1.725,2137,1.725,2162,1.3,2163,2.712,2171,1.3,2176,1.42,2177,1.725,2179,1.725,2195,1.725,2211,1.725,2218,1.725,2241,1.355,2249,1.725,2269,1.725,2292,1.497,2293,1.725,2302,1.355,2315,1.725,2325,1.497,2326,1.725,2374,1.251,2379,1.42,2424,1.725,2471,1.595,2473,1.725,2474,1.725,2488,1.42,2489,1.725,2490,2.547,2518,1.355,2519,1.725,2532,1.42,2533,1.725,2534,2.712,2537,1.355,2541,3.718,2542,1.725,2548,2.712,2554,1.42,2555,1.725,2574,1.497,2575,1.725,2623,1.497,2624,1.725,2670,1.251,2704,1.725,2713,1.595,2728,1.497,2729,1.725,2748,1.42,2752,1.208,2763,1.3,2764,2.712,2765,1.725,2810,1.595,2811,2.547,2822,1.355,2823,1.355,2824,1.725,2828,1.251,2856,1.497,2857,1.497,2863,1.725,2898,1.497,2899,2.547,2904,1.355,2931,1.725,2951,1.725,2954,3.323,2955,1.725,2969,1.725,2978,2.712,2981,1.497,2989,1.497,2990,2.547,2991,1.725,3077,1.725,3101,1.725,3105,1.497,3106,1.725,3124,1.42,3129,1.355,3130,1.355,3147,1.497,3148,1.725,3154,1.355,3158,1.725,3171,1.725,3178,1.208,3194,1.355,3264,1.725,3274,1.725,3352,1.725,3353,1.725,3365,1.045,3376,1.497,3377,1.725,3380,1.17,3384,1.42,3405,1.595,3407,1.725,3440,3.151,3441,1.725,3468,1.725,3571,1.497,3572,1.725,3573,1.725,3606,1.355,3618,1.497,3619,1.725,3620,1.725,3645,1.355,3656,1.497,3657,1.725,3658,1.725,3683,1.355,3693,1.497,3694,1.725,3695,1.725,3718,1.42,3727,3.151,3729,1.355,3749,1.725,3778,1.725,3803,1.725,3836,1.355,3840,1.725,3854,1.42,3855,3.323,3858,2.712,3859,2.712,3870,1.595,3872,1.595,3945,1.725,3966,1.725,3967,1.725,4012,1.725,4015,1.725,4041,1.42,4042,1.725,4045,1.595,4046,1.725,4049,2.712,4053,1.497,4059,1.497,4060,3.718,4065,1.725,4099,1.725,4105,1.725,4109,1.497,4110,4.393,4111,1.725,4137,1.355,4157,1.725,4180,1.497,4181,1.725,4233,1.497,4234,1.725,4252,1.3,4253,1.725,4259,1.251,4291,1.497,4292,1.725,4318,1.497,4319,1.725,4401,1.725,4513,2.712,4514,1.725,4574,1.725,4620,1.497,4621,1.725,4676,1.355,4722,1.497,4727,1.595,4733,1.725,4814,1.725,4893,1.497,4894,1.497,4900,1.725,4908,1.725,4959,1.725,4960,1.725,4964,1.725,4988,2.211,4989,2.712,4996,1.42,5000,1.725,5016,1.725,5138,1.725,5167,1.595,5168,1.497,5169,1.922,5170,6.138,5171,1.922,5172,9.147,5173,10.116,5174,8.938,5175,2.712,5176,8.77,5177,7.862,5178,9.207,5179,1.725,5180,1.725,5181,5.643,5182,6.894,5183,7.862,5184,1.922,5185,1.922,5186,1.725,5187,1.725,5188,1.725,5189,1.725,5190,1.725,5191,1.725,5192,2.934,5193,1.725,5194,1.725,5195,2.934,5196,1.725,5197,1.725,5198,1.725,5199,1.725,5200,1.725,5201,8.036,5202,3.27,5203,1.725,5204,1.725,5205,1.725,5206,1.725,5207,1.922,5208,1.725,5209,4.267,5210,3.27,5211,1.922,5212,1.725,5213,1.922,5214,1.922,5215,1.595,5216,1.922,5217,1.922,5218,1.922,5219,1.922]],["title/miscellaneous/enumerations.html",[5220,2.711,5221,5.412]],["body/miscellaneous/enumerations.html",[6,2.067,10,0.198,15,0.005,31,3.129,33,5.461,34,5.178,37,5.405,90,4.02,92,4.942,94,3.628,96,3.911,108,1.892,182,5.178,208,2.808,242,0.003,243,0.003,297,0.744,392,2.605,420,2.629,642,3.512,643,3.962,862,2.178,1027,3.279,1032,4.564,1054,4.28,1055,5.344,1059,5.815,1060,4.276,1064,5.178,1072,3.545,1090,5.178,1091,5.815,1170,3.359,1189,6.655,1540,4.02,1632,4.942,1686,4.28,1825,5.815,1833,5.815,1855,4.564,1918,5.815,2066,3.139,2241,4.942,2246,6.29,2271,4.942,2324,5.815,2490,6.203,2512,4.564,2522,4.407,2811,4.019,2817,5.815,2818,5.815,2819,5.815,2820,5.815,2821,5.815,3252,6.29,3258,6.29,3440,3.811,3455,6.29,3456,5.461,3457,6.29,3458,6.29,3459,5.815,3460,5.815,3461,5.815,3462,5.815,3463,5.815,4727,4.28,4731,6.29,5215,5.815,5220,3.359,5221,4.629,5222,5.16,5223,5.16,5224,5.16,5225,7.011,5226,7.011,5227,7.011,5228,7.011,5229,4.629,5230,5.16,5231,4.629,5232,5.16,5233,4.629]],["title/miscellaneous/functions.html",[5220,2.711,5234,5.412]],["body/miscellaneous/functions.html",[10,0.312,15,0.004,242,0.004,243,0.004,5206,7.306,5208,8.804,5220,5.301,5234,7.306,5235,8.143]],["title/index.html",[10,0.16,5236,3.737,5237,3.455]],["body/index.html",[4,0.035,5,0.046,15,0.005,20,1.748,75,1.841,90,2.228,108,2.03,114,2.74,116,2.74,123,1.431,125,1.612,149,2.365,189,3.027,194,2.185,197,2.87,202,2.61,203,2.06,207,3.027,242,0.003,243,0.003,254,2.185,297,0.412,392,1.876,420,3.149,446,5.308,452,6.25,459,6.75,500,3.224,501,5.033,514,3.298,546,3.487,564,3.605,607,5.919,632,2.438,662,1.841,728,1.063,735,4.235,751,3.605,798,2.53,808,3.027,871,2.87,873,2.443,917,2.717,930,4.042,1044,2.53,1119,3.877,1157,4.235,1315,3.027,1364,5.656,1379,2.365,1397,4.577,1590,3.224,1602,3.224,1633,4.042,1651,3.487,1653,5.145,1678,2.87,1679,5.653,1740,2.74,1746,2.628,1842,3.027,1853,3.224,2078,7.533,2271,2.74,2493,2.74,2636,3.489,2705,5.86,3649,3.027,3826,3.487,3866,3.224,3873,5.86,3978,6.54,4063,3.487,4108,3.027,4282,6.25,5167,3.224,5168,3.027,5238,6.24,5239,3.886,5240,7.523,5241,3.886,5242,5.145,5243,3.886,5244,3.886,5245,9.88,5246,6.815,5247,3.487,5248,3.886,5249,3.886,5250,7.533,5251,3.886,5252,3.886,5253,3.886,5254,3.886,5255,6.815,5256,5.734,5257,5.734,5258,6.815,5259,3.886,5260,3.886,5261,5.734,5262,4.757,5263,5.734,5264,5.734,5265,3.487,5266,3.487,5267,5.734,5268,3.886,5269,3.886,5270,3.886,5271,3.886,5272,3.886,5273,3.886,5274,3.886,5275,3.886,5276,3.886,5277,3.886,5278,3.886,5279,3.886,5280,9.595,5281,8.396,5282,3.886,5283,3.886,5284,3.886,5285,6.75,5286,3.886,5287,3.886,5288,3.886,5289,3.886,5290,3.886,5291,7.523,5292,5.734,5293,5.734,5294,5.734,5295,5.734,5296,5.734,5297,3.886,5298,3.886,5299,3.886,5300,3.886,5301,3.886,5302,3.886,5303,3.886,5304,3.886,5305,3.886,5306,3.886,5307,6.815,5308,8.396,5309,3.886,5310,3.886,5311,3.886,5312,3.487,5313,8.684,5314,5.734,5315,3.886,5316,5.734,5317,3.886,5318,3.886,5319,5.734,5320,6.815,5321,3.886,5322,3.886,5323,3.886,5324,3.886,5325,3.886,5326,3.487,5327,3.886,5328,3.886,5329,3.886,5330,3.886,5331,3.886,5332,3.886,5333,5.734,5334,3.886,5335,5.734,5336,3.886,5337,9.255,5338,3.886,5339,3.487,5340,3.487,5341,3.487,5342,3.886,5343,5.734,5344,3.886,5345,7.523,5346,3.886,5347,3.886,5348,6.815,5349,3.487,5350,5.734,5351,3.886,5352,3.886,5353,3.886,5354,3.886,5355,3.886,5356,3.886,5357,3.886,5358,3.886,5359,3.886,5360,5.734,5361,3.886,5362,3.886,5363,5.145,5364,3.886,5365,3.886,5366,3.886,5367,3.886,5368,3.886,5369,3.886,5370,3.886,5371,3.886,5372,5.734,5373,3.886,5374,5.734,5375,3.886,5376,6.114,5377,3.886,5378,3.886,5379,3.487,5380,5.734,5381,3.886,5382,3.886,5383,3.886,5384,3.886,5385,3.886,5386,3.886,5387,3.886,5388,3.886,5389,3.886,5390,3.886,5391,5.145,5392,3.886,5393,3.886,5394,3.886,5395,3.886,5396,3.487,5397,3.886,5398,7.523,5399,3.886,5400,3.886,5401,3.886,5402,5.734,5403,3.886,5404,5.734,5405,5.734,5406,3.886,5407,5.734,5408,3.886,5409,3.487,5410,3.886,5411,3.886,5412,3.886,5413,3.886,5414,3.886,5415,3.886,5416,3.886,5417,3.886,5418,3.886,5419,3.886,5420,3.487,5421,3.886,5422,3.886,5423,3.886,5424,3.886,5425,3.886,5426,3.886,5427,3.487,5428,3.886,5429,3.886,5430,3.886,5431,3.886,5432,3.886,5433,3.886,5434,3.886,5435,5.734,5436,3.886,5437,3.886,5438,3.886,5439,3.886,5440,3.886,5441,2.87,5442,3.027]],["title/license.html",[5236,3.737,5237,3.455,5441,3.076]],["body/license.html",[15,0.004,242,0.004,243,0.004,254,2.602,420,2.56,873,4.292,1374,4.292,1397,4.154,1594,3.845,1601,5.318,1628,5.318,1853,5.663,2102,5.663,2281,5.663,2705,6.548,2712,6.126,3016,6.126,3923,6.126,4282,5.318,5168,5.318,5247,9.195,5339,7.542,5409,7.542,5441,5.042,5442,5.318,5443,9.108,5444,6.827,5445,8.406,5446,6.827,5447,6.827,5448,6.827,5449,6.827,5450,6.827,5451,6.827,5452,6.827,5453,6.827,5454,6.827,5455,6.827,5456,6.827,5457,6.827,5458,6.827,5459,6.827,5460,6.827,5461,6.827,5462,8.406,5463,6.827,5464,6.827,5465,6.827,5466,6.827,5467,6.827,5468,6.827,5469,8.406,5470,8.406,5471,6.827,5472,6.827,5473,6.827,5474,6.827,5475,6.827,5476,6.827,5477,6.827,5478,6.827,5479,6.827,5480,6.827,5481,6.827,5482,6.827,5483,6.827,5484,6.827,5485,6.827,5486,6.827,5487,6.827,5488,6.827,5489,6.827,5490,6.827,5491,6.827,5492,6.827,5493,6.827,5494,6.827]],["title/modules.html",[246,2.576]],["body/modules.html",[15,0.004,242,0.004,243,0.004,245,3.748,246,2.31,260,4.798,263,4.342,264,4.549,265,4.549,266,4.549,267,4.342,268,4.165,269,4.549,270,4.549,271,4.549,272,4.549,273,4.549,274,4.549,275,4.01,276,4.342,277,4.165,278,3.635,279,4.549,280,4.549,281,4.342,282,4.549,283,4.549,284,4.549,285,3.635,286,4.342,287,4.549,716,4.342,2923,4.798,3240,4.342,5495,10.649,5496,10.649,5497,10.649,5498,10.658,5499,5.527,5500,5.527]],["title/overview.html",[5501,5.698]],["body/overview.html",[2,2.04,15,0.005,56,5.197,100,0.819,143,1.188,194,1.053,242,0.002,243,0.002,245,5.243,246,1.036,247,1.737,248,2.478,249,2.478,250,2.478,251,4.074,252,1.737,253,1.07,254,1.053,260,8.058,261,2.478,262,2.478,263,6.714,264,5.895,265,5.895,266,5.073,267,5.418,268,5.397,269,5.073,270,6.478,271,4.066,272,5.073,273,6.878,274,5.895,275,5.357,276,6.438,277,6.611,278,5.327,279,5.895,280,5.895,281,5.418,282,6.478,283,5.895,284,6.578,285,5.962,286,5.801,287,5.895,507,0.707,526,0.755,608,3.977,610,5.197,612,5.197,620,5.418,626,3.132,712,2.478,713,2.478,714,2.478,715,2.478,716,5.418,717,5.676,766,5.418,776,2.478,777,2.478,778,2.478,782,0.878,786,4.407,877,3.881,905,3.881,932,3.881,957,5.418,989,5.418,1009,2.478,1010,2.478,1012,2.478,1013,5.418,1168,4.831,1220,2.478,1221,2.478,1222,2.478,1407,5.676,1418,3.881,1442,2.478,1443,2.478,1444,2.478,1861,2.478,2302,3.881,2310,2.478,2311,2.478,2374,5.493,2415,2.478,2417,2.478,2418,2.478,2471,2.291,2670,5.003,2752,4.831,2763,3.722,2823,5.418,2828,5.003,2851,2.478,2853,2.478,2854,2.478,2904,5.418,2909,2.478,2911,2.478,2912,2.478,2923,5.987,2924,2.478,2925,2.478,2926,2.478,2944,2.478,2945,2.478,2946,2.478,3070,2.478,3071,2.478,3072,2.478,3129,3.881,3130,5.418,3154,3.881,3178,5.017,3236,2.478,3237,2.478,3238,2.478,3239,2.478,3240,5.418,3365,4.586,3402,2.478,3403,2.478,3404,2.478,3446,2.478,3447,2.478,3449,2.478,3606,5.418,3645,5.418,3683,5.418,3729,5.418,3743,2.478,3744,2.478,3745,2.478,3772,2.478,3773,2.478,3775,2.478,3798,2.478,3799,2.478,3800,2.478,3833,2.478,3834,2.478,3835,2.478,3836,5.418,3851,2.478,3852,2.478,3854,4.642,3939,2.478,3941,2.478,3942,2.478,4137,3.881,4252,5.197,4259,3.584,4676,5.418,4717,2.478,4718,2.478,4720,2.478,4888,2.478,4890,2.478,4891,2.478,4992,2.478,4994,2.478,4995,2.478,4996,5.676,5132,2.478,5134,2.478,5135,2.478,5501,2.291,5502,2.762,5503,2.762,5504,2.762,5505,2.762]],["title/properties.html",[11,0.905,5506,4.165]],["body/properties.html",[11,1.125,15,0.005,20,2.285,242,0.004,243,0.004,313,5.537,420,3.336,522,1.039,607,5.285,730,6.57,953,5.069,1397,5.412,1621,6.219,2429,5.069,5238,6.219,5265,6.727,5441,5.537,5442,5.84,5499,6.727,5507,7.497,5508,7.497,5509,7.497,5510,7.497,5511,7.497,5512,7.497,5513,7.497,5514,6.727,5515,7.497,5516,7.497,5517,7.497,5518,7.497,5519,7.497,5520,7.497,5521,7.497,5522,7.497,5523,7.497,5524,7.497,5525,7.497]],["title/miscellaneous/typealiases.html",[5220,2.711,5526,6.032]],["body/miscellaneous/typealiases.html",[10,0.312,14,0.331,15,0.004,242,0.004,243,0.004,5175,6.755,5220,5.301,5527,8.143,5528,9.334,5529,7.306]],["title/miscellaneous/variables.html",[5220,2.711,5262,5.003]],["body/miscellaneous/variables.html",[3,0.024,8,1.335,10,0.104,11,0.405,13,0.678,14,0.176,15,0.005,63,1.961,66,0.998,67,0.55,69,0.973,84,1.012,93,2.974,101,1.407,108,2.055,123,2.351,137,2.354,144,1.503,149,1.643,184,3.592,203,3.6,213,1.201,242,0.002,243,0.002,253,1.046,322,3.592,323,3.592,324,3.592,325,3.592,326,3.592,327,3.592,328,3.592,329,3.592,392,2.741,420,1.012,438,1.796,444,4.832,446,4.832,448,2.354,450,3.885,452,3.373,455,1.417,457,1.903,463,3.885,495,2.928,496,3.592,498,1.994,501,5.016,514,2.095,522,0.751,529,1.903,549,1.526,564,1.697,572,5.352,573,1.279,604,1.082,653,2.24,662,1.279,708,2.103,759,1.377,798,1.758,800,1.205,807,4.592,808,2.103,822,4.008,843,1.994,845,2.24,849,1.8,854,2.149,857,3.94,873,3.9,917,1.279,922,2.296,941,1.548,956,1.994,1032,1.758,1039,2.24,1042,3.592,1044,4.038,1060,3.774,1119,2.928,1128,3.822,1164,1.933,1166,1.933,1191,1.229,1305,3.592,1315,2.103,1364,1.903,1375,2.103,1397,2.635,1412,2.422,1492,1.029,1633,1.903,1750,1.994,1812,2.422,1900,3.885,2027,2.819,2066,1.643,2106,2.422,2238,2.422,2241,3.053,2271,1.903,2281,3.592,2300,1.397,2361,2.24,2373,1.506,2479,3.885,2503,2.24,2569,3.885,2596,2.422,2636,2.635,2705,2.103,2713,3.592,2716,2.422,3194,3.053,3855,3.373,3858,2.24,3859,3.592,3870,3.592,3872,3.592,3873,2.103,3874,2.422,3875,2.422,3876,2.422,3877,2.422,3921,2.422,3978,2.103,4009,2.24,4056,1.994,4082,2.24,4121,3.885,5168,2.103,5175,2.24,5179,2.422,5180,3.885,5186,2.422,5187,3.885,5188,2.422,5189,2.422,5190,3.885,5191,2.422,5192,3.885,5193,3.885,5194,3.885,5195,2.422,5196,4.865,5197,2.422,5198,2.422,5199,2.422,5200,2.422,5203,2.422,5204,3.885,5205,3.885,5212,2.422,5215,3.592,5220,1.758,5229,2.422,5231,2.422,5233,2.422,5237,2.24,5238,6.566,5242,3.885,5250,2.422,5262,2.24,5266,2.422,5285,2.422,5312,3.885,5326,3.885,5340,3.885,5341,2.422,5349,2.422,5363,2.422,5376,3.885,5379,2.422,5391,4.865,5396,2.422,5420,2.422,5427,2.422,5441,1.994,5442,2.103,5500,2.422,5501,2.24,5514,2.422,5529,3.885,5530,2.7,5531,2.7,5532,2.7,5533,4.33,5534,4.33,5535,2.7,5536,2.7,5537,2.7,5538,2.7,5539,2.7,5540,2.7,5541,2.7,5542,2.7,5543,2.7,5544,2.7,5545,2.7,5546,2.7,5547,4.33,5548,2.7,5549,2.7,5550,4.33,5551,2.7,5552,2.7,5553,2.7,5554,2.7,5555,2.7,5556,2.7,5557,2.7,5558,7.616,5559,2.7,5560,2.7,5561,2.7,5562,2.7,5563,2.7,5564,2.7,5565,2.7,5566,2.7,5567,2.7,5568,2.7,5569,2.7,5570,2.7,5571,2.7,5572,6.204,5573,2.7,5574,2.7,5575,2.7,5576,2.7,5577,2.7,5578,4.33,5579,2.7,5580,2.7,5581,4.33,5582,2.7,5583,2.7,5584,4.33,5585,2.7,5586,4.33,5587,2.7,5588,4.33,5589,4.33,5590,2.7,5591,2.7,5592,4.33,5593,2.7,5594,2.7,5595,2.7,5596,2.7,5597,2.7,5598,2.7,5599,2.7,5600,2.7,5601,2.7,5602,2.7,5603,2.7,5604,2.7,5605,2.7,5606,2.7,5607,2.7,5608,2.7,5609,2.7,5610,2.7,5611,4.33,5612,2.7,5613,2.7,5614,2.7,5615,2.7,5616,2.7,5617,2.7,5618,2.7,5619,4.33,5620,2.7,5621,2.7,5622,2.7,5623,2.7,5624,2.7,5625,2.7,5626,2.7,5627,2.7,5628,2.7,5629,2.7,5630,2.7,5631,2.7,5632,2.7,5633,2.7,5634,2.7,5635,2.7,5636,2.7,5637,2.7,5638,2.7,5639,2.7,5640,2.7,5641,2.7,5642,2.7,5643,2.7,5644,2.7,5645,2.7,5646,2.7,5647,2.7,5648,2.7,5649,2.7,5650,4.33,5651,4.33,5652,2.7,5653,2.7,5654,2.7,5655,2.7,5656,5.422,5657,2.7,5658,2.7,5659,2.7,5660,2.7,5661,2.7,5662,4.33,5663,2.7,5664,2.7,5665,4.33,5666,2.7,5667,2.7,5668,2.7,5669,2.7,5670,2.7,5671,2.7,5672,4.33,5673,2.7,5674,2.7,5675,2.7,5676,2.7,5677,2.7,5678,2.7,5679,2.7,5680,2.7,5681,2.7,5682,2.7,5683,2.7,5684,2.7,5685,2.7,5686,2.7,5687,2.7,5688,2.7,5689,2.7,5690,2.7,5691,2.7,5692,2.7,5693,2.7,5694,2.7,5695,2.7,5696,2.7,5697,2.7,5698,6.204,5699,2.7,5700,2.7,5701,4.33,5702,2.7,5703,2.7,5704,2.7,5705,2.7,5706,6.791,5707,2.7,5708,4.33,5709,4.33,5710,4.33,5711,2.7,5712,2.7,5713,6.204,5714,2.7,5715,2.7,5716,2.7,5717,2.7,5718,2.7,5719,4.33,5720,2.7,5721,2.7,5722,5.422,5723,5.422,5724,4.33,5725,4.33,5726,2.7,5727,4.33,5728,2.7,5729,2.7,5730,4.33,5731,4.33,5732,4.33,5733,2.7,5734,2.7,5735,2.7,5736,2.7,5737,2.7,5738,2.7,5739,2.7,5740,2.7,5741,2.7,5742,2.7,5743,5.422,5744,2.7,5745,2.7,5746,2.7,5747,2.7,5748,2.7,5749,2.7,5750,2.7,5751,2.7,5752,2.7,5753,2.7,5754,2.7,5755,2.7,5756,2.7,5757,2.7,5758,2.7,5759,2.7,5760,2.7,5761,2.7,5762,2.7,5763,2.7,5764,2.7,5765,2.7,5766,6.204,5767,2.7,5768,2.7,5769,2.7,5770,2.7,5771,2.7,5772,2.7,5773,2.7,5774,2.7,5775,2.7,5776,2.7,5777,2.7,5778,2.7,5779,2.7,5780,2.7,5781,2.7,5782,2.7,5783,4.33,5784,4.33,5785,2.7,5786,2.7]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":84,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserListContributorStat.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.0.0",{"_index":5550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.7",{"_index":5564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":5173,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":5181,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":5210,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":5202,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":5214,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":5209,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":5213,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":5216,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":5217,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":5178,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":5171,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":5172,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":5174,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":5201,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":5183,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":5177,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":5182,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":5170,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1375,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["01t00:30:00z",{"_index":5781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["04",{"_index":1767,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["08",{"_index":1609,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["0e8a16",{"_index":1880,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1",{"_index":194,"title":{"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbSubscription.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"overview.html":{}}}],["1.50.0",{"_index":5508,"title":{},"body":{"properties.html":{}}}],["10",{"_index":854,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1032,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":1684,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":1069,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["1000).toisostring",{"_index":5666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10000",{"_index":5592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":5558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1045024650",{"_index":1870,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["11",{"_index":3816,"title":{},"body":{"injectables/StripeService.html":{}}}],["12237133",{"_index":1599,"title":{},"body":{"entities/DbContribution.html":{}}}],["12345",{"_index":1148,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{}}}],["12345678",{"_index":1528,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["123456789",{"_index":1937,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["133",{"_index":2247,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["133'})@column({type",{"_index":2233,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["13:24:51.000000",{"_index":1399,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":1603,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":1593,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1660,"title":{},"body":{"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1741,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":1377,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["15",{"_index":1585,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{}}}],["19",{"_index":1376,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["196",{"_index":1955,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["1})@column({type",{"_index":2047,"title":{},"body":{"entities/DbSubscription.html":{}}}],["2",{"_index":197,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["2.build",{"_index":5306,"title":{},"body":{"index.html":{}}}],["2/3",{"_index":5185,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":95,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["200",{"_index":5557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200\\`](https://developer.mozilla.org/en",{"_index":5739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2016",{"_index":1592,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["201\\`](https://developer.mozilla.org/en",{"_index":5744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["202",{"_index":3045,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["2022",{"_index":1608,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{}}}],["2023",{"_index":1374,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"license.html":{}}}],["204\\`](https://developer.mozilla.org/en",{"_index":5748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22:04:29.000000",{"_index":1620,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1858,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1863,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":1611,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["234343",{"_index":3445,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@isnumber",{"_index":3443,"title":{},"body":{"classes/RepoInfo.html":{}}}],["237133",{"_index":1669,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column('bigint",{"_index":2265,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn('bigint",{"_index":1664,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserRepo.html":{}}}],["24",{"_index":5664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":1738,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{}}}],["250",{"_index":1281,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":5326,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["25060:5432",{"_index":5321,"title":{},"body":{"index.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":1268,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["255",{"_index":1518,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{}}}],["26t23:55:49.204z",{"_index":1640,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["28",{"_index":1610,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["287",{"_index":1799,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["3.5",{"_index":5677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.run",{"_index":5318,"title":{},"body":{"index.html":{}}}],["30",{"_index":143,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["3000",{"_index":5561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":5341,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["31333",{"_index":1700,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31st",{"_index":3212,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["32",{"_index":2234,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["34",{"_index":5502,"title":{},"body":{"overview.html":{}}}],["36",{"_index":5503,"title":{},"body":{"overview.html":{}}}],["365",{"_index":5301,"title":{},"body":{"index.html":{}}}],["4",{"_index":1861,"title":{},"body":{"entities/DbPullRequest.html":{},"overview.html":{}}}],["400",{"_index":2724,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["400\\`](https://developer.mozilla.org/en",{"_index":5755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401\\`](https://developer.mozilla.org/en",{"_index":5762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403\\`](https://developer.mozilla.org/en",{"_index":5767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404\\`](https://developer.mozilla.org/en",{"_index":5770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["42211",{"_index":947,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":2054,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":1298,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":4991,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["429",{"_index":5718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["429\\`](https://developer.mozilla.org/en",{"_index":5773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["43",{"_index":5504,"title":{},"body":{"overview.html":{}}}],["43311",{"_index":2226,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["4456742596",{"_index":1876,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["498",{"_index":1670,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":1666,"title":{},"body":{"entities/DbCustomer.html":{}}}],["5",{"_index":1855,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":4962,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":4083,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":1067,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{}}}],["500",{"_index":1704,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["5000",{"_index":5712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5432",{"_index":5328,"title":{},"body":{"index.html":{}}}],["5736810",{"_index":1312,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":1301,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["57568598",{"_index":1561,"title":{},"body":{"entities/DbCommits.html":{}}}],["59",{"_index":5505,"title":{},"body":{"overview.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443",{"_index":988,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@column({type",{"_index":1569,"title":{},"body":{"entities/DbCommits.html":{}}}],["5e7c6c7af42d38c57f363c564c58007da448c443'})@isstring",{"_index":986,"title":{},"body":{"classes/CommitsDto.html":{}}}],["60",{"_index":5665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60].map(async",{"_index":3142,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["612",{"_index":1893,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["66",{"_index":5184,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":141,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["71359796",{"_index":1525,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["78133",{"_index":1313,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":1303,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":1328,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":1270,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["80",{"_index":5684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8080:3001",{"_index":5374,"title":{},"body":{"index.html":{}}}],["81233",{"_index":948,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["82",{"_index":127,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["86400000).toisostring",{"_index":181,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["90",{"_index":1138,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{}}}],["90'])@isint()@isoptional",{"_index":1082,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["9876543",{"_index":1567,"title":{},"body":{"entities/DbCommits.html":{}}}],["_stripe",{"_index":3804,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":2340,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["above",{"_index":5468,"title":{},"body":{"license.html":{}}}],["accept",{"_index":4063,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"index.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":4061,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":2072,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1798,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1794,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":4122,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1750,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":2492,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{}}}],["accessroles",{"_index":2781,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["action",{"_index":5489,"title":{},"body":{"license.html":{}}}],["active",{"_index":37,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":2049,"title":{},"body":{"entities/DbSubscription.html":{}}}],["active_pull_requests\".\"updated_at",{"_index":3531,"title":{},"body":{"injectables/RepoService.html":{}}}],["activecount",{"_index":165,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder",{"_index":162,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.getcount",{"_index":166,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["activecountquerybuilder.innerjoin",{"_index":163,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["actual",{"_index":5276,"title":{},"body":{"index.html":{}}}],["add",{"_index":2636,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["addafeaturedhighlight",{"_index":2635,"title":{},"body":{"controllers/HighlightController.html":{}}}],["addbearerauth",{"_index":5645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcustomer",{"_index":1450,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":3807,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":1456,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1842,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["addfeatured",{"_index":4402,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addfeatured(highlightid",{"_index":4417,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"author_login",{"_index":3334,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addgroupby(\"emoji_id",{"_index":4499,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addhighlightforuser",{"_index":4339,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":4321,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":4330,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":2864,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":2871,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":4322,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(@body",{"_index":4587,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":4338,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":4576,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":2766,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":4518,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":2775,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":2825,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":2831,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":5776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additions",{"_index":1820,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addlistforuser",{"_index":4623,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(@body",{"_index":4682,"title":{},"body":{"controllers/UserListController.html":{}}}],["addlistforuser(createuserlistdto",{"_index":4633,"title":{},"body":{"controllers/UserListController.html":{}}}],["addmemberforinsight",{"_index":4520,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":1109,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":1111,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":3316,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":3542,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":3549,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"updated_at",{"_index":3336,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["address",{"_index":5709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adds",{"_index":3598,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["addselect",{"_index":81,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["addselect(\"array_agg(users.login",{"_index":4496,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"count(emoji_id",{"_index":4495,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"count(pr.id",{"_index":199,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":2804,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"max(pull_requests.updated_at",{"_index":3333,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":5161,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":3322,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":3324,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"split_part(repos.full_name",{"_index":196,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":4283,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"user_orgs.user_id",{"_index":3563,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(\"users.login",{"_index":3562,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["addselect(\"users.name",{"_index":2802,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect((qb",{"_index":3510,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(`${interval}::integer",{"_index":3225,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addserver(`https://${apidomain",{"_index":5631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://alpha.${apidomain",{"_index":5634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(`https://beta.${apidomain",{"_index":5632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addusercollaboration",{"_index":4113,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":4117,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":4162,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":4254,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":4262,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":4909,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":4917,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":4403,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":4419,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":4910,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(highlightid",{"_index":4919,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":4404,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":4421,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreactionnotification",{"_index":4911,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreactionnotification(userid",{"_index":4921,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserlist",{"_index":4734,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlist(userid",{"_index":4748,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor",{"_index":4735,"title":{},"body":{"injectables/UserListService.html":{}}}],["adduserlistcontributor(listid",{"_index":4750,"title":{},"body":{"injectables/UserListService.html":{}}}],["addusernotification",{"_index":4912,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":4923,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":5001,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":5005,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":5401,"title":{},"body":{"index.html":{}}}],["admin",{"_index":4056,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":4091,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":5387,"title":{},"body":{"index.html":{}}}],["ai.module",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/PullRequestModule.html":{}}}],["ai.module.ts",{"_index":2947,"title":{},"body":{"modules/OpenAiModule.html":{}}}],["ai.service",{"_index":795,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["ai.service.ts",{"_index":828,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["ai.service.ts:10",{"_index":2949,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai.service.ts:13",{"_index":2950,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai/open",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["alias",{"_index":3492,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":5527,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":3495,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":3497,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":3496,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":3498,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_contributions",{"_index":12,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["all_prs",{"_index":1795,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allcontributionscount",{"_index":1,"title":{"interfaces/AllContributionsCount.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["allof",{"_index":5573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow_promotion_codes",{"_index":3823,"title":{},"body":{"injectables/StripeService.html":{}}}],["allowed",{"_index":5710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alpha",{"_index":5635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":3585,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["alumni",{"_index":182,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["alumnicount",{"_index":175,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder",{"_index":172,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.getcount",{"_index":176,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["alumnicountquerybuilder.innerjoin",{"_index":173,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["america/los_angeles",{"_index":2062,"title":{},"body":{"classes/DbTimezone.html":{}}}],["analyze",{"_index":810,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["and/or",{"_index":5460,"title":{},"body":{"license.html":{}}}],["ands",{"_index":2344,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere",{"_index":3557,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["andwhere(\"insight_members.access",{"_index":2801,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":2800,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":3792,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":3764,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":3959,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":5163,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":4278,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":4280,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":4503,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":4502,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_list_contributors.list_id",{"_index":79,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":4937,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"users.timezone",{"_index":4813,"title":{},"body":{"injectables/UserListService.html":{}}}],["andwhere(`\"current_month_prs\".\"author_login",{"_index":239,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["andwhere(`'${startdate}'::timestamp",{"_index":3321,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["andwhere(`(expired_at",{"_index":1241,"title":{},"body":{"injectables/CouponService.html":{}}}],["andwhere(`pull_requests.updated_at",{"_index":3345,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repo\".\"topics",{"_index":3556,"title":{},"body":{"injectables/RepoService.html":{}}}],["any(\"repos\".\"topics",{"_index":3422,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":3435,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":802,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["anytime",{"_index":5655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":5238,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":5193,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.connection",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":5242,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":5375,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["api_domain=your_api_domainreplace",{"_index":5271,"title":{},"body":{"index.html":{}}}],["apiacceptedresponse",{"_index":3035,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apibadrequestresponse",{"_index":761,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["apibearerauth",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apibody",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["apiconfig",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":3605,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":59,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidomain",{"_index":5619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apidomain}](https://${apidomain",{"_index":5705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(pagedto",{"_index":5571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":1537,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1545,"title":{},"body":{"entities/DbCommitAuthors.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":1597,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":1557,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1520,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apikey",{"_index":5672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":1534,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":1514,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({type",{"_index":2150,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["apimodelpropertyoptional",{"_index":1619,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":1587,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse",{"_index":1164,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbbakedrepo",{"_index":3049,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommitauthors",{"_index":3058,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcommits",{"_index":3065,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":3370,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":2307,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":2389,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":4585,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":4545,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":3133,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbpullrequestcontributor",{"_index":1175,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":3397,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse(dbuser",{"_index":4701,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":4142,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":2677,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":2689,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apipaginatedresponse(dbuserlistcontributor",{"_index":4705,"title":{},"body":{"controllers/UserListController.html":{}}}],["apipaginatedresponse(dbuserlistcontributorstat",{"_index":4849,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["apiparam",{"_index":2668,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["apiproperty",{"_index":518,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({description",{"_index":512,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({type",{"_index":1125,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":1086,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":2527,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":1078,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":1062,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":1068,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":2496,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apiservicesmodule",{"_index":245,"title":{"modules/ApiServicesModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["apitags",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitags(\"authentication",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"blog",{"_index":770,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["apitags(\"contributors",{"_index":1173,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apitags(\"emojis",{"_index":2306,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":2382,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":2592,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":2675,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":2755,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"issue",{"_index":2906,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["apitags(\"pizza",{"_index":3041,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["apitags(\"pull",{"_index":880,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":3368,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":3878,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":4141,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitoken",{"_index":2481,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":2747,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":4541,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":3815,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":5340,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":5661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enablecors",{"_index":5624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.enableversioning",{"_index":5625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.flushlogs",{"_index":5623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.uselogger(app.get(logger",{"_index":5622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":5336,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":847,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["applies",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoFilterService.html":{}}}],["apply",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["applyactivecontributorsfilter",{"_index":229,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyactivecontributorsfilter(querybuilder",{"_index":4868,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter",{"_index":241,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applyalumnicontributorsfilter(querybuilder",{"_index":4870,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applycoupon",{"_index":5017,"title":{},"body":{"injectables/UserService.html":{}}}],["applycoupon(id",{"_index":5032,"title":{},"body":{"injectables/UserService.html":{}}}],["applycouponforuser",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(@userid",{"_index":707,"title":{},"body":{"controllers/AuthController.html":{}}}],["applycouponforuser(userid",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{}}}],["applydecorators",{"_index":5570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applynewcontributorsfilter",{"_index":240,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["applynewcontributorsfilter(querybuilder",{"_index":4872,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["applypagination",{"_index":2979,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["applypagination(undefined",{"_index":2980,"title":{},"body":{"injectables/PagerService.html":{}}}],["applyquerybuilderfilters",{"_index":3408,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":3410,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyusercoupondto",{"_index":506,"title":{"classes/ApplyUserCouponDto.html":{}},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["applyusercoupondto.couponcode",{"_index":711,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":260,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1950,"title":{},"body":{"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["approved'})@column('text",{"_index":1946,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["apt",{"_index":2915,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":1910,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":5493,"title":{},"body":{"license.html":{}}}],["array",{"_index":941,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":4589,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["asc",{"_index":2324,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":5411,"title":{},"body":{"index.html":{}}}],["assignee",{"_index":1844,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1821,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1822,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":1628,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbUserListContributorStat.html":{},"license.html":{}}}],["async",{"_index":67,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":722,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":354,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/dtos/user",{"_index":5061,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/supabase.guard",{"_index":762,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["auth/supabase.user.decorator",{"_index":2669,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authcontroller",{"_index":525,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":4016,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":4019,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authentication",{"_index":5765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":4013,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":4014,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":263,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":953,"title":{},"body":{"classes/CommitAuthorDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"controllers/PizzaOvenController.html":{},"properties.html":{}}}],["author/:id",{"_index":3068,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author/:id')@apioperation({operationid",{"_index":3026,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["author_avatar",{"_index":1823,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_email",{"_index":951,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["author_login",{"_index":232,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["authorization",{"_index":844,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["authorized",{"_index":2736,"title":{},"body":{"controllers/InsightController.html":{},"injectables/UserListService.html":{}}}],["authors",{"_index":3016,"title":{},"body":{"controllers/PizzaOvenController.html":{},"license.html":{}}}],["authors.service",{"_index":3038,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["authors.service.ts",{"_index":959,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"coverage.html":{}}}],["authors.service.ts:11",{"_index":963,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:18",{"_index":965,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:24",{"_index":967,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors.service.ts:35",{"_index":969,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["authors/:id",{"_index":3053,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/:id')@apioperation({operationid",{"_index":3004,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list",{"_index":3057,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authors/list')@apioperation({operationid",{"_index":3015,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["authuser${relation",{"_index":3538,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":3539,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":5500,"title":{},"body":{"modules.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":1845,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["average",{"_index":2502,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["await",{"_index":101,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["aws:main",{"_index":1923,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1907,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["back",{"_index":1813,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["backend",{"_index":5512,"title":{},"body":{"properties.html":{}}}],["badrequestexception",{"_index":760,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["bake",{"_index":2842,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{}}}],["baked",{"_index":1523,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{}}}],["baked_repo",{"_index":1552,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits",{"_index":1576,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo.commits)@joincolumn({name",{"_index":1558,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repo_id",{"_index":1553,"title":{},"body":{"entities/DbCommits.html":{}}}],["baked_repos",{"_index":1539,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["bakedreporepository",{"_index":3082,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakeoptionsinfo",{"_index":3034,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["bakerepodto",{"_index":724,"title":{"classes/BakeRepoDto.html":{}},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["bakerepoinfo",{"_index":2844,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.url",{"_index":3094,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["bakerepoinfo.wait",{"_index":3095,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["baking",{"_index":737,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["base",{"_index":5704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":902,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserRecommendationController.html":{}}}],["baseentity",{"_index":1530,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":3469,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(startdate",{"_index":3477,"title":{},"body":{"injectables/RepoService.html":{}}}],["baselistcontributorquerybuilder",{"_index":4736,"title":{},"body":{"injectables/UserListService.html":{}}}],["basequerybuilder",{"_index":62,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["baseuserquerybuilder",{"_index":4737,"title":{},"body":{"injectables/UserListService.html":{}}}],["bdougie",{"_index":1363,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column('text",{"_index":1891,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["bdougie'})@column({type",{"_index":2111,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{}}}],["bdougie'})@isstring",{"_index":1360,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":3248,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["bearer",{"_index":845,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":5257,"title":{},"body":{"index.html":{}}}],["being",{"_index":5350,"title":{},"body":{"index.html":{}}}],["below",{"_index":798,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["beneficial",{"_index":5351,"title":{},"body":{"index.html":{}}}],["beta",{"_index":5633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beta.api.opensauced.pizza",{"_index":5243,"title":{},"body":{"index.html":{}}}],["between",{"_index":227,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["bigint",{"_index":1563,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":3821,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":5248,"title":{},"body":{"index.html":{}}}],["bio",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["bits",{"_index":5397,"title":{},"body":{"index.html":{}}}],["block",{"_index":1080,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["blocks",{"_index":3205,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["blog",{"_index":764,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["blog'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":754,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blog_post",{"_index":1389,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["blogmarkdown",{"_index":1249,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["blogs",{"_index":745,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["blogs/issue",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["blogsummarycontroller",{"_index":742,"title":{"controllers/BlogSummaryController.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"coverage.html":{}}}],["blogsummarymodule",{"_index":264,"title":{"modules/BlogSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["blogsummaryservice",{"_index":766,"title":{"injectables/BlogSummaryService.html":{}},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"coverage.html":{},"overview.html":{}}}],["blogtitle",{"_index":1250,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{}}}],["body",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["body.interests",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":733,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{}}}],["bootstrap",{"_index":5208,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["boxes",{"_index":2573,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":1602,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"index.html":{}}}],["break",{"_index":116,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["brian",{"_index":1714,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":5498,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":5495,"title":{},"body":{"modules.html":{}}}],["bufferlogs",{"_index":5617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bug",{"_index":2568,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["bugs",{"_index":5521,"title":{},"body":{"properties.html":{}}}],["build",{"_index":5308,"title":{},"body":{"index.html":{}}}],["builder",{"_index":64,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builder/selectquerybuilder",{"_index":2984,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["builds",{"_index":5372,"title":{},"body":{"index.html":{}}}],["business",{"_index":5359,"title":{},"body":{"index.html":{}}}],["c",{"_index":5444,"title":{},"body":{"license.html":{}}}],["ca",{"_index":460,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["call",{"_index":5735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canaccess",{"_index":4547,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":2475,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":2478,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":2030,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":2018,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":2019,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":3829,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":2034,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":2020,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":4552,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":2767,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":2779,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["card",{"_index":3820,"title":{},"body":{"injectables/StripeService.html":{}}}],["case",{"_index":114,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["catch",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["category",{"_index":4830,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["certificate",{"_index":5589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certificates",{"_index":5291,"title":{},"body":{"index.html":{}}}],["certificates:for",{"_index":5287,"title":{},"body":{"index.html":{}}}],["changed",{"_index":1854,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":1824,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changes",{"_index":5393,"title":{},"body":{"index.html":{}}}],["channel",{"_index":5434,"title":{},"body":{"index.html":{}}}],["character",{"_index":1516,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{}}}],["characters",{"_index":801,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":5449,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":826,"title":{"interfaces/ChatResponse.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["check",{"_index":501,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["check/insert",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkadduser",{"_index":5018,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":5035,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkin",{"_index":5406,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout.session.completed",{"_index":3874,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":3933,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":3938,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":3935,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":3936,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":2782,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":4303,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["chinese",{"_index":1264,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":829,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["chore",{"_index":2566,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["churned",{"_index":1190,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["cito",{"_index":5338,"title":{},"body":{"index.html":{}}}],["claim",{"_index":5486,"title":{},"body":{"license.html":{}}}],["class",{"_index":55,"title":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["classes",{"_index":507,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbFilteredUser.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"overview.html":{}}}],["clc",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":2726,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":1506,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":2723,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":5576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["cli_split_kwargs",{"_index":1925,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1905,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":5418,"title":{},"body":{"index.html":{}}}],["clickable",{"_index":5702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cliduration",{"_index":2713,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":5514,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":729,"title":{},"body":{"classes/BakeRepoDto.html":{},"entities/DbBakedRepo.html":{}}}],["clone_url",{"_index":1513,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["close",{"_index":1857,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1918,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1903,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":1825,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed_pull_requests\".\"updated_at",{"_index":3526,"title":{},"body":{"injectables/RepoService.html":{}}}],["cluster_apiservicesmodule",{"_index":248,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_exports",{"_index":249,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_providers",{"_index":250,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":712,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":715,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":714,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":713,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule",{"_index":776,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_exports",{"_index":778,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_blogsummarymodule_imports",{"_index":779,"title":{},"body":{"modules/BlogSummaryModule.html":{}}}],["cluster_blogsummarymodule_providers",{"_index":777,"title":{},"body":{"modules/BlogSummaryModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":1009,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":1012,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":1011,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":1010,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributormodule",{"_index":1214,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_contributormodule_imports",{"_index":1215,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_couponmodule",{"_index":1220,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_exports",{"_index":1221,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_couponmodule_providers",{"_index":1222,"title":{},"body":{"modules/CouponModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":1442,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":1444,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":1443,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":2310,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":2311,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":2415,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":2417,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":2416,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":2418,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":2698,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":2699,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":2851,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":2853,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":2852,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":2854,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule",{"_index":2909,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_exports",{"_index":2911,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_issuesummarymodule_imports",{"_index":2910,"title":{},"body":{"modules/IssueSummaryModule.html":{}}}],["cluster_issuesummarymodule_providers",{"_index":2912,"title":{},"body":{"modules/IssueSummaryModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":2924,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":2925,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":2926,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_openaimodule",{"_index":2944,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_exports",{"_index":2945,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_providers",{"_index":2946,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule",{"_index":3070,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_exports",{"_index":3071,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pizzaovenmodule_imports",{"_index":3073,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["cluster_pizzaovenmodule_providers",{"_index":3072,"title":{},"body":{"modules/PizzaOvenModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":3236,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":3237,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":3239,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":3238,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":3402,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":3403,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":3404,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":3446,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":3447,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":3448,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":3449,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":3772,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":3773,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":3774,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":3775,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":3743,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":3744,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":3746,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":3745,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":3798,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":3800,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":3799,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":3833,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":3834,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":3835,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":3851,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":3852,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":3853,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":3939,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":3941,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":3940,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":3942,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_userlistmodule",{"_index":4717,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_exports",{"_index":4718,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_userlistmodule_imports",{"_index":4719,"title":{},"body":{"modules/UserListModule.html":{}}}],["cluster_userlistmodule_providers",{"_index":4720,"title":{},"body":{"modules/UserListModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":4888,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":4890,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":4889,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":4891,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":4992,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":4994,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_imports",{"_index":4993,"title":{},"body":{"modules/UserReposModule.html":{}}}],["cluster_userreposmodule_providers",{"_index":4995,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":5132,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":5134,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":5133,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":5135,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cn=localhost\"please",{"_index":5304,"title":{},"body":{"index.html":{}}}],["coalesce(avg((\"pull_requests\".\"merged_at\"::date",{"_index":4803,"title":{},"body":{"injectables/UserListService.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":3521,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(count(\"pull_requests\".\"id",{"_index":91,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["coalesce(count(\"user_follows\".\"id",{"_index":5082,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_highlights\".\"id",{"_index":5079,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_notifications\".\"id",{"_index":5071,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(sum(\"pull_requests\".\"commits",{"_index":83,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["code",{"_index":514,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":874,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{}}}],["code'})@column({type",{"_index":1737,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":920,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["codeexplanationcontroller",{"_index":861,"title":{"controllers/CodeExplanationController.html":{}},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codeexplanationservice",{"_index":877,"title":{"injectables/CodeExplanationService.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codename",{"_index":5545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":895,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["coderefactorsuggestionservice",{"_index":905,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codes",{"_index":5731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["codetestsuggestioncontroller",{"_index":924,"title":{"controllers/CodeTestSuggestionController.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codetestsuggestionservice",{"_index":932,"title":{"injectables/CodeTestSuggestionService.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["collaborate",{"_index":1356,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":2079,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":1354,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":4119,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4134,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":4898,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":4111,"title":{},"body":{"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["collaboration.controller.ts:110",{"_index":4135,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:137",{"_index":4131,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:55",{"_index":4128,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:74",{"_index":4124,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":4139,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":1353,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"coverage.html":{}}}],["collaboration.dto.ts:11",{"_index":1361,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":4062,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":1359,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":2067,"title":{},"body":{"entities/DbUserCollaboration.html":{},"coverage.html":{}}}],["collaboration.entity.ts:103",{"_index":2087,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:113",{"_index":2075,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:123",{"_index":2082,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:133",{"_index":2073,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:29",{"_index":2076,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:37",{"_index":2091,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:45",{"_index":2085,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:53",{"_index":2089,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:61",{"_index":2084,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:72",{"_index":2081,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:83",{"_index":2086,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:93",{"_index":2074,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":4138,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":4157,"title":{},"body":{"injectables/UserCollaborationService.html":{},"coverage.html":{}}}],["collaboration.service.ts:12",{"_index":4160,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:19",{"_index":4164,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:25",{"_index":4166,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:39",{"_index":4163,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:43",{"_index":4169,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:47",{"_index":4168,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:51",{"_index":4165,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":4149,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":2068,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":4126,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaborator's",{"_index":2203,"title":{},"body":{"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{}}}],["collaboratorsdto",{"_index":939,"title":{"classes/CollaboratorsDto.html":{}},"body":{"classes/CollaboratorsDto.html":{},"controllers/UserListController.html":{},"coverage.html":{}}}],["collection",{"_index":1040,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["color",{"_index":1879,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorado",{"_index":2515,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["colorado'})@isstring()@isoptional",{"_index":2498,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["colorize",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":1531,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":2134,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1920,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1917,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1919,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1884,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["columns",{"_index":2158,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":1355,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":5313,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1305,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"miscellaneous/variables.html":{}}}],["comments",{"_index":1342,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbUserListContributorStat.html":{},"injectables/IssueSummaryService.html":{}}}],["commit",{"_index":952,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commit_author",{"_index":1554,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits",{"_index":1577,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author.commits)@joincolumn({name",{"_index":1565,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_author_email",{"_index":1544,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_author_id",{"_index":1555,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_authors",{"_index":1550,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commit_authors.entity",{"_index":1575,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_date",{"_index":1556,"title":{},"body":{"entities/DbCommits.html":{}}}],["commit_hash",{"_index":983,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["commitauthordto",{"_index":949,"title":{"classes/CommitAuthorDto.html":{}},"body":{"classes/CommitAuthorDto.html":{},"coverage.html":{}}}],["commitauthorservice",{"_index":3042,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["commitauthorsrepository",{"_index":964,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["commitauthorsservice",{"_index":957,"title":{"injectables/CommitAuthorsService.html":{}},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{},"overview.html":{}}}],["commitmessages",{"_index":2556,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["commits",{"_index":90,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbPullRequest.html":{},"entities/DbUserListContributorStat.html":{},"controllers/PizzaOvenController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["commits.baked_repo",{"_index":1521,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["commits.commit_author",{"_index":1547,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["commits.entity",{"_index":1538,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{}}}],["commits.service",{"_index":3039,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["commitsdto",{"_index":981,"title":{"classes/CommitsDto.html":{}},"body":{"classes/CommitsDto.html":{},"coverage.html":{}}}],["commitsrepository",{"_index":996,"title":{},"body":{"injectables/CommitsService.html":{}}}],["commitsservice",{"_index":989,"title":{"injectables/CommitsService.html":{}},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{},"overview.html":{}}}],["committing",{"_index":5388,"title":{},"body":{"index.html":{}}}],["common",{"_index":5730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common/constants/order",{"_index":1101,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1165,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["common/dtos/filter",{"_index":3126,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":970,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{}}}],["common/dtos/page.dto",{"_index":26,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["common/filters/repo",{"_index":3192,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["common/services/api",{"_index":2420,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["common/services/pager.service",{"_index":972,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["common/util/datetimes",{"_index":3195,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["communication",{"_index":5289,"title":{},"body":{"index.html":{}}}],["community",{"_index":5427,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["company",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":5408,"title":{},"body":{"index.html":{}}}],["completion",{"_index":816,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["completionsurl",{"_index":5679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":5515,"title":{},"body":{"properties.html":{}}}],["component",{"_index":5366,"title":{},"body":{"index.html":{}}}],["computed",{"_index":1803,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["condition",{"_index":5738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":5467,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":5642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":3971,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["conflictexception",{"_index":3760,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":4555,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":3767,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["connected_at",{"_index":5106,"title":{},"body":{"injectables/UserService.html":{}}}],["connection",{"_index":2281,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"openai",{"_index":824,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["consolelogger",{"_index":1410,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":1417,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":63,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":2974,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":57,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(bakedreporepository",{"_index":3079,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["constructor(commitauthorsrepository",{"_index":962,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["constructor(commitsrepository",{"_index":994,"title":{},"body":{"injectables/CommitsService.html":{}}}],["constructor(configservice",{"_index":2476,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":1416,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":1095,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(couponrepository",{"_index":1230,"title":{},"body":{"injectables/CouponService.html":{}}}],["constructor(customerrepository",{"_index":1453,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":1118,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":2316,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":2430,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":2771,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":2827,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":2868,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":2933,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":1479,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(openaiservice",{"_index":785,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["constructor(prinsightrepository",{"_index":3177,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(private",{"_index":771,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["constructor(pullrequestrepository",{"_index":3285,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(pullrequestreviewrepository",{"_index":3266,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["constructor(reporepository",{"_index":3474,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":3781,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":3752,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":3948,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":5142,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":3842,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":1029,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":4159,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":4258,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":4413,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(userlistcontributorrepository",{"_index":4866,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["constructor(userlistrepository",{"_index":4744,"title":{},"body":{"injectables/UserListService.html":{}}}],["constructor(usernotificationrepository",{"_index":4914,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userreporepository",{"_index":5002,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":5030,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v1",{"_index":505,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":4086,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":5281,"title":{},"body":{"index.html":{}}}],["content",{"_index":812,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["context",{"_index":495,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":5784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":5490,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1651,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contributed",{"_index":1584,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["contributing",{"_index":1653,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"index.html":{}}}],["contribution",{"_index":1590,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"index.html":{}}}],["contribution.entity",{"_index":1016,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":1017,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":265,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":1059,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":1061,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpagemetadto",{"_index":49,"title":{"classes/ContributionPageMetaDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["contributionpageoptionsdto",{"_index":1053,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":1097,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":200,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributions'})@apibadrequestresponse({description",{"_index":4833,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributions.controller",{"_index":1018,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":3353,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:24",{"_index":3364,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:41",{"_index":3361,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":3509,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":3459,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":1013,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributionspagedto",{"_index":52,"title":{"classes/ContributionsPageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsPageDto.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["contributionspagemetadto",{"_index":50,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["contributionstimeframedto",{"_index":39,"title":{"classes/ContributionsTimeframeDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["contributor",{"_index":31,"title":{"classes/Contributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.controller",{"_index":1217,"title":{},"body":{"modules/ContributorModule.html":{}}}],["contributor.dto",{"_index":1171,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["contributor.dto.ts",{"_index":1928,"title":{},"body":{"classes/DbPullRequestContributor.html":{},"coverage.html":{}}}],["contributor.dto.ts:14",{"_index":1930,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:8",{"_index":1929,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.entity",{"_index":29,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["contributor.entity.ts",{"_index":2195,"title":{},"body":{"entities/DbUserListContributor.html":{},"coverage.html":{}}}],["contributor.entity.ts:27",{"_index":2200,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:35",{"_index":2205,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:42",{"_index":2202,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:49",{"_index":2209,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:59",{"_index":2198,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:66",{"_index":2199,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:74",{"_index":2207,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.entity.ts:85",{"_index":2204,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["contributor.id",{"_index":4688,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.login",{"_index":4689,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributor.tolowercase",{"_index":3320,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributor/')@apioperation({operationid",{"_index":4839,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributor/contributor.module",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["contributorcontroller",{"_index":1150,"title":{"controllers/ContributorController.html":{}},"body":{"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributorid",{"_index":4709,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributorinsightscontroller",{"_index":1177,"title":{"controllers/ContributorInsightsController.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributormodule",{"_index":266,"title":{"modules/ContributorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules.html":{},"overview.html":{}}}],["contributors",{"_index":96,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["contributors')@apioperation({operationid",{"_index":4845,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["contributors'})@apibadrequestresponse({description",{"_index":4644,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["contributors'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbuser)@apiokresponse({type",{"_index":4649,"title":{},"body":{"controllers/UserListController.html":{}}}],["contributors.dto",{"_index":38,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["contributors.dto.ts",{"_index":2490,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["contributors.dto.ts:15",{"_index":2500,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:27",{"_index":4728,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:28",{"_index":2495,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:36",{"_index":2499,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["contributors.dto.ts:44",{"_index":2509,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:52",{"_index":2505,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors.dto.ts:54",{"_index":2511,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["contributors/insights",{"_index":1180,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["contributortype",{"_index":138,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["controller",{"_index":524,"title":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"bake",{"_index":3040,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["controller(\"blogs",{"_index":769,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["controller(\"contributors",{"_index":1172,"title":{},"body":{"controllers/ContributorController.html":{}}}],["controller(\"contributors/insights",{"_index":1205,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller(\"emojis",{"_index":2305,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":2381,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":2591,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":2674,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":2754,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"issues",{"_index":2905,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["controller(\"lists",{"_index":4680,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["controller(\"prs",{"_index":879,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":3367,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":3879,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":4140,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":4245,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":4372,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":4543,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":4905,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"user/recommendations",{"_index":4978,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["controller(\"users",{"_index":4219,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["controllerkey",{"_index":5649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controllers",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":5429,"title":{},"body":{"index.html":{}}}],["cool",{"_index":1357,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":5462,"title":{},"body":{"license.html":{}}}],["copy",{"_index":5339,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":5443,"title":{},"body":{"license.html":{}}}],["corners",{"_index":2572,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["count",{"_index":1090,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/enumerations.html":{}}}],["count(id",{"_index":4466,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["countfilters.push([`'${startdate}'::timestamp",{"_index":3548,"title":{},"body":{"injectables/RepoService.html":{}}}],["counting",{"_index":5717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["couple",{"_index":5399,"title":{},"body":{"index.html":{}}}],["coupon",{"_index":513,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["coupon.dto",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon.dto.ts",{"_index":509,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"coverage.html":{}}}],["coupon.dto.ts:11",{"_index":517,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["coupon.service",{"_index":1225,"title":{},"body":{"modules/CouponModule.html":{}}}],["coupon/coupon.module",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["coupon/coupon.service",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{}}}],["coupon/entities/coupon.entity",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["coupon_code",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["couponcode",{"_index":510,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["couponmodule",{"_index":267,"title":{"modules/CouponModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CouponModule.html":{},"modules.html":{},"overview.html":{}}}],["couponrepository",{"_index":1232,"title":{},"body":{"injectables/CouponService.html":{}}}],["coupons",{"_index":1662,"title":{},"body":{"entities/DbCoupon.html":{}}}],["couponservice",{"_index":620,"title":{"injectables/CouponService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"coverage.html":{},"overview.html":{}}}],["coverage",{"_index":5167,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":4612,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["create(createendorsementdto",{"_index":2434,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createblogsummarydto",{"_index":748,"title":{"classes/CreateBlogSummaryDto.html":{}},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["createcheckoutsession",{"_index":3805,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":3809,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":1633,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbUserListContributorStat.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserNotificationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created_at",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":1617,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createendorsement",{"_index":2327,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":2335,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":1288,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["createhighlightdto",{"_index":4342,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":1316,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":4592,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":4588,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":4593,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":4051,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":4050,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":4052,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":1330,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":4562,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createinsightmemberdto})@apiparam({name",{"_index":4524,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createissuesummarydto",{"_index":1337,"title":{"classes/CreateIssueSummaryDto.html":{}},"body":{"classes/CreateIssueSummaryDto.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["createlog",{"_index":2932,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":2936,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":1344,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator((_data",{"_index":5783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":192,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["createquerybuilder(\"repo",{"_index":3504,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"repos",{"_index":3520,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"user_highlight_reactions",{"_index":4505,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["creates",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":1351,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["createuserhighlightdto",{"_index":1367,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["createuserhighlightdto})@apiparam({name",{"_index":4365,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createuserlistdto",{"_index":1144,"title":{"classes/CreateUserListDto.html":{}},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["createuserlistdto.contributors.map(async",{"_index":4686,"title":{},"body":{"controllers/UserListController.html":{}}}],["createuserlistdto})@apiparam({name",{"_index":4672,"title":{},"body":{"controllers/UserListController.html":{}}}],["creation",{"_index":1591,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{}}}],["creator",{"_index":1297,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creator_user_id",{"_index":1291,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["ctebuilder",{"_index":110,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["ctebuilder.innerjoin(\"users",{"_index":111,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["ctx",{"_index":2483,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":2485,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1044,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["current_month",{"_index":3342,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["current_month_prs",{"_index":233,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_month_prs\".\"author_login",{"_index":234,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["current_period_end_at",{"_index":2021,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":2022,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentdate",{"_index":145,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["currentmonthquery",{"_index":3338,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["currentrepoids",{"_index":4610,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find((id",{"_index":4615,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":4598,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter",{"_index":4602,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map((cr",{"_index":4611,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":2929,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":687,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":1446,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":1447,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":690,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":3875,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":3877,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":3876,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":3881,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":689,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":268,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":1455,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":1668,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":612,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":1407,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":5369,"title":{},"body":{"index.html":{}}}],["d",{"_index":5322,"title":{},"body":{"index.html":{}}}],["damages",{"_index":5487,"title":{},"body":{"license.html":{}}}],["data",{"_index":857,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionsPageDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["data).pipe(map((resp",{"_index":3099,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["data.choices[0]?.message.content",{"_index":859,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["database",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":364,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":144,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["date'})@column({type",{"_index":1807,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["date(\"1970",{"_index":5780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().getfullyear",{"_index":5670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":109,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(confirmed_at",{"_index":5112,"title":{},"body":{"injectables/UserService.html":{}}}],["date(date.now",{"_index":5663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(github.created_at",{"_index":5109,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.updated_at",{"_index":5110,"title":{},"body":{"injectables/UserService.html":{}}}],["date(highlight.shipped_at",{"_index":4479,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(new",{"_index":179,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(startdate).gettime",{"_index":180,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":4385,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":2717,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["dates",{"_index":129,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["dates.map(async",{"_index":132,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["day",{"_index":1796,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/HighlightController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["days",{"_index":125,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbPRInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["days'})@isoptional",{"_index":2504,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["db",{"_index":2236,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["dbapiconfig",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbbakedrepo",{"_index":347,"title":{"entities/DbBakedRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["dbbakedrepo})@apinotfoundresponse({description",{"_index":3000,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommitauthors",{"_index":350,"title":{"entities/DbCommitAuthors.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["dbcommitauthors})@apinotfoundresponse({description",{"_index":3005,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits",{"_index":352,"title":{"entities/DbCommits.html":{}},"body":{"modules/AppModule.html":{},"injectables/CommitsService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["dbcommits})@apinotfoundresponse({description",{"_index":3008,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcommits})@apiparam({name",{"_index":3022,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["dbcontribution",{"_index":337,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["dbcontributionsprojects",{"_index":45,"title":{"entities/DbContributionsProjects.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbcontributionsprojects})@apinotfoundresponse({description",{"_index":4823,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontributionstattimeframe",{"_index":42,"title":{"entities/DbContributionStatTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbcontributionstattimeframe})@apinotfoundresponse({description",{"_index":4835,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":3360,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcontributorcategorytimeframe",{"_index":47,"title":{"entities/DbContributorCategoryTimeframe.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributorCategoryTimeframe.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbcontributorcategorytimeframe})@apinotfoundresponse({description",{"_index":4832,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbcoupon",{"_index":433,"title":{"entities/DbCoupon.html":{}},"body":{"modules/AppModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"entities/DbCoupon.html":{},"coverage.html":{}}}],["dbcustomer",{"_index":374,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":402,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":2299,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":417,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbendorsement})@apibody({type",{"_index":2338,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":2370,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbfiltereduser",{"_index":1710,"title":{"classes/DbFilteredUser.html":{}},"body":{"classes/DbFilteredUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbfiltereduser})@apibadrequestresponse({description",{"_index":4211,"title":{},"body":{"controllers/UserController.html":{}}}],["dbinsight",{"_index":367,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":400,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":4522,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":369,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":2734,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":384,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":407,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":388,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"coverage.html":{}}}],["dbpullrequestcontributor",{"_index":1161,"title":{"classes/DbPullRequestContributor.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["dbpullrequestreview",{"_index":391,"title":{"entities/DbPullRequestReview.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":4199,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":345,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":3629,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":341,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":3583,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":343,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":3667,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":339,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":3705,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":3386,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbrepo})@useguards(supabaseguard",{"_index":4972,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["dbsubscription",{"_index":382,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbtimezone",{"_index":2060,"title":{"classes/DbTimezone.html":{}},"body":{"classes/DbTimezone.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["dbtimezone})@apinotfoundresponse({description",{"_index":4656,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbtopuser",{"_index":2064,"title":{"classes/DbTopUser.html":{}},"body":{"classes/DbTopUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbuser",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbusercollaboration",{"_index":412,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":4118,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":394,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":4471,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":404,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse",{"_index":2162,"title":{"classes/DbUserHighlightReactionResponse.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse})@apinotfoundresponse({description",{"_index":2660,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":4333,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":2176,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":4356,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":2638,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserlist",{"_index":430,"title":{"entities/DbUserList.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["dbuserlistcontributor",{"_index":27,"title":{"entities/DbUserListContributor.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"entities/DbUserListContributor.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbuserlistcontributorstat",{"_index":30,"title":{"entities/DbUserListContributorStat.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbUserListContributorStat.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["dbuserlistcontributorstat})@apinotfoundresponse({description",{"_index":4841,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["dbuserlistcontributor})@apinotfoundresponse({description",{"_index":4665,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbuserlist})@apinotfoundresponse({description",{"_index":4634,"title":{},"body":{"controllers/UserListController.html":{}}}],["dbusernotification",{"_index":410,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["dbuserorganization",{"_index":414,"title":{"entities/DbUserOrganization.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserOrganization.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserrepo",{"_index":373,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertoprepo",{"_index":409,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":398,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":4309,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{}}}],["dd",{"_index":3228,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["deal",{"_index":5452,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":5494,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1412,"title":{},"body":{"injectables/CustomLogger.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":1420,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo.tolowercase",{"_index":3420,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":4461,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorators",{"_index":511,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["default",{"_index":123,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":3886,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":5588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultversion",{"_index":5627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["delete",{"_index":2373,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"miscellaneous/variables.html":{}}}],["delete(\"/:id",{"_index":2759,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["delete(\"/:id/contributors/:userlistcontributorid",{"_index":4712,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete(\"/:id/featured",{"_index":2686,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":4395,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":3614,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":3652,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":3690,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":3739,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":3617,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":3655,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":3692,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":3742,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":4316,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\":id",{"_index":2412,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":4572,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":2741,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["delete('/:id/contributors/:userlistcontributorid')@apioperation({operationid",{"_index":4641,"title":{},"body":{"controllers/UserListController.html":{}}}],["delete('/:id/featured')@apioperation({operationid",{"_index":2664,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4347,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3580,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3627,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3665,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3703,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3590,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3633,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3671,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3709,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4306,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":2342,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":4533,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete\\`](https://developer.mozilla.org/en",{"_index":5752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecoupon",{"_index":1228,"title":{},"body":{"injectables/CouponService.html":{}}}],["deletecoupon(code",{"_index":1234,"title":{},"body":{"injectables/CouponService.html":{}}}],["deleted",{"_index":1865,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":1579,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["deletedatecolumn",{"_index":1616,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deleteendoresementbyid",{"_index":2328,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(@param(\"id",{"_index":2413,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":2341,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":4323,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":4343,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":4324,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":4346,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletelistforuser",{"_index":4624,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(@userid",{"_index":4698,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletelistforuser(userid",{"_index":4637,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletes",{"_index":2345,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["deleteuserhighlight",{"_index":4405,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":4425,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":4406,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":4427,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserlist",{"_index":4738,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlist(listid",{"_index":4755,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributor",{"_index":4642,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["deleteuserlistcontributor(id",{"_index":4757,"title":{},"body":{"injectables/UserListService.html":{}}}],["deleteuserlistcontributors",{"_index":4625,"title":{},"body":{"controllers/UserListController.html":{}}}],["deleteuserlistcontributors(id",{"_index":4639,"title":{},"body":{"controllers/UserListController.html":{}}}],["deletion",{"_index":1723,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{}}}],["deletions",{"_index":1826,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["denominator",{"_index":126,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["denver",{"_index":2497,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["dependencies",{"_index":247,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["deployment",{"_index":5407,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1540,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":522,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":3244,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":3148,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"coverage.html":{}}}],["description.controller.ts:22",{"_index":3152,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":3153,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":2555,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["description.dto.ts:13",{"_index":2560,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":2564,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":2565,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":2563,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":2562,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:59",{"_index":2559,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":3155,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":3158,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["description.service.ts:10",{"_index":3161,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:19",{"_index":3160,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:7",{"_index":3159,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":2543,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":5513,"title":{},"body":{"properties.html":{}}}],["detailed",{"_index":5703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":5284,"title":{},"body":{"index.html":{}}}],["dev/apply",{"_index":5330,"title":{},"body":{"index.html":{}}}],["developers",{"_index":2193,"title":{},"body":{"entities/DbUserList.html":{}}}],["developers'})@column({type",{"_index":2188,"title":{},"body":{"entities/DbUserList.html":{}}}],["development",{"_index":5250,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["diagram",{"_index":5421,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2557,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":3163,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["diivi",{"_index":2175,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["direction.constant",{"_index":1102,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":5225,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":3165,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["directory",{"_index":5285,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":148,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["discord",{"_index":3975,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["discord.find",{"_index":5430,"title":{},"body":{"index.html":{}}}],["discord_url",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["disk",{"_index":2594,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":5562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":5565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":2590,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1678,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"index.html":{}}}],["display_email",{"_index":4100,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["display_order",{"_index":1672,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct",{"_index":231,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["distribute",{"_index":5458,"title":{},"body":{"license.html":{}}}],["dit",{"_index":5377,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":5584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":1315,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["doc'})@column({type",{"_index":1707,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":1310,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":5280,"title":{},"body":{"index.html":{}}}],["docker>=20.10.12",{"_index":5254,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":5314,"title":{},"body":{"index.html":{}}}],["dockerfile.local",{"_index":5311,"title":{},"body":{"index.html":{}}}],["docs",{"_index":5606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":5396,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":5168,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":5630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":5552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":5509,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1715,"title":{},"body":{"classes/DbFilteredUser.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1770,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["downstarbyrepoid",{"_index":3750,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":3756,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":3779,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":3785,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":3621,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":3626,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":3622,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":3632,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":3574,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(@param(\"id",{"_index":3615,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":3579,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":3575,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":3589,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":3946,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":3952,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":3659,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":3664,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":3660,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":3670,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":5139,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":5146,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":3696,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(@param(\"id",{"_index":3740,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":3702,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":3697,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":3708,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1827,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["draft_pull_requests\".\"updated_at",{"_index":3528,"title":{},"body":{"injectables/RepoService.html":{}}}],["dry",{"_index":5403,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":2376,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos/baked",{"_index":3036,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["dtos/collaborators.dto",{"_index":4678,"title":{},"body":{"controllers/UserListController.html":{}}}],["dtos/contribution",{"_index":1103,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/contributions",{"_index":40,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/create",{"_index":763,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dtos/filter",{"_index":3415,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["dtos/filtered",{"_index":4218,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/highlight",{"_index":2673,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":2881,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/most",{"_index":36,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["dtos/page",{"_index":2986,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/page.dto",{"_index":2987,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/pull",{"_index":3128,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":3393,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/top",{"_index":4215,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/update",{"_index":2749,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["due",{"_index":5758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duration",{"_index":2715,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":5187,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":5384,"title":{},"body":{"index.html":{}}}],["dutch",{"_index":1262,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["dynamic",{"_index":190,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["e",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["each",{"_index":1128,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"miscellaneous/variables.html":{}}}],["edit",{"_index":4055,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":5131,"title":{},"body":{"injectables/UserService.html":{}}}],["emoji",{"_index":1677,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["emoji.controller",{"_index":2313,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":2303,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":2138,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":2292,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":4331,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":269,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":2318,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":1693,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":2302,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["encounter",{"_index":5347,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":5422,"title":{},"body":{"index.html":{}}}],["end",{"_index":918,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"injectables/UserService.html":{}}}],["end_range",{"_index":3307,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["ended_at",{"_index":2023,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":1296,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":2422,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":4234,"title":{},"body":{"controllers/UserEndorsementController.html":{},"coverage.html":{}}}],["endorsement.controller.ts:25",{"_index":4240,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:38",{"_index":4243,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":2377,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":1290,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["endorsement.dto.ts:11",{"_index":1299,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":1302,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:27",{"_index":1304,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:35",{"_index":1307,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:42",{"_index":1309,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:49",{"_index":1311,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":2375,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":4244,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":2325,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"coverage.html":{}}}],["endorsementmodule",{"_index":270,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":2432,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1709,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":2459,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":2457,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":2467,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":2374,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":5567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":2379,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["endpointconfig",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":2596,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":2580,"title":{},"body":{"controllers/HealthController.html":{}}}],["english",{"_index":1255,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":1256,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ensures",{"_index":3203,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["entire",{"_index":806,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":100,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["entities.length",{"_index":3346,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["entities/baked",{"_index":3037,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["entities/commit_authors.entity",{"_index":973,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/commits.entity",{"_index":1004,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["entities/contributions",{"_index":43,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/contributors",{"_index":48,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["entities/coupon.entity",{"_index":1224,"title":{},"body":{"modules/CouponModule.html":{},"injectables/CouponService.html":{}}}],["entities/emoji.entity",{"_index":2304,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":2378,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/filtered",{"_index":4217,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/insight",{"_index":2791,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":2751,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":3127,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo.entity",{"_index":3392,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/timezones.entity",{"_index":4679,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["entities/top",{"_index":4213,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user",{"_index":28,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":1243,"title":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"injectables/CouponService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PagerService.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["entity(\"pull_request_reviews",{"_index":1949,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["enum",{"_index":1089,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["enumerations",{"_index":5221,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":1063,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":5263,"title":{},"body":{"index.html":{}}}],["environment",{"_index":5261,"title":{},"body":{"index.html":{}}}],["environments",{"_index":5241,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":5727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1912,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/FilterListContributorsDto.html":{}}}],["error",{"_index":822,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":1422,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":860,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["error).tostring",{"_index":3913,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":825,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":5348,"title":{},"body":{"index.html":{}}}],["escape",{"_index":4458,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":147,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["event",{"_index":3923,"title":{},"body":{"controllers/StripeWebhookController.html":{},"license.html":{}}}],["event.data.object",{"_index":3928,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":3932,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["evolution",{"_index":4827,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["example",{"_index":515,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["exclude",{"_index":497,"title":{},"body":{"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["executioncontext",{"_index":2479,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1245,"title":{},"body":{"injectables/CouponService.html":{},"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":4334,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":3581,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existinguser",{"_index":4556,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":4561,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":4560,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":3885,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["expect",{"_index":5733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiration",{"_index":1659,"title":{},"body":{"entities/DbCoupon.html":{}}}],["expired_at",{"_index":1242,"title":{},"body":{"injectables/CouponService.html":{},"entities/DbCoupon.html":{}}}],["explanation",{"_index":872,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.controller",{"_index":3247,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["explanation.controller.ts",{"_index":864,"title":{},"body":{"controllers/CodeExplanationController.html":{},"coverage.html":{}}}],["explanation.controller.ts:22",{"_index":875,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.dto",{"_index":876,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.dto.ts",{"_index":2542,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["explanation.dto.ts:13",{"_index":2545,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:23",{"_index":2547,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:33",{"_index":2546,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:40",{"_index":2544,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.service",{"_index":878,"title":{},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["explanation.service.ts",{"_index":885,"title":{},"body":{"injectables/CodeExplanationService.html":{},"coverage.html":{}}}],["explanation.service.ts:10",{"_index":890,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:17",{"_index":889,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:7",{"_index":887,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explore",{"_index":5608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":54,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["exports",{"_index":258,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["express",{"_index":2712,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"license.html":{}}}],["extends",{"_index":1022,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extractjwt",{"_index":4025,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":4038,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":4037,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["f",{"_index":5310,"title":{},"body":{"index.html":{}}}],["facilitate",{"_index":5282,"title":{},"body":{"index.html":{}}}],["false",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"classes/BakeRepoDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["false})@column('boolean",{"_index":1867,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":1728,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{}}}],["false})@column({type",{"_index":2103,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":738,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":4072,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastifyadapter",{"_index":5616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favorite",{"_index":1727,"title":{},"body":{"entities/DbInsight.html":{}}}],["featured",{"_index":2097,"title":{},"body":{"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{}}}],["featurehighlight",{"_index":2626,"title":{},"body":{"controllers/HighlightController.html":{}}}],["featurehighlight(id",{"_index":2633,"title":{},"body":{"controllers/HighlightController.html":{}}}],["fetch",{"_index":831,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetched",{"_index":2840,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["fetcher",{"_index":838,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":842,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetches",{"_index":4354,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1853,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":2172,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["filter((notification",{"_index":4939,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["filter.module",{"_index":3242,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":3406,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":3193,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":3407,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":3413,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:86",{"_index":3411,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":3414,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtered",{"_index":212,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users",{"_index":223,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filtered_users\".\"user_login",{"_index":225,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["filteredusersdto",{"_index":2532,"title":{"classes/FilteredUsersDto.html":{}},"body":{"classes/FilteredUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filterlistcontributorsdto",{"_index":2488,"title":{"classes/FilterListContributorsDto.html":{}},"body":{"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"coverage.html":{}}}],["filteroptionsdto",{"_index":2518,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":1158,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.foreach(([sql",{"_index":3437,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":3427,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push([\"repos.stars",{"_index":3425,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`'${startdate}'::timestamp",{"_index":3223,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`:topic",{"_index":3421,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=:repo",{"_index":3419,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`repos.id",{"_index":3417,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderend(interval",{"_index":3222,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprcountfilterbuilderstart",{"_index":3221,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderend(range",{"_index":3329,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filters.push([this.hacktoberfestprfilterbuilderstart",{"_index":3328,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["filterservice",{"_index":3286,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":2639,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["findall",{"_index":1094,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(@query",{"_index":3398,"title":{},"body":{"controllers/RepoController.html":{}}}],["findall(pageoptionsdto",{"_index":1098,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbakedrepos",{"_index":3078,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbakedrepos(pageoptionsdto",{"_index":3084,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["findallbycontributor",{"_index":3275,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":3291,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":2425,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":2437,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":3354,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":3356,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrecipientuserid",{"_index":2426,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":2439,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":3355,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":3362,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoowneroruser",{"_index":2427,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":2441,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":2329,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":2348,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":2865,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":2874,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":4927,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["findallchurncontributors",{"_index":3276,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurncontributors(pageoptionsdto",{"_index":3293,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallchurnpullrequestcontributors",{"_index":1181,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallchurnpullrequestcontributors(pageoptionsdto",{"_index":1185,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallcommitauthors",{"_index":960,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitauthors(pageoptionsdto",{"_index":966,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["findallcommitsbybakedrepoid",{"_index":991,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbybakedrepoid(pageoptionsdto",{"_index":998,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid",{"_index":992,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcommitsbycommitauthorid(pageoptionsdto",{"_index":1000,"title":{},"body":{"injectables/CommitsService.html":{}}}],["findallcontributorswithfilters",{"_index":3277,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallcontributorswithfilters(pageoptionsdto",{"_index":3295,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallemojis",{"_index":2294,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(@query",{"_index":2308,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":2295,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":2330,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(@query",{"_index":2390,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":2353,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":2331,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":2355,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":2400,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":2444,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallfeatured",{"_index":4407,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallfeatured(pageoptionsdto",{"_index":4431,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallfeaturedhighlights",{"_index":2627,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(@query",{"_index":2681,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(pageoptionsdto",{"_index":2643,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfollowers",{"_index":4255,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallfollowers(userid",{"_index":4266,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["findallhighlightreactions",{"_index":4408,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":4433,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":2628,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(@query",{"_index":2690,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":2647,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":2629,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(@query",{"_index":2678,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":2651,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":4182,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":4188,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":2768,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":2784,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":4516,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":4526,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findalllistcontributorstats",{"_index":103,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findalllistcontributorstats(pageoptionsdto",{"_index":4875,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findallrecentcontributors",{"_index":3278,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentcontributors(pageoptionsdto",{"_index":3297,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentpullrequestcontributors",{"_index":1182,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrecentpullrequestcontributors(pageoptionsdto",{"_index":1194,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatcontributors",{"_index":3279,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatcontributors(pageoptionsdto",{"_index":3299,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrepeatpullrequestcontributors",{"_index":1183,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrepeatpullrequestcontributors(pageoptionsdto",{"_index":1197,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallreposwithfilters",{"_index":3378,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(@query",{"_index":3400,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":3383,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreviewsbyprid",{"_index":3265,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findallreviewsbyprid(prid",{"_index":3269,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["findalltopreposbyusername",{"_index":4183,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":4192,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":4114,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":4125,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercreatedendorsements",{"_index":4236,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(@userid",{"_index":4247,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":4238,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername",{"_index":2332,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallusercreatedendorsementsbyusername(username",{"_index":2359,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":4237,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(@userid",{"_index":4250,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":4241,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername",{"_index":2333,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsementsbyusername(username",{"_index":2363,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":3623,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":3635,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":3576,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":3592,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":3661,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":3673,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":3698,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":3711,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":3280,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":3301,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbakedrepobyid",{"_index":2992,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbakedrepobyid(@param(\"id",{"_index":3047,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findbakedrepobyid(id",{"_index":2998,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["findbycustomerid",{"_index":1451,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":1460,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":1452,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":1462,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcommitauthorbyid",{"_index":961,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(@param(\"id",{"_index":3054,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitauthorbyid(id",{"_index":968,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid",{"_index":993,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(@param(\"id",{"_index":3062,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["findcommitbyid(id",{"_index":1002,"title":{},"body":{"injectables/CommitsService.html":{},"controllers/PizzaOvenController.html":{}}}],["findcontributionsbyproject",{"_index":4860,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsbyproject(listid",{"_index":183,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe",{"_index":136,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframe(options",{"_index":4878,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper",{"_index":4861,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributionsintimeframehelper(startdate",{"_index":4880,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe",{"_index":4862,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesbytimeframe(options",{"_index":4882,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper",{"_index":4863,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorcategoriesintimeframehelper(startdate",{"_index":4884,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findcontributorpullrequests",{"_index":4184,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":4196,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorsbyfilter",{"_index":4739,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbyfilter(pageoptionsdto",{"_index":4760,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid",{"_index":4740,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcontributorsbylistid(pageoptionsdto",{"_index":4762,"title":{},"body":{"injectables/UserListService.html":{}}}],["findcoupon",{"_index":1229,"title":{},"body":{"injectables/CouponService.html":{}}}],["findcoupon(code",{"_index":1236,"title":{},"body":{"injectables/CouponService.html":{}}}],["findendorsementbyid",{"_index":2334,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(@param(\"id",{"_index":2404,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":2366,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findinsightpagebyid",{"_index":2730,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(@param(\"id",{"_index":2757,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":2732,"title":{},"body":{"controllers/InsightController.html":{}}}],["findlistcontributorstatsbyproject",{"_index":4864,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["findlistcontributorstatsbyproject(listid",{"_index":68,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["findnewcontributorsintimerange",{"_index":3281,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findnewcontributorsintimerange(pageoptionsdto",{"_index":3303,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findonebyemail",{"_index":5019,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":5037,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":2428,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(@param(\"id",{"_index":3394,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyid(id",{"_index":2446,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":3379,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(@param(\"owner",{"_index":3396,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyownerandrepo(owner",{"_index":3388,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyrepoid",{"_index":3699,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyrepoid(@param(\"repoid",{"_index":3733,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyrepoid(repoid",{"_index":3715,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyusername",{"_index":5020,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":5041,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":4185,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(@param(\"username",{"_index":4221,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":4201,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":4203,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":4409,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":4438,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findorgsrecommendations",{"_index":3470,"title":{},"body":{"injectables/RepoService.html":{}}}],["findorgsrecommendations(userid",{"_index":3485,"title":{},"body":{"injectables/RepoService.html":{}}}],["findpubliconebyid",{"_index":4741,"title":{},"body":{"injectables/UserListService.html":{}}}],["findpubliconebyid(id",{"_index":4765,"title":{},"body":{"injectables/UserListService.html":{}}}],["findrecommendations",{"_index":3471,"title":{},"body":{"injectables/RepoService.html":{}}}],["findrecommendations(interests",{"_index":3487,"title":{},"body":{"injectables/RepoService.html":{}}}],["finds",{"_index":2343,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["findtop",{"_index":4410,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtop(pageoptionsdto",{"_index":4440,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findtophighlights",{"_index":2630,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(@query",{"_index":2696,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtophighlights(pageoptionsdto",{"_index":2654,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findtopusers",{"_index":5021,"title":{},"body":{"injectables/UserService.html":{}}}],["findtopusers(pageoptionsdto",{"_index":5043,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserfollowerbyid",{"_index":4256,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":4268,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserorgsreporecommendations",{"_index":4966,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(@userid",{"_index":4986,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserorgsreporecommendations(userid",{"_index":4968,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations",{"_index":4967,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(@userid",{"_index":4981,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(userid",{"_index":4974,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["findusersbyfilter",{"_index":5022,"title":{},"body":{"injectables/UserService.html":{}}}],["findusersbyfilter(pageoptionsdto",{"_index":5045,"title":{},"body":{"injectables/UserService.html":{}}}],["finish",{"_index":736,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["first",{"_index":204,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserListStatsService.html":{}}}],["fitness",{"_index":5480,"title":{},"body":{"license.html":{}}}],["fix",{"_index":5385,"title":{},"body":{"index.html":{}}}],["fix(cli",{"_index":1909,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixed",{"_index":2567,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["flag",{"_index":1033,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{}}}],["folder",{"_index":5362,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2271,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":4896,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":4292,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:30",{"_index":4304,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:48",{"_index":4300,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:70",{"_index":4310,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":4311,"title":{},"body":{"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":4253,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:10",{"_index":4260,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":4265,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:24",{"_index":4267,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:37",{"_index":4270,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:53",{"_index":4264,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:82",{"_index":4272,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":2230,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{}}}],["followeduserid",{"_index":4263,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":2274,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["follower.user_id",{"_index":4489,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers",{"_index":4484,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followers.map(async",{"_index":4487,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["followeruserid",{"_index":4269,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":4281,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":4285,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":4282,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following_user_id",{"_index":2270,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["followings",{"_index":4043,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["follows",{"_index":3649,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"index.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4355,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":3640,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":2269,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:16",{"_index":2276,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:24",{"_index":2278,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":2275,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":2272,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":2277,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":2273,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":4950,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":4953,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":4298,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":4293,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":4296,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":4435,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["formal",{"_index":1276,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":1272,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1806,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":5386,"title":{},"body":{"index.html":{}}}],["found",{"_index":2300,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"miscellaneous/variables.html":{}}}],["found'})@apiconflictresponse({description",{"_index":3584,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiparam({name",{"_index":3001,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/UserInsightMemberController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":2735,"title":{},"body":{"controllers/InsightController.html":{}}}],["frame",{"_index":1639,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["frameduration",{"_index":146,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framepromises",{"_index":131,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["framestartdate",{"_index":133,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["francisco",{"_index":3997,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":5448,"title":{},"body":{"license.html":{}}}],["french",{"_index":1258,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fresh",{"_index":2843,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["from(\"pull_requests",{"_index":205,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_list_contributors",{"_index":217,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["from(\"user_organizations",{"_index":3564,"title":{},"body":{"injectables/RepoService.html":{}}}],["from(`(${currentmonthquery.getquery",{"_index":3341,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(`(${prevmonthquery.getquery",{"_index":3349,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbendorsement",{"_index":2466,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(dbpullrequest",{"_index":3331,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbuser",{"_index":5063,"title":{},"body":{"injectables/UserService.html":{}}}],["from(entity",{"_index":3500,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user",{"_index":2219,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["from_user_id",{"_index":2220,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1379,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/RepoInfo.html":{},"index.html":{}}}],["full_name",{"_index":1329,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["fullname",{"_index":1713,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/RepoInfo.html":{}}}],["function",{"_index":5207,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":5234,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":5465,"title":{},"body":{"license.html":{}}}],["future",{"_index":186,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["generally",{"_index":5754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":751,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["generate:swagger",{"_index":5395,"title":{},"body":{"index.html":{}}}],["generateblogsummary",{"_index":750,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{}}}],["generateblogsummary(options",{"_index":788,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["generatecodeexplanation",{"_index":870,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generatecodeexplanationdto",{"_index":868,"title":{"classes/GenerateCodeExplanationDto.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["generatecoderefactor",{"_index":901,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":899,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["generatecodetest",{"_index":929,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generatecodetestsuggestiondto",{"_index":927,"title":{"classes/GenerateCodeTestSuggestionDto.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["generatecompletion",{"_index":2948,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["generatecompletion(systemmessage",{"_index":835,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["generated",{"_index":5316,"title":{},"body":{"index.html":{}}}],["generatedescription",{"_index":910,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":912,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateexplanation",{"_index":886,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateexplanation(options",{"_index":888,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateissuesummary",{"_index":2900,"title":{},"body":{"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["generateissuesummary(@body",{"_index":2907,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(generateissuesummarydto",{"_index":2901,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateissuesummary(options",{"_index":2913,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["generateissuesummarydto",{"_index":2903,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["generateprdescription",{"_index":866,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(@body",{"_index":882,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecodeexplanationdto",{"_index":867,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":898,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatecodetestsuggestiondto",{"_index":926,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":3149,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":784,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":790,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(maxlength",{"_index":936,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":2554,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["generates",{"_index":871,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"index.html":{}}}],["generateswaggerjson",{"_index":5205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["generatetestsuggestion",{"_index":935,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatetestsuggestion(options",{"_index":937,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["genereateblogsummary",{"_index":746,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(@body",{"_index":773,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummary(genereateblogsummarydto",{"_index":747,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["genereateblogsummarydto",{"_index":758,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["german",{"_index":1259,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["get(\"/:id",{"_index":2756,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get(\"/:id/contributions",{"_index":3369,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/contributors",{"_index":4704,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/:id/reactions",{"_index":2692,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/reviews",{"_index":3144,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/:owner/:repo",{"_index":3395,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":3374,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:repoid/vote",{"_index":3732,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/:username",{"_index":4220,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":4312,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/highlights",{"_index":4224,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":4222,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":4227,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/churn",{"_index":1210,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/commit",{"_index":3056,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/commit",{"_index":3067,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/commits/list/repo/:id",{"_index":3064,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"/contributors",{"_index":4700,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/created",{"_index":4246,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/featured",{"_index":2680,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/following",{"_index":4399,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":4400,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":3138,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":2676,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":3647,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":3609,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":3686,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":3731,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/new",{"_index":1206,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/orgs",{"_index":4984,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/received",{"_index":4249,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/recent",{"_index":1208,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repeat",{"_index":1212,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repos",{"_index":4980,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":2395,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":2399,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":2392,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":2688,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get(\"/search",{"_index":1174,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get(\"/service",{"_index":2595,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/timezones",{"_index":4715,"title":{},"body":{"controllers/UserListController.html":{}}}],["get(\"/top",{"_index":2695,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get(\"/user/:username/created",{"_index":2406,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":2410,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":2608,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":2403,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":4544,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(\":id/stats/contributions",{"_index":4851,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/most",{"_index":4848,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\":id/stats/top",{"_index":4856,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(\"commit",{"_index":3052,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"commits/:id",{"_index":3061,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get(\"repos/:id",{"_index":3046,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/')@apioperation({operationid",{"_index":2296,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":2733,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":3363,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/contributors')@apioperation({operationid",{"_index":4663,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":2658,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/reviews')@apioperation({operationid",{"_index":3116,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":3389,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":3357,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:repoid/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3716,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":4202,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4302,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":4189,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":4197,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":4193,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/churn')@apioperation({operationid",{"_index":1187,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/commit",{"_index":3014,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/commit",{"_index":3025,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/commits/list/repo/:id')@apioperation({operationid",{"_index":3020,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('/contributors')@apioperation({operationid",{"_index":4648,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4239,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/featured')@apioperation({operationid",{"_index":2644,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":4359,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":4353,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":3112,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":2652,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3636,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3593,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3674,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3712,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/new')@apioperation({operationid",{"_index":1202,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/orgs')@apioperation({operationid",{"_index":4969,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4242,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/recent')@apioperation({operationid",{"_index":1195,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repeat')@apioperation({operationid",{"_index":1198,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repos')@apioperation({operationid",{"_index":4975,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":2356,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":2349,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":2648,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":1155,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":2578,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/timezones')@apioperation({operationid",{"_index":4654,"title":{},"body":{"controllers/UserListController.html":{}}}],["get('/top')@apioperation({operationid",{"_index":2655,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":2360,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":2364,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":2582,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":2367,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":4527,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get(':id/stats/contributions",{"_index":4820,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/most",{"_index":4844,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get(':id/stats/top",{"_index":4838,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["get('commit",{"_index":3003,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('commits/:id')@apioperation({operationid",{"_index":3007,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get('repos/:id')@apioperation({operationid",{"_index":2999,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["get\\`](https://developer.mozilla.org/en",{"_index":5741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallhighlightreactions",{"_index":2631,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(@param(\"id",{"_index":2693,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":2657,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":4325,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":4350,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getalltimezones",{"_index":4742,"title":{},"body":{"injectables/UserListService.html":{}}}],["getcontributionsbyproject",{"_index":4815,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbyproject(@param(\"id",{"_index":4854,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbyproject(id",{"_index":4819,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe",{"_index":4816,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributionsbytimeframe(id",{"_index":4826,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject",{"_index":4817,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorcontributionsbyproject(id",{"_index":4837,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getcontributorrangequerybuilder",{"_index":3282,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributorrangequerybuilder(start_date",{"_index":3305,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributors",{"_index":4626,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributors(@query",{"_index":4702,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributors(pageoptionsdto",{"_index":4647,"title":{},"body":{"controllers/UserListController.html":{}}}],["getcontributorsbytimeframe",{"_index":4829,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getdateframes",{"_index":4865,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["getdateframes(range",{"_index":142,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["getdomain",{"_index":5196,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":5610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":5603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":5607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":5609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":5605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfollowinghighlightrepos",{"_index":4326,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":4352,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":4327,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":4358,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowstatusbyusername",{"_index":4294,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":4301,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":3172,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":3182,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getlistsforuser",{"_index":4627,"title":{},"body":{"controllers/UserListController.html":{}}}],["getlistsforuser(userid",{"_index":4651,"title":{},"body":{"controllers/UserListController.html":{}}}],["getmostactivecontributors",{"_index":4818,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getmostactivecontributors(id",{"_index":4843,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["getprevdateisostring",{"_index":3194,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getprevdateisostring(options.prev_days_start_date",{"_index":3215,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getprevdateisostring(pageoptionsdto.prev_days_start_date",{"_index":3317,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["getpullrequestinsights",{"_index":3107,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(@query",{"_index":3140,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":3111,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews",{"_index":3108,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(@param(\"id",{"_index":3145,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestreviews(id",{"_index":3115,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":3409,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":3412,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["gets",{"_index":1188,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["getschemapath(model",{"_index":5575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":5574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(@user",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2510,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["getstripe",{"_index":3811,"title":{},"body":{"injectables/StripeService.html":{}}}],["gettimezones",{"_index":4628,"title":{},"body":{"controllers/UserListController.html":{}}}],["getting",{"_index":5236,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop10highlights",{"_index":4207,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers",{"_index":4186,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(@query",{"_index":4229,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(pageoptionsdto",{"_index":4206,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserhighlight",{"_index":4328,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(@param(\"id",{"_index":4375,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":4361,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserlist",{"_index":4629,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(@param(\"id",{"_index":4691,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlist(id",{"_index":4659,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors",{"_index":4630,"title":{},"body":{"controllers/UserListController.html":{}}}],["getuserlistcontributors(pageoptionsdto",{"_index":4662,"title":{},"body":{"controllers/UserListController.html":{}}}],["getusernotifications",{"_index":4902,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":4903,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusersbyfilter",{"_index":4187,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(@query",{"_index":4231,"title":{},"body":{"controllers/UserController.html":{}}}],["getusersbyfilter(pageoptionsdto",{"_index":4210,"title":{},"body":{"controllers/UserController.html":{}}}],["getvotequery",{"_index":5140,"title":{},"body":{"injectables/VoteService.html":{}}}],["getvotequery(repoid",{"_index":5149,"title":{},"body":{"injectables/VoteService.html":{}}}],["ghcr.io/open",{"_index":5378,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":5523,"title":{},"body":{"properties.html":{}}}],["github",{"_index":919,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["github\")[0",{"_index":5100,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com/open",{"_index":1392,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":5111,"title":{},"body":{"injectables/UserService.html":{}}}],["github_sponsors_url",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["given",{"_index":891,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{}}}],["go",{"_index":2841,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["goes",{"_index":1812,"title":{},"body":{"entities/DbPRInsight.html":{},"miscellaneous/variables.html":{}}}],["gpt",{"_index":5676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grab",{"_index":201,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["granted",{"_index":5447,"title":{},"body":{"license.html":{}}}],["graph",{"_index":5499,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"repos.full_name",{"_index":228,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["groupby(\"users.login",{"_index":2468,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":2401,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":2471,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":3608,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":2472,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["guide",{"_index":5424,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":5425,"title":{},"body":{"index.html":{}}}],["hacktoberfest",{"_index":3213,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["hacktoberfestconfig",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hacktoberfestfilterquerybuilder",{"_index":3472,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestfilterquerybuilder(range",{"_index":3489,"title":{},"body":{"injectables/RepoService.html":{}}}],["hacktoberfestprcountfilterbuilderend",{"_index":3173,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderend(interval",{"_index":3184,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprcountfilterbuilderstart",{"_index":3174,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder",{"_index":3175,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprdatecharbuilder(interval",{"_index":3187,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["hacktoberfestprfilterbuilderend",{"_index":3283,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderend(range",{"_index":3310,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestprfilterbuilderstart",{"_index":3284,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["hacktoberfestyear",{"_index":3198,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["handle",{"_index":5078,"title":{},"body":{"injectables/UserService.html":{}}}],["handled",{"_index":5743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlestripewebhook",{"_index":3860,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(@req",{"_index":3916,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":3862,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hash",{"_index":984,"title":{},"body":{"classes/CommitsDto.html":{},"entities/DbCommits.html":{}}}],["hasnextpage",{"_index":1024,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1025,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["header",{"_index":5721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":843,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["headers(\"x",{"_index":2385,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":2576,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":2622,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":2588,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":2585,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":2574,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":271,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":2579,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":2583,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":956,"title":{},"body":{"classes/CommitAuthorDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1764,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":1334,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@isstring",{"_index":954,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["hereby",{"_index":5446,"title":{},"body":{"license.html":{}}}],["hey",{"_index":2077,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["highlight",{"_index":405,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":2640,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":2659,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":2701,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":4319,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:114",{"_index":4345,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:134",{"_index":4351,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:153",{"_index":4336,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:177",{"_index":4349,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:199",{"_index":4360,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:215",{"_index":4357,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:53",{"_index":4341,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:69",{"_index":4362,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:85",{"_index":4366,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":4386,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":4371,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":1368,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":1394,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":1386,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":1372,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":1378,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:48",{"_index":1391,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:58",{"_index":1384,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":2096,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:109",{"_index":2126,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:116",{"_index":2101,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:123",{"_index":2118,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:134",{"_index":2105,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":2113,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:156",{"_index":2112,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:169",{"_index":2121,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:177",{"_index":2130,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:185",{"_index":2117,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:30",{"_index":2110,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:38",{"_index":2132,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:45",{"_index":2128,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:52",{"_index":2123,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:62",{"_index":2108,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:69",{"_index":2125,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:79",{"_index":2114,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:89",{"_index":2104,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:99",{"_index":2100,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":4476,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":4478,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.taggedrepos",{"_index":4481,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":4477,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.type",{"_index":4480,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":4475,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":4394,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":4369,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight/entities/user",{"_index":4370,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/highlight.module",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_created",{"_index":5233,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlight_id",{"_index":2116,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_id=user_highlights.id",{"_index":4467,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":5231,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":2623,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightcreated",{"_index":5232,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["highlightid",{"_index":4337,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":272,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":2171,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":1686,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":1687,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":2136,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":2115,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":2625,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlights.service",{"_index":2672,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":4401,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:102",{"_index":4432,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:113",{"_index":4441,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:138",{"_index":4418,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:157",{"_index":4443,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:177",{"_index":4436,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:19",{"_index":4415,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:217",{"_index":4430,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:228",{"_index":4420,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:252",{"_index":4445,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:256",{"_index":4426,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:260",{"_index":4434,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:282",{"_index":4439,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:299",{"_index":4423,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:31",{"_index":4424,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:331",{"_index":4428,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:37",{"_index":4437,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:58",{"_index":4429,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":4422,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":5484,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":5519,"title":{},"body":{"properties.html":{}}}],["host",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PizzaOvenService.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":2484,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":5604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hour",{"_index":5713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":496,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":4460,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":2586,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":361,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1877,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1927,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1849,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://discord.gg/opensauced",{"_index":3976,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://discord.gg/opensauced'})@isurl()@isoptional",{"_index":4070,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://github.com/${repo.fullname",{"_index":2845,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["https://github.com/${url.full_name",{"_index":2889,"title":{},"body":{"injectables/InsightsService.html":{}}}],["https://github.com/open",{"_index":730,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":3983,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":1695,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":1690,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":4009,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":4093,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://opensource.org/licenses/mit",{"_index":5644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":3994,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":4077,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpservice",{"_index":3080,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["httpstatus",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1804,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":1275,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":646,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestReviewService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":2346,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":2369,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":1524,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identities",{"_index":5097,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter((identity",{"_index":5098,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":5099,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":942,"title":{},"body":{"classes/CollaboratorsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["ids'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1192,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["ignore",{"_index":492,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":5307,"title":{},"body":{"index.html":{}}}],["implements",{"_index":1471,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":5476,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["imports",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["include",{"_index":2918,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["included",{"_index":5471,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":5039,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":5409,"title":{},"body":{"index.html":{},"license.html":{}}}],["inclusive",{"_index":3204,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":3987,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1034,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":2839,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserListController.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":1326,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":3441,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":3444,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":3442,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"miscellaneous/variables.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":3151,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4536,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":1274,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ingesting",{"_index":5414,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":1035,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":5716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":17,"title":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":782,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":504,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":23,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbbakedrepo",{"_index":3092,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["injectrepository(dbcommitauthors",{"_index":974,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["injectrepository(dbcommits",{"_index":1005,"title":{},"body":{"injectables/CommitsService.html":{}}}],["injectrepository(dbcontribution",{"_index":1104,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcoupon",{"_index":1238,"title":{},"body":{"injectables/CouponService.html":{}}}],["injectrepository(dbcustomer",{"_index":1464,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":2321,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":2450,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":2882,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":2792,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":2838,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":2939,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":3196,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":3313,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["injectrepository(dbpullrequestreview",{"_index":3272,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["injectrepository(dbrepo",{"_index":3494,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":3789,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":3761,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":3956,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":5153,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":3848,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":4771,"title":{},"body":{"injectables/UserListService.html":{},"injectables/UserService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":4170,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":4446,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":4447,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(dbuserlist",{"_index":4770,"title":{},"body":{"injectables/UserListService.html":{}}}],["injectrepository(dbuserlistcontributor",{"_index":58,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["injectrepository(dbusernotification",{"_index":4932,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":5010,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":4274,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin",{"_index":214,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"insights",{"_index":2806,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":209,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["innerjoin(\"user_highlight_reactions",{"_index":5065,"title":{},"body":{"injectables/UserService.html":{}}}],["innerjoin(\"user_highlights",{"_index":5064,"title":{},"body":{"injectables/UserService.html":{}}}],["innerjoin(\"users",{"_index":219,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":4177,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":4176,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_notifications.from_user",{"_index":4935,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":2885,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":1629,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{}}}],["inserting/updating",{"_index":3912,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":1319,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserList.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":2743,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4521,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight'})@apiparam({name",{"_index":2738,"title":{},"body":{"controllers/InsightController.html":{}}}],["insight.controller",{"_index":2858,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":4574,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:108",{"_index":4582,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:59",{"_index":4579,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:77",{"_index":4577,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":2750,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":1318,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":1322,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":1320,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":1324,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1793,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:15",{"_index":1810,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:28",{"_index":1816,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":1808,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:53",{"_index":1801,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:65",{"_index":1800,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:77",{"_index":1818,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":4549,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":1783,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1779,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter((insightrepo",{"_index":4599,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":2530,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1751,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1774,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":2807,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":2808,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":2805,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":2803,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1782,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":2728,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":2522,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":2523,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":3432,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":3424,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":3426,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":2780,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":2777,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":4566,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":2774,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":2763,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":2810,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":2822,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":1733,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":4600,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1734,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":2830,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":2823,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":2870,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1746,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"index.html":{}}}],["insights.controller",{"_index":1218,"title":{},"body":{"modules/ContributorModule.html":{}}}],["insights.controller.ts",{"_index":1179,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["insights.controller.ts:22",{"_index":1203,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:35",{"_index":1196,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:48",{"_index":1193,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:61",{"_index":1200,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.dto",{"_index":1204,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["insights.dto.ts",{"_index":3101,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{},"coverage.html":{}}}],["insights.dto.ts:11",{"_index":3103,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.id",{"_index":2895,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":2887,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":2753,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":3171,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:12",{"_index":3179,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:20",{"_index":3181,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:24",{"_index":3186,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:36",{"_index":3185,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:49",{"_index":3188,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:63",{"_index":3190,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:97",{"_index":3183,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_role",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":2772,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":273,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":4584,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":2752,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["install",{"_index":5335,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5334,"title":{},"body":{"index.html":{}}}],["installed",{"_index":5249,"title":{},"body":{"index.html":{}}}],["instance",{"_index":5256,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":823,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["instructions",{"_index":915,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["integer",{"_index":89,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{}}}],["integer'})@column",{"_index":1761,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["integer'})@column('bigint",{"_index":2131,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@column('integer",{"_index":1894,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["integer'})@column({type",{"_index":1562,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@isoptional()@type(undefined",{"_index":4044,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["integer'})@primarycolumn('bigint",{"_index":1526,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbUserNotification.html":{}}}],["integer'})@primarycolumn('integer",{"_index":1871,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["integer'})@primarycolumn()@primarygeneratedcolumn",{"_index":1725,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["integer'})@primarycolumn({type",{"_index":1809,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["integer'})@primarygeneratedcolumn",{"_index":1956,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["integer'})@primarygeneratedcolumn({type",{"_index":2109,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["integer'})@type(undefined)@isin(['0",{"_index":1081,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isin(['7",{"_index":1084,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@isoptional",{"_index":1076,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(100)@isoptional",{"_index":2494,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["integer'})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":1070,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["integrates",{"_index":5413,"title":{},"body":{"index.html":{}}}],["integration",{"_index":5412,"title":{},"body":{"index.html":{}}}],["integrations",{"_index":5517,"title":{},"body":{"properties.html":{}}}],["interest",{"_index":3554,"title":{},"body":{"injectables/RepoService.html":{}}}],["interests",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserService.html":{}}}],["interests.dto",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":4105,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":4107,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.map(async",{"_index":3553,"title":{},"body":{"injectables/RepoService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{},"overview.html":{}}}],["internal",{"_index":1886,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":124,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["invalid",{"_index":755,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["invitation",{"_index":1763,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1752,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1753,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":1333,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["ip",{"_index":5708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_accepted",{"_index":1984,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["is_favorite",{"_index":1719,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_onboarded",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["is_open_sauced_member",{"_index":5105,"title":{},"body":{"injectables/UserService.html":{}}}],["is_public",{"_index":1146,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["is_waitlisted",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":943,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":1121,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["isboolean",{"_index":740,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["iscreatinglogs",{"_index":2943,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":1395,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":1336,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1087,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":1092,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":2531,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":2976,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":3262,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":3263,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":3464,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isenum(userlistcontributorstatsorderenum",{"_index":4732,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["isenum(userlistcontributorstatstypeenum",{"_index":1139,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["isglobal",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1135,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":4064,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":1287,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":1286,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"pull_request",{"_index":1400,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isin([\"view",{"_index":4058,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([0",{"_index":2977,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isin([7",{"_index":1137,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/PageOptionsDto.html":{}}}],["isint",{"_index":1136,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["ismember",{"_index":4553,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":1278,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{}}}],["iso",{"_index":1638,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["isoptional",{"_index":1088,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isoptional()@isstring",{"_index":1347,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":520,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":1306,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issue",{"_index":767,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["issue'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":2902,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["issuecomments",{"_index":1339,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issuedescription",{"_index":1340,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["issues",{"_index":1632,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbUserListContributorStat.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["issues/issue",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["issues_created",{"_index":1626,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbUserListContributorStat.html":{}}}],["issuesummarycontroller",{"_index":2898,"title":{"controllers/IssueSummaryController.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"coverage.html":{}}}],["issuesummarymodule",{"_index":274,"title":{"modules/IssueSummaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssueSummaryModule.html":{},"modules.html":{},"overview.html":{}}}],["issuesummaryservice",{"_index":2904,"title":{"injectables/IssueSummaryService.html":{}},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{},"overview.html":{}}}],["issuetitle",{"_index":1341,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["isurl",{"_index":4095,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":2487,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["it'})@apiokresponse({type",{"_index":3717,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["it'})@apiparam({name",{"_index":3719,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["italian",{"_index":1260,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":979,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":3373,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["item.is_public",{"_index":4778,"title":{},"body":{"injectables/UserListService.html":{}}}],["item.repos.foreach(async",{"_index":2888,"title":{},"body":{"injectables/InsightsService.html":{}}}],["item.user_id",{"_index":4779,"title":{},"body":{"injectables/UserListService.html":{}}}],["itemcount",{"_index":1026,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["items",{"_index":1039,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2187,"title":{},"body":{"entities/DbUserList.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":3104,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":2814,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":2815,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["join",{"_index":207,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["join(\"\\n",{"_index":811,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":1573,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["jpmcb",{"_index":185,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["js",{"_index":5060,"title":{},"body":{"injectables/UserService.html":{}}}],["js/dist/module/lib/types",{"_index":833,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify",{"_index":848,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify(parameters",{"_index":1510,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":3891,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":4027,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key",{"_index":5266,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["keyout",{"_index":5300,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":5518,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":5475,"title":{},"body":{"license.html":{}}}],["korean",{"_index":1265,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1882,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1873,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1828,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1829,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":5602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":794,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":1191,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"classes/SupabaseAuthDto.html":{},"miscellaneous/variables.html":{}}}],["last_merged_at",{"_index":1091,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1830,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["lastvaluefrom",{"_index":3089,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["lastvaluefrom(this.httpservice.post(`${host}:${port}/bake",{"_index":3098,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["latest",{"_index":3888,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["leave",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{}}}],["leftjoin",{"_index":230,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["leftjoin(\"users",{"_index":2458,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/UserListService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":3508,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":3506,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":2886,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":3507,"title":{},"body":{"injectables/RepoService.html":{}}}],["length",{"_index":1267,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["less",{"_index":2501,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["letters",{"_index":4087,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":485,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":5367,"title":{},"body":{"index.html":{}}}],["liability",{"_index":5488,"title":{},"body":{"license.html":{}}}],["liable",{"_index":5485,"title":{},"body":{"license.html":{}}}],["lib",{"_index":5361,"title":{},"body":{"index.html":{}}}],["license",{"_index":5441,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":93,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["limit(limit",{"_index":5096,"title":{},"body":{"injectables/UserService.html":{}}}],["limit(pageoptionsdto.limit",{"_index":1113,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":5454,"title":{},"body":{"license.html":{}}}],["limited",{"_index":5477,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":5707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limiting](#ratelimiting",{"_index":5775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["line",{"_index":150,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["line_items",{"_index":3824,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1841,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["linkedin",{"_index":3993,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["links",{"_index":5777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linting",{"_index":5380,"title":{},"body":{"index.html":{}}}],["lintthis",{"_index":5383,"title":{},"body":{"index.html":{}}}],["list",{"_index":8,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["list'})@apibadrequestresponse({description",{"_index":4635,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4643,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4660,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbuserlistcontributor)@apiokresponse({type",{"_index":4664,"title":{},"body":{"controllers/UserListController.html":{}}}],["list'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbuserlistcontributorstat)@apiokresponse({type",{"_index":4846,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["list'})@isstring",{"_index":1405,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list'})@useguards(supabaseguard)@apibearerauth()@apiokresponse({type",{"_index":2637,"title":{},"body":{"controllers/HighlightController.html":{}}}],["list.controller",{"_index":4723,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.controller.ts",{"_index":4621,"title":{},"body":{"controllers/UserListController.html":{},"coverage.html":{}}}],["list.controller.ts:100",{"_index":4673,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:125",{"_index":4638,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:142",{"_index":4650,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:158",{"_index":4666,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:175",{"_index":4669,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:197",{"_index":4646,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:211",{"_index":4658,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:43",{"_index":4653,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:61",{"_index":4636,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.controller.ts:84",{"_index":4661,"title":{},"body":{"controllers/UserListController.html":{}}}],["list.dto",{"_index":4675,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["list.dto.ts",{"_index":1141,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"coverage.html":{}}}],["list.dto.ts:17",{"_index":1406,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:25",{"_index":1404,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:34",{"_index":1403,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["list.dto.ts:6",{"_index":1142,"title":{},"body":{"classes/Contributor.html":{}}}],["list.dto.ts:7",{"_index":1143,"title":{},"body":{"classes/Contributor.html":{}}}],["list.entity",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["list.entity.ts",{"_index":2179,"title":{},"body":{"entities/DbUserList.html":{},"coverage.html":{}}}],["list.entity.ts:30",{"_index":2183,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:41",{"_index":2191,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:51",{"_index":2189,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:58",{"_index":2184,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:68",{"_index":2181,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:78",{"_index":2190,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:88",{"_index":2182,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.entity.ts:96",{"_index":2186,"title":{},"body":{"entities/DbUserList.html":{}}}],["list.is_public",{"_index":4786,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.module",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["list.module.ts",{"_index":4721,"title":{},"body":{"modules/UserListModule.html":{}}}],["list.name",{"_index":4785,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service",{"_index":4677,"title":{},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{}}}],["list.service.ts",{"_index":4733,"title":{},"body":{"injectables/UserListService.html":{},"coverage.html":{}}}],["list.service.ts:109",{"_index":4751,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:119",{"_index":4758,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:134",{"_index":4769,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:138",{"_index":4756,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:142",{"_index":4761,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:17",{"_index":4746,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:182",{"_index":4763,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:199",{"_index":4767,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:28",{"_index":4753,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:34",{"_index":4752,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:40",{"_index":4754,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:46",{"_index":4764,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:67",{"_index":4766,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:88",{"_index":4759,"title":{},"body":{"injectables/UserListService.html":{}}}],["list.service.ts:99",{"_index":4749,"title":{},"body":{"injectables/UserListService.html":{}}}],["list_id",{"_index":2196,"title":{},"body":{"entities/DbUserListContributor.html":{},"injectables/UserListService.html":{}}}],["list_user",{"_index":2180,"title":{},"body":{"entities/DbUserList.html":{}}}],["listallbakedrepos",{"_index":2993,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(@query",{"_index":3050,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallbakedrepos(pageoptionsdto",{"_index":3010,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors",{"_index":2994,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(@query",{"_index":3059,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitauthors(pageoptionsdto",{"_index":3013,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid",{"_index":2995,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbybakedrepoid(pageoptionsdto",{"_index":3019,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid",{"_index":2996,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallcommitsbycommitauthorid(pageoptionsdto",{"_index":3024,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["listallpullrequests",{"_index":3109,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(@query",{"_index":3134,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":3120,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listcontributors",{"_index":4685,"title":{},"body":{"controllers/UserListController.html":{}}}],["listid",{"_index":80,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["listing",{"_index":2297,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{}}}],["lists",{"_index":4622,"title":{},"body":{"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["lists'})@apibadrequestresponse({description",{"_index":4652,"title":{},"body":{"controllers/UserListController.html":{}}}],["lists/dtos/collaborators.dto.ts",{"_index":940,"title":{},"body":{"classes/CollaboratorsDto.html":{},"coverage.html":{}}}],["lists/dtos/collaborators.dto.ts:14",{"_index":945,"title":{},"body":{"classes/CollaboratorsDto.html":{}}}],["lists/dtos/contributions",{"_index":1020,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"coverage.html":{}}}],["lists/dtos/create",{"_index":1140,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"coverage.html":{}}}],["lists/dtos/filter",{"_index":2489,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"coverage.html":{}}}],["lists/dtos/most",{"_index":4727,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lists/entities/contributions",{"_index":1624,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"coverage.html":{}}}],["lists/entities/contributors",{"_index":1650,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{},"coverage.html":{}}}],["lists/entities/timezones.entity.ts",{"_index":2061,"title":{},"body":{"classes/DbTimezone.html":{},"coverage.html":{}}}],["lists/entities/timezones.entity.ts:8",{"_index":2063,"title":{},"body":{"classes/DbTimezone.html":{}}}],["lists/entities/user",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"coverage.html":{}}}],["lists/user",{"_index":7,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["literal",{"_index":830,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserListDto.html":{}}}],["live",{"_index":5239,"title":{},"body":{"index.html":{}}}],["load",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":3515,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":3518,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":3519,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":3517,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":3516,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":3978,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":5581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally",{"_index":5279,"title":{},"body":{"index.html":{}}}],["location",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserListService.html":{},"injectables/UserService.html":{}}}],["log",{"_index":1413,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":1481,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":1425,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":2938,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":1346,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:10",{"_index":1350,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:14",{"_index":1349,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:6",{"_index":1348,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":2928,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":1433,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":457,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["logger(`http",{"_index":2709,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":3880,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":1470,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":2708,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":1487,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":1489,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":1491,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:38",{"_index":1485,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:42",{"_index":1494,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:46",{"_index":1483,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":1480,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:61",{"_index":1496,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":2710,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":1432,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":1409,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:19",{"_index":1426,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:29",{"_index":1424,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:39",{"_index":1430,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:49",{"_index":1421,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:59",{"_index":1428,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":1419,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":5547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":5194,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":468,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":470,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":5360,"title":{},"body":{"index.html":{}}}],["login",{"_index":78,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributionStatTimeframe.html":{},"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["loglevels",{"_index":1435,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":1473,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":1484,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":2923,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":1474,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":1486,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":1475,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":1488,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":1476,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":1490,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1791,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":1477,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":1493,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":1418,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":2935,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":1411,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loops",{"_index":152,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loops/no",{"_index":151,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["loose",{"_index":5629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":3523,"title":{},"body":{"injectables/RepoService.html":{}}}],["lower(\"pull_requests\".\"author_login",{"_index":4805,"title":{},"body":{"injectables/UserListService.html":{}}}],["lower(author_login",{"_index":5087,"title":{},"body":{"injectables/UserService.html":{}}}],["lower(prs.merged_by_login",{"_index":5089,"title":{},"body":{"injectables/UserService.html":{}}}],["lower(user.login",{"_index":4806,"title":{},"body":{"injectables/UserListService.html":{}}}],["machine",{"_index":5327,"title":{},"body":{"index.html":{}}}],["machines",{"_index":5251,"title":{},"body":{"index.html":{}}}],["made",{"_index":2106,"title":{},"body":{"entities/DbUserHighlight.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":1924,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["main'})@column('text",{"_index":1898,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["make",{"_index":189,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/UpdateUserDto.html":{},"injectables/UserListStatsService.html":{},"index.html":{}}}],["maker",{"_index":4097,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":4080,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["making",{"_index":5392,"title":{},"body":{"index.html":{}}}],["managesubscriptionstatuschange",{"_index":3861,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":3867,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["many",{"_index":5349,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["manytoone",{"_index":1574,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":1941,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["map",{"_index":3090,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["map((notification",{"_index":4941,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["mapping",{"_index":5325,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":752,"title":{},"body":{"controllers/BlogSummaryController.html":{},"classes/CreateBlogSummaryDto.html":{}}}],["markdowndescription",{"_index":5620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marknotificationsasread",{"_index":4913,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":4929,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":4096,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4098,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":243,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":2966,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1279,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(10",{"_index":1285,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(100",{"_index":2514,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{}}}],["max(10000",{"_index":2975,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(500",{"_index":1283,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":800,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":791,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":1366,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":463,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1814,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["measured",{"_index":5714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["member",{"_index":1332,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":4523,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":4538,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":2860,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":4514,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:140",{"_index":4540,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:178",{"_index":4534,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:61",{"_index":4530,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:92",{"_index":4525,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":4542,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":1331,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":1335,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":4057,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":1749,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:100",{"_index":1768,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:110",{"_index":1765,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:25",{"_index":1760,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:33",{"_index":1762,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:41",{"_index":1773,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:52",{"_index":1771,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:63",{"_index":1756,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:73",{"_index":1757,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:83",{"_index":1772,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:90",{"_index":1758,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":2861,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":2765,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":2773,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:21",{"_index":2778,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:27",{"_index":2786,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:41",{"_index":2776,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:45",{"_index":2790,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:49",{"_index":2788,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:53",{"_index":2783,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:81",{"_index":2785,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":4532,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":4528,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["memory",{"_index":2593,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":5555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":5559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":2589,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":797,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["merchantability",{"_index":5479,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1601,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/FilterListContributorsDto.html":{},"license.html":{}}}],["mergeable",{"_index":1831,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":1832,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_at",{"_index":1833,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["merged_by_login",{"_index":1834,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_pull_requests\".\"updated_at",{"_index":3527,"title":{},"body":{"injectables/RepoService.html":{}}}],["message",{"_index":834,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":851,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":1048,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["meta.dto",{"_index":1050,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["meta.dto.ts",{"_index":2955,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:10",{"_index":2960,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:17",{"_index":2959,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:24",{"_index":2958,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:31",{"_index":2961,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:37",{"_index":2957,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:43",{"_index":2956,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":2221,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["metadata",{"_index":2024,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["method",{"_index":498,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["methodkey",{"_index":5650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["microservice",{"_index":3031,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["middlewareconsumer",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations",{"_index":5333,"title":{},"body":{"index.html":{}}}],["migrations.sh",{"_index":5331,"title":{},"body":{"index.html":{}}}],["milestone",{"_index":1390,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["min",{"_index":1280,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(0",{"_index":1284,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2513,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(100",{"_index":1282,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimum",{"_index":2512,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/TopUsersDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":2818,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":1362,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minlength(20",{"_index":1365,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":1398,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"classes/FilteredUsersDto.html":{}}}],["minus",{"_index":3210,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["miscellaneous",{"_index":5220,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":5402,"title":{},"body":{"index.html":{}}}],["mit",{"_index":5442,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":3227,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":5371,"title":{},"body":{"index.html":{}}}],["mode",{"_index":3826,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":849,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/OpenAiService.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":5674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":5456,"title":{},"body":{"license.html":{}}}],["module",{"_index":244,"title":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":246,"title":{"modules.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":3214,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["months",{"_index":3139,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["months'})@apiokresponse({type",{"_index":3113,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":5766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mostactive",{"_index":2819,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":2820,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mote",{"_index":5761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mountain",{"_index":2506,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["move",{"_index":5358,"title":{},"body":{"index.html":{}}}],["mrpizza",{"_index":3999,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["my_postgres_container",{"_index":5319,"title":{},"body":{"index.html":{}}}],["my_postgres_image",{"_index":5309,"title":{},"body":{"index.html":{}}}],["my_postgres_image:latestthis",{"_index":5323,"title":{},"body":{"index.html":{}}}],["n",{"_index":855,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["name",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["named",{"_index":5324,"title":{},"body":{"index.html":{}}}],["names",{"_index":1380,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["navigating",{"_index":5283,"title":{},"body":{"index.html":{}}}],["ncommit",{"_index":3169,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":5246,"title":{},"body":{"index.html":{}}}],["needs",{"_index":5365,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":5615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":1431,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":720,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":519,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":1535,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":24,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":1497,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":1500,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":2711,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":4020,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":108,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcount",{"_index":170,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder",{"_index":167,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.getcount",{"_index":171,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcountquerybuilder.innerjoin",{"_index":168,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["newcustomer",{"_index":693,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":696,"title":{},"body":{"controllers/AuthController.html":{}}}],["newer",{"_index":3315,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["newhighlight",{"_index":4482,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newinsight",{"_index":4590,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":4558,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newkey",{"_index":5298,"title":{},"body":{"index.html":{}}}],["newlist",{"_index":4683,"title":{},"body":{"controllers/UserListController.html":{}}}],["newlog",{"_index":2940,"title":{},"body":{"injectables/LogService.html":{}}}],["newpullrequestcontributors",{"_index":1184,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newpullrequestcontributors(pageoptionsdto",{"_index":1201,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newuser",{"_index":5107,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserhighlight",{"_index":4473,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserlist",{"_index":4783,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserlistcontributor",{"_index":4788,"title":{},"body":{"injectables/UserListService.html":{}}}],["newuserrepo",{"_index":5012,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":149,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"interfaces/ChatResponse.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nextfunction",{"_index":2707,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node>=16.7.0",{"_index":5252,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1881,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["nodes",{"_index":5302,"title":{},"body":{"index.html":{}}}],["non",{"_index":921,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["noninfringement",{"_index":5483,"title":{},"body":{"license.html":{}}}],["note",{"_index":5305,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":18,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"the",{"_index":1244,"title":{},"body":{"injectables/CouponService.html":{}}}],["notfoundexception(\"unable",{"_index":5126,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"user",{"_index":4793,"title":{},"body":{"injectables/UserListService.html":{}}}],["notfoundexception(\"you",{"_index":3770,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":5469,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":4273,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":4908,"title":{},"body":{"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["notifcation.service.ts:13",{"_index":4915,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":4926,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":4928,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:52",{"_index":4924,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:63",{"_index":4918,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:75",{"_index":4922,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:87",{"_index":4920,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:99",{"_index":4930,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":2228,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{}}}],["notification.constants",{"_index":2244,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["notification.constants.ts",{"_index":5215,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":4897,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":4900,"title":{},"body":{"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:25",{"_index":4904,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":2218,"title":{},"body":{"entities/DbUserNotification.html":{},"coverage.html":{}}}],["notification.entity.ts:18",{"_index":2229,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:26",{"_index":2243,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:34",{"_index":2227,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:45",{"_index":2242,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:55",{"_index":2232,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:65",{"_index":2237,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:74",{"_index":2239,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:84",{"_index":2235,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:92",{"_index":2225,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":4942,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification.read_at",{"_index":4940,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":4931,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":4956,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":4486,"title":{},"body":{"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{}}}],["notified_at",{"_index":2222,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":107,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":5337,"title":{},"body":{"index.html":{}}}],["npm>=8.0.0",{"_index":5253,"title":{},"body":{"index.html":{}}}],["null",{"_index":238,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CouponService.html":{},"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["number",{"_index":13,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":4392,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":2761,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":5563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":5566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":5556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":5560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":5591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":5600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":4088,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["numerical",{"_index":1811,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":5511,"title":{},"body":{"properties.html":{}}}],["object",{"_index":3416,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":2985,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":1147,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtain",{"_index":5286,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":5451,"title":{},"body":{"license.html":{}}}],["oct",{"_index":3211,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["octo",{"_index":5438,"title":{},"body":{"index.html":{}}}],["october",{"_index":3202,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["offset(pageoptionsdto.skip",{"_index":1112,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["omittype",{"_index":4368,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["omittype(dbuserhighlight",{"_index":4373,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["omittype(dbusernotification",{"_index":4906,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["onboarded",{"_index":3988,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{}}}],["onboarding.dto",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["onboarding.dto.ts",{"_index":4960,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":4961,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":4963,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["once",{"_index":5264,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":1532,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["open_pull_requests",{"_index":3522,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":3524,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"updated_at",{"_index":3525,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["openaimodule",{"_index":275,"title":{"modules/OpenAiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules.html":{},"overview.html":{}}}],["openaiservice",{"_index":786,"title":{"injectables/OpenAiService.html":{}},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{},"overview.html":{}}}],["openapi",{"_index":5390,"title":{},"body":{"index.html":{}}}],["opening",{"_index":5389,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":2386,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":4068,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":5614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openssl",{"_index":5296,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["operationidfactory",{"_index":5648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option",{"_index":734,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["optional",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["options",{"_index":137,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/variables.html":{}}}],["options.blogmarkdown",{"_index":815,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.blogtitle}\\n\\nblog",{"_index":814,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["options.build",{"_index":5647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.code}\\n",{"_index":893,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["options.commitmessages",{"_index":3168,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":3170,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.contributortype",{"_index":139,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.descriptionlength",{"_index":894,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":3166,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":3167,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":971,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":1055,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:13",{"_index":2703,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":2524,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:17",{"_index":2970,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":3465,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":1066,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":2529,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:25",{"_index":2169,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["options.dto.ts:26",{"_index":2812,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":3255,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":2526,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":3466,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":2816,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":2528,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":3454,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":2813,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":3261,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:46",{"_index":2972,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":3256,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":3257,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:57",{"_index":2971,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:59",{"_index":2973,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":3260,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":3249,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:80",{"_index":3251,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":3423,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["options.issuecomments",{"_index":2922,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuedescription}\\nissue",{"_index":2921,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.issuetitle}\\nissue",{"_index":2920,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["options.range",{"_index":128,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["options.repo",{"_index":3418,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repoids",{"_index":3233,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":3234,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.summarylength",{"_index":819,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["options.temperature",{"_index":821,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":820,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":3220,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["order",{"_index":1679,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["orderby",{"_index":1056,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["orderby(\"endorsements.created_at",{"_index":2455,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":2896,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":4179,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":4454,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"user_lists.updated_at",{"_index":4782,"title":{},"body":{"injectables/UserListService.html":{}}}],["orderby(\"user_notifications.notified_at",{"_index":4938,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["orderby(\"users.name",{"_index":2809,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":3540,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":1057,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":1072,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":3541,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":1073,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":1106,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1647,"title":{},"body":{"entities/DbContributionsProjects.html":{},"controllers/EndorsementController.html":{}}}],["org/repo",{"_index":1645,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["org_id",{"_index":195,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"injectables/UserListStatsService.html":{}}}],["organization",{"_index":2254,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["organization.entity.ts",{"_index":2249,"title":{},"body":{"entities/DbUserOrganization.html":{},"coverage.html":{}}}],["organization.entity.ts:26",{"_index":2255,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:34",{"_index":2260,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:42",{"_index":2256,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:52",{"_index":2252,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:59",{"_index":2253,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:67",{"_index":2259,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization.entity.ts:75",{"_index":2258,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization_id",{"_index":2250,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["organization_user",{"_index":2251,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["orgs",{"_index":4985,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["orgs'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":4971,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["origin",{"_index":1613,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":2719,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere",{"_index":2894,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orwhere(\"lower(users.login",{"_index":2463,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":5492,"title":{},"body":{"license.html":{}}}],["out",{"_index":254,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outside",{"_index":923,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["oven",{"_index":3030,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller",{"_index":3075,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.controller.ts",{"_index":2991,"title":{},"body":{"controllers/PizzaOvenController.html":{},"coverage.html":{}}}],["oven.controller.ts:103",{"_index":3009,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:115",{"_index":3023,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:130",{"_index":3027,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:41",{"_index":3033,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:57",{"_index":3002,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:68",{"_index":3012,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:80",{"_index":3006,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.controller.ts:91",{"_index":3018,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["oven.module",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{}}}],["oven.module.ts",{"_index":3074,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["oven.service",{"_index":2835,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{}}}],["oven.service.ts",{"_index":3077,"title":{},"body":{"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["oven.service.ts:15",{"_index":3081,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:24",{"_index":3083,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:30",{"_index":3088,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:42",{"_index":3086,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["oven.service.ts:56",{"_index":3085,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["over",{"_index":2503,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"controllers/PullRequestController.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":5501,"title":{"overview.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["overviews",{"_index":5432,"title":{},"body":{"index.html":{}}}],["owner",{"_index":2357,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["owneroruser",{"_index":2461,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":3534,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":2464,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":5320,"title":{},"body":{"index.html":{}}}],["package",{"_index":5506,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":5404,"title":{},"body":{"index.html":{}}}],["page",{"_index":1027,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["page.dto",{"_index":53,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["page.dto.ts",{"_index":1117,"title":{},"body":{"classes/ContributionsPageDto.html":{},"coverage.html":{}}}],["page.dto.ts:11",{"_index":1124,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["page.dto.ts:16",{"_index":1120,"title":{},"body":{"classes/ContributionsPageDto.html":{}}}],["pagecount",{"_index":1028,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":25,"title":{"classes/PageDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":1116,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["pagemeta.dto",{"_index":51,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pagemeta.dto.ts",{"_index":1021,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"coverage.html":{}}}],["pagemeta.dto.ts:11",{"_index":1031,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto",{"_index":1023,"title":{"classes/PageMetaDto.html":{}},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagemetadto:10",{"_index":1045,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:17",{"_index":1043,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:24",{"_index":1041,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:31",{"_index":1047,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:37",{"_index":1038,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto:43",{"_index":1036,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":1126,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":1030,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":104,"title":{"classes/PageOptionsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pageoptionsdto.contributortype",{"_index":113,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.limit",{"_index":2963,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.location",{"_index":4797,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.orderby",{"_index":1107,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":1110,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":2962,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.pr_velocity",{"_index":4801,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.range",{"_index":106,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["pageoptionsdto.repo",{"_index":3546,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":3545,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto.repoids?.split",{"_index":3337,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto.timezone",{"_index":4799,"title":{},"body":{"injectables/UserListService.html":{}}}],["pageoptionsdto.topic",{"_index":3327,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto:17",{"_index":1077,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:24",{"_index":3102,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["pageoptionsdto:30",{"_index":1071,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:35",{"_index":1075,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:46",{"_index":1085,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:57",{"_index":1083,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pager.service",{"_index":259,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["pagerservice",{"_index":251,"title":{"injectables/PagerService.html":{}},"body":{"modules/ApiServicesModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["pages",{"_index":1046,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{}}}],["paginate",{"_index":4190,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1166,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1159,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":3358,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":5729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginationinput",{"_index":2981,"title":{"interfaces/PaginationInput.html":{}},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["pair",{"_index":5290,"title":{},"body":{"index.html":{}}}],["param",{"_index":2372,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["param(\"emojiid",{"_index":4391,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":2684,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["param(\"memberid",{"_index":4564,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":2396,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":2397,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":2393,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"userlistcontributorid",{"_index":4713,"title":{},"body":{"controllers/UserListController.html":{}}}],["param(\"username",{"_index":2407,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["parameters.dto",{"_index":1049,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":2969,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":3335,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":3883,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":5101,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":5786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":2667,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":4047,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":4048,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":5481,"title":{},"body":{"license.html":{}}}],["passed",{"_index":3164,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":4026,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":719,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":4024,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportstrategy(supabaseauthstrategy",{"_index":4029,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["past",{"_index":1079,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/IssueSummaryService.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["patch",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/:id",{"_index":4377,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch(\"/profile",{"_index":698,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/coupon",{"_index":706,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":704,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":701,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":4563,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":4364,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/coupon')@apioperation({operationid",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":4133,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":4535,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch\\`](https://developer.mozilla.org/en",{"_index":5750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":500,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["payment_method_types",{"_index":3819,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1755,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["pending'})@column({type",{"_index":1754,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":1042,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["perceived",{"_index":5760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perform",{"_index":5711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["period",{"_index":2037,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":5445,"title":{},"body":{"license.html":{}}}],["permit",{"_index":5463,"title":{},"body":{"license.html":{}}}],["person",{"_index":5450,"title":{},"body":{"license.html":{}}}],["persons",{"_index":5464,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":1273,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["picktype",{"_index":2170,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picktype(dbuserhighlightreaction",{"_index":2173,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["pid,hostname,context",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":2098,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza",{"_index":735,"title":{},"body":{"classes/BakeRepoDto.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":4066,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza/dtos/baked",{"_index":2836,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["pizza/entities/baked",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commit_authors.entity",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/entities/commits.entity",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["pizza/pizza",{"_index":426,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{}}}],["pizza_oven_api=80",{"_index":5416,"title":{},"body":{"index.html":{}}}],["pizza_oven_host=\"http://example.com",{"_index":5415,"title":{},"body":{"index.html":{}}}],["pizzaconfig",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pizzaovencontroller",{"_index":2989,"title":{"controllers/PizzaOvenController.html":{}},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"coverage.html":{}}}],["pizzaovenmodule",{"_index":276,"title":{"modules/PizzaOvenModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules.html":{},"overview.html":{}}}],["pizzaovenservice",{"_index":2828,"title":{"injectables/PizzaOvenService.html":{}},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{},"overview.html":{}}}],["platform",{"_index":5697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":5423,"title":{},"body":{"index.html":{}}}],["port",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"injectables/PizzaOvenService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":5473,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":1261,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["post(\"/:id/contributors",{"_index":4707,"title":{},"body":{"controllers/UserListController.html":{}}}],["post(\"/:id/featured",{"_index":2683,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":4390,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":685,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":3156,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/explanation/generate",{"_index":881,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post(\"/onboarding",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":907,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/summary/generate",{"_index":772,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post(\"/test/generate",{"_index":933,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":3915,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":4551,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":3029,"title":{},"body":{"controllers/PizzaOvenController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":2336,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/contributors')@apioperation({operationid",{"_index":4668,"title":{},"body":{"controllers/UserListController.html":{}}}],["post('/:id/featured')@apioperation({operationid",{"_index":2634,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":4332,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":3150,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/explanation/generate')@apioperation({operationid",{"_index":869,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":900,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/summary/generate')@apioperation({operationid",{"_index":749,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["post('/test/generate')@apioperation({operationid",{"_index":928,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":3864,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":4519,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post\\`](https://developer.mozilla.org/en",{"_index":5746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postcreatecheckoutsession",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(@user",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":5312,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":5258,"title":{},"body":{"index.html":{}}}],["postonboarding",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(@userid",{"_index":676,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttopizzaovenservice",{"_index":2997,"title":{},"body":{"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["posttopizzaovenservice'})@apiacceptedresponse()@apibadrequestresponse({description",{"_index":3032,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(@body",{"_index":3043,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakeoptionsinfo",{"_index":3028,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["posttopizzaovenservice(bakerepoinfo",{"_index":3087,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["postuserlistcontributors",{"_index":4631,"title":{},"body":{"controllers/UserListController.html":{}}}],["postuserlistcontributors(updatecollaboratorsdto",{"_index":4667,"title":{},"body":{"controllers/UserListController.html":{}}}],["postwaitlist",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(@userid",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":5510,"title":{},"body":{"properties.html":{}}}],["pr",{"_index":206,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/FilterListContributorsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserListStatsService.html":{}}}],["pr!'})@column('text",{"_index":2122,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":1385,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":3218,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr\".\"updated_at",{"_index":3209,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["pr.\"author_login",{"_index":224,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr.\"repo_id",{"_index":210,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pr_velocity",{"_index":2491,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["preferences",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["prefs.dto",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":4099,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":4102,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":4104,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prerequisites",{"_index":5244,"title":{},"body":{"index.html":{}}}],["present",{"_index":3162,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["pretty",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["prev_days_start_date",{"_index":1058,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["prev_start_date",{"_index":5662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preview",{"_index":5373,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1037,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{}}}],["previous_month",{"_index":3350,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["previous_month_prs",{"_index":235,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previous_month_prs\".\"author_login",{"_index":236,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["previously",{"_index":5315,"title":{},"body":{"index.html":{}}}],["prevmonthquery",{"_index":3347,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["price",{"_index":2044,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":2059,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":2045,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":2025,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["prid",{"_index":3271,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["primarycolumn",{"_index":1533,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":1541,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1916,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["primarycolumn(\"text",{"_index":2058,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":1692,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1792,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1787,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":3180,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["private",{"_index":60,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proceed",{"_index":5426,"title":{},"body":{"index.html":{}}}],["process",{"_index":5757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ci",{"_index":5554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":5613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":5548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":5689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":4033,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":4036,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":4031,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":5376,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":1364,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbContributionsProjects.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserListStatsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["project')@apioperation({operationid",{"_index":4821,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project's",{"_index":5267,"title":{},"body":{"index.html":{}}}],["project'})@apibadrequestresponse({description",{"_index":4824,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4840,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":1358,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project?'})@column({type",{"_index":2080,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["project_id",{"_index":198,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionsProjects.html":{},"injectables/UserListStatsService.html":{}}}],["projects",{"_index":98,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["projects.entity",{"_index":46,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["projects.entity.ts",{"_index":1644,"title":{},"body":{"entities/DbContributionsProjects.html":{},"coverage.html":{}}}],["projects.entity.ts:16",{"_index":1648,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:28",{"_index":1649,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["projects.entity.ts:40",{"_index":1646,"title":{},"body":{"entities/DbContributionsProjects.html":{}}}],["promise",{"_index":71,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all",{"_index":3141,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all([querybuilder.getcount",{"_index":2988,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserService.html":{}}}],["promise.all(contributors",{"_index":4711,"title":{},"body":{"controllers/UserListController.html":{}}}],["promise.all(framepromises",{"_index":135,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["promise.all(notifications",{"_index":4490,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["promise.all(repostoremoverequests",{"_index":4609,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":4619,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":4958,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["promise.allsettled(listcontributors",{"_index":4690,"title":{},"body":{"controllers/UserListController.html":{}}}],["promises",{"_index":3552,"title":{},"body":{"injectables/RepoService.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":1536,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":5265,"title":{},"body":{"index.html":{},"properties.html":{}}}],["provided",{"_index":873,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":257,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["provides",{"_index":5698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prquery",{"_index":3216,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":865,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbUserListContributorStat.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/UserService.html":{}}}],["prs.repo_id=repos.id",{"_index":5088,"title":{},"body":{"injectables/UserService.html":{}}}],["prs_created",{"_index":92,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbUserListContributorStat.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["prs_reviewed",{"_index":1627,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbUserListContributorStat.html":{}}}],["public",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{},"classes/CommitAuthorDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["publish",{"_index":5457,"title":{},"body":{"license.html":{}}}],["published",{"_index":1939,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["published_at",{"_index":1932,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull",{"_index":202,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserListModule.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{}}}],["pull_request",{"_index":1387,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["pull_request'})@column('text",{"_index":2124,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pull_request'})@isstring()@isin(['pull_request",{"_index":1388,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pull_request_id",{"_index":1942,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["pull_requests",{"_index":85,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["pull_requests\".\"author_login",{"_index":86,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"created_at\"::date",{"_index":4804,"title":{},"body":{"injectables/UserListService.html":{}}}],["pull_requests\".\"repo_id",{"_index":88,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":3318,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests\".\"updated_at",{"_index":160,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserListStatsService.html":{}}}],["pull_requests_full_name",{"_index":3323,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":3325,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":3529,"title":{},"body":{"injectables/RepoService.html":{}}}],["pull_requests_velocity\".\"updated_at",{"_index":3530,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequest",{"_index":1933,"title":{},"body":{"entities/DbPullRequestReview.html":{},"injectables/PullRequestReviewService.html":{}}}],["pullrequestcontributorinsightsdto",{"_index":1186,"title":{"classes/PullRequestContributorInsightsDto.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontributoroptionsdto",{"_index":1154,"title":{"classes/PullRequestContributorOptionsDto.html":{}},"body":{"controllers/ContributorController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontroller",{"_index":3105,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptioncontroller",{"_index":3147,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptionservice",{"_index":3154,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":3129,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":277,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":3252,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":3253,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":3124,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":3288,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pullrequestreviewrepository",{"_index":3268,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["pullrequestreviewservice",{"_index":3130,"title":{"injectables/PullRequestReviewService.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestservice",{"_index":1168,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":3132,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":3258,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":3259,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":5482,"title":{},"body":{"license.html":{}}}],["put",{"_index":3604,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":3610,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":3648,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":3687,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":3735,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":3613,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":3651,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":3689,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":3738,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":4314,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3597,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3639,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3678,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3722,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3602,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3643,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3681,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3725,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":4297,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":3191,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["qb.andwhere(sql",{"_index":3439,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":3438,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":5382,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":2026,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["query",{"_index":1163,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["query(\"repoid",{"_index":4857,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["querybuilder",{"_index":72,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addgroupby(\"emoji_id",{"_index":4501,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":5076,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.andwhere",{"_index":4802,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(\"user.location",{"_index":4798,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(\"user.timezone",{"_index":4800,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(\"user_highlight_reactions.user_id",{"_index":4500,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_highlights.user_id",{"_index":4452,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_lists.user_id",{"_index":4777,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.andwhere(sql",{"_index":4463,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":1114,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserNotificationService.html":{}}}],["querybuilder.getmany",{"_index":1115,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["querybuilder.getone",{"_index":980,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":4290,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":102,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.getrawone",{"_index":3235,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.groupby(\"users.login\").orderby(\"count(reactions.user_id",{"_index":5070,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.innerjoin",{"_index":3536,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.innerjoin(\"users",{"_index":74,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.limit(1",{"_index":3229,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.limit(20",{"_index":99,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["querybuilder.offset(pageoptionsdto.skip).limit(pageoptionsdto.limit",{"_index":976,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":2323,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.orderby(\"endorsements.created_at",{"_index":2453,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.setparameters",{"_index":3232,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.skip(pageoptionsdto.skip).take(pageoptionsdto.limit",{"_index":2897,"title":{},"body":{"injectables/InsightsService.html":{}}}],["querybuilder.where(\"baked_repo_id",{"_index":1007,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"code",{"_index":1240,"title":{},"body":{"injectables/CouponService.html":{}}}],["querybuilder.where(\"commit_author_id",{"_index":1008,"title":{},"body":{"injectables/CommitsService.html":{}}}],["querybuilder.where(\"contribution.repo_id",{"_index":1108,"title":{},"body":{"injectables/ContributionService.html":{}}}],["querybuilder.where(\"customer.id=:id",{"_index":1466,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"customer.stripe_customer_id=:id",{"_index":1467,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"endorsements.creator_user_id",{"_index":2454,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"endorsements.id",{"_index":2469,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"id",{"_index":978,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":2794,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"r2stars.repo_id",{"_index":3763,"title":{},"body":{"injectables/StarService.html":{}}}],["querybuilder.where(\"r2submits.repo_id",{"_index":3958,"title":{},"body":{"injectables/SubmitService.html":{}}}],["querybuilder.where(\"repo.full_name",{"_index":3533,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"repo.id",{"_index":3532,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":4172,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(\"user_highlights.user_id",{"_index":4472,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(\"user_lists.user_id",{"_index":4781,"title":{},"body":{"injectables/UserListService.html":{}}}],["querybuilder.where(\"user_repos.user_id",{"_index":5015,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(`user_highlights.featured",{"_index":4464,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(`users.email",{"_index":5130,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(sql",{"_index":4462,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":1482,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":1501,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":5428,"title":{},"body":{"index.html":{}}}],["range",{"_index":105,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["rate",{"_index":5706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimit",{"_index":5723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbody",{"_index":5618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rawbodyrequest",{"_index":3863,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["react",{"_index":4108,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":2166,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":1674,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":4348,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction'})@apiparam({name",{"_index":4335,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":2161,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":2142,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["reaction.entity.ts",{"_index":2137,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:102",{"_index":2147,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:110",{"_index":2154,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:118",{"_index":2143,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:27",{"_index":2149,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":2148,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:49",{"_index":2155,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":2145,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":2140,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:81",{"_index":2152,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:85",{"_index":2141,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:94",{"_index":2151,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":2159,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":2146,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":2160,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":2153,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":2139,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction_users",{"_index":2164,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":4507,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":4508,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":1673,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":2661,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["reactions.highlight_id",{"_index":5066,"title":{},"body":{"injectables/UserService.html":{}}}],["reactionsquerybuilder",{"_index":5023,"title":{},"body":{"injectables/UserService.html":{}}}],["read",{"_index":2238,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/variables.html":{}}}],["read_at",{"_index":2223,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1805,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readonly",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EndorsementController.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"controllers/IssueSummaryController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["rebaseable",{"_index":1835,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receipient",{"_index":2090,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive",{"_index":5737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["receive_collaboration",{"_index":4101,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":2361,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":1189,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":4103,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recipient",{"_index":1300,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{},"controllers/UserCollaborationController.html":{}}}],["recipient_user_id",{"_index":1292,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["recommendation.controller",{"_index":4899,"title":{},"body":{"modules/UserModule.html":{}}}],["recommendation.controller.ts",{"_index":4964,"title":{},"body":{"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["recommendation.controller.ts:27",{"_index":4977,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendation.controller.ts:43",{"_index":4973,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendations",{"_index":4979,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommended",{"_index":4970,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["record",{"_index":2384,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/RepoService.html":{}}}],["record'})@apiokresponse({type",{"_index":2337,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":3919,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1900,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":896,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["referencedcolumnname",{"_index":1559,"title":{},"body":{"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{}}}],["refusing",{"_index":5769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp_replace(regexp_replace(user_highlights.url",{"_index":4459,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["registeras(\"api",{"_index":5544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":5578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":5601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"hacktoberfest",{"_index":5667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":5671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"pizza",{"_index":5681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":5685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":3970,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["rejectunauthorized",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["release",{"_index":5240,"title":{},"body":{"index.html":{}}}],["relevantevents",{"_index":3872,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":3925,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":5724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":2429,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"properties.html":{}}}],["remove(id",{"_index":2448,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removeafeaturedhighlight",{"_index":2665,"title":{},"body":{"controllers/HighlightController.html":{}}}],["removed",{"_index":3586,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removefeatured",{"_index":4411,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removefeatured(highlightid",{"_index":4442,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removeinsight",{"_index":2866,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":2877,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":2731,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(@param(\"id",{"_index":2760,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":2740,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":2769,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":2787,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":4517,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":4531,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":2826,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":2833,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":2742,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":4158,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":4167,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":4115,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(@param(\"id",{"_index":4153,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":4129,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":4257,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":4271,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["repeat",{"_index":1199,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["repo",{"_index":728,"title":{},"body":{"classes/BakeRepoDto.html":{},"modules/ContributionModule.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionsProjects.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":3390,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo'})@apiparam({name",{"_index":3599,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo.contributions",{"_index":1623,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":1605,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":3451,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.dto",{"_index":2837,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{}}}],["repo.dto.ts",{"_index":726,"title":{},"body":{"classes/BakeRepoDto.html":{},"coverage.html":{}}}],["repo.dto.ts:11",{"_index":732,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.dto.ts:19",{"_index":739,"title":{},"body":{"classes/BakeRepoDto.html":{}}}],["repo.entity",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCommits.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1512,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:15",{"_index":2264,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:20",{"_index":1527,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:22",{"_index":2267,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:27",{"_index":2282,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:29",{"_index":2266,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:30",{"_index":1519,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:35",{"_index":2288,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:36",{"_index":2263,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:38",{"_index":1529,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:42",{"_index":1522,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["repo.entity.ts:43",{"_index":2285,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:46",{"_index":1781,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:53",{"_index":1778,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:63",{"_index":1775,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:70",{"_index":2280,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:73",{"_index":1776,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:78",{"_index":2287,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:8",{"_index":2178,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.entity.ts:81",{"_index":1780,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:86",{"_index":2284,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.fullname",{"_index":2849,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":2848,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":4605,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouser${relation",{"_index":3537,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":1967,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":1958,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":1982,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":1973,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":2000,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":1991,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":2291,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":2283,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":2015,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":2006,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":2859,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":2824,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:11",{"_index":2829,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:18",{"_index":2832,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:30",{"_index":2834,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":1325,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":3727,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["repo/repo.module",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":3366,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["repo/user",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":1293,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":1015,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":3376,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":3455,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":3240,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":3178,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":70,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/ContributionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":2520,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":1323,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":4604,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":278,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":1064,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":3452,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":2352,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":2462,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":3380,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":3467,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":3476,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":5354,"title":{},"body":{"index.html":{}}}],["repos",{"_index":208,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":211,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["repos\".\"updated_at",{"_index":3547,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":4194,"title":{},"body":{"controllers/UserController.html":{}}}],["repos'})@apibody({type",{"_index":4581,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto",{"_index":3728,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["repos.dto.ts",{"_index":4989,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repos.dto.ts:13",{"_index":4990,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.dto.ts:23",{"_index":5166,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:26",{"_index":5164,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.full_name",{"_index":3568,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos.id",{"_index":3428,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["repos.module",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":4997,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":4998,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":5000,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":5003,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:20",{"_index":5007,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:26",{"_index":5009,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:40",{"_index":5006,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:50",{"_index":5008,"title":{},"body":{"injectables/UserReposService.html":{}}}],["reposearchoptionsdto",{"_index":3384,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":3365,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":1382,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["repository",{"_index":20,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":3571,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":3618,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":3783,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":3754,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":4613,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":4617,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":4601,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":4607,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":4606,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":3656,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":3950,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":4616,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repovotecontroller",{"_index":3693,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":5144,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":5437,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1589,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":3866,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"index.html":{}}}],["req.headers",{"_index":3918,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4130,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":756,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":4120,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{}}}],["request'})@apiparam({name",{"_index":2641,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":4537,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":3243,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":3106,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:32",{"_index":3122,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:43",{"_index":3125,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:53",{"_index":3114,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:66",{"_index":3119,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequestReview.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{}}}],["request.entity.ts",{"_index":1819,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:100",{"_index":1899,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:107",{"_index":1906,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:127",{"_index":1885,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:137",{"_index":1875,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:144",{"_index":1852,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:151",{"_index":1850,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:16",{"_index":1872,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:161",{"_index":1848,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:171",{"_index":1847,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:181",{"_index":1864,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:191",{"_index":1859,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:201",{"_index":1890,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:208",{"_index":1892,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:218",{"_index":1915,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:228",{"_index":1887,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:23",{"_index":1897,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":1860,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:244",{"_index":1843,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:252",{"_index":1866,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:260",{"_index":1856,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:271",{"_index":1869,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:279",{"_index":1862,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:31",{"_index":1895,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:38",{"_index":1904,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:45",{"_index":1868,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:52",{"_index":1889,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:59",{"_index":1888,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:66",{"_index":1896,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:73",{"_index":1914,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:83",{"_index":1902,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:93",{"_index":1908,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":2486,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":3241,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":1169,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":3274,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:164",{"_index":3296,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:20",{"_index":3287,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:215",{"_index":3304,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:253",{"_index":3298,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:272",{"_index":3294,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:28",{"_index":3289,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:310",{"_index":3300,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:34",{"_index":3312,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:348",{"_index":3308,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:46",{"_index":3311,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:59",{"_index":3290,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:75",{"_index":3292,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:99",{"_index":3302,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":5785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":2069,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":2070,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":2071,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["requested",{"_index":4121,"title":{},"body":{"controllers/UserCollaborationController.html":{},"miscellaneous/variables.html":{}}}],["requester",{"_index":4145,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requester.role",{"_index":4147,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requestmethod",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":203,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserListStatsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requests'})@apibody({type",{"_index":4123,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requests/code",{"_index":863,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["requests/dtos/create",{"_index":2541,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["requests/dtos/pull",{"_index":1170,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"controllers/UserController.html":{},"modules/UserListModule.html":{},"coverage.html":{}}}],["requests/pull",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["require(\"node",{"_index":841,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["required",{"_index":3822,"title":{},"body":{"injectables/StripeService.html":{},"controllers/UserController.html":{}}}],["requires",{"_index":5764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reserved",{"_index":4090,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":253,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resets",{"_index":5726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":5772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resources",{"_index":5700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resp.status",{"_index":3100,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["respond",{"_index":5734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":807,"title":{},"body":{"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"miscellaneous/variables.html":{}}}],["response.decorator",{"_index":1167,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserRecommendationController.html":{}}}],["response.decorator.ts",{"_index":5180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":3967,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:105",{"_index":3998,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:111",{"_index":3979,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:117",{"_index":3995,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:123",{"_index":3984,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:129",{"_index":3977,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:136",{"_index":4002,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":4011,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:142",{"_index":3973,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":4003,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":3981,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":3972,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":3992,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":3974,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":4007,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":3989,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":3991,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:69",{"_index":3986,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:75",{"_index":3968,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":3985,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:81",{"_index":4000,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:87",{"_index":4010,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:93",{"_index":4006,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:99",{"_index":3969,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":858,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.ok",{"_index":856,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.on(\"finish",{"_index":2718,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["rest",{"_index":5696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":5453,"title":{},"body":{"license.html":{}}}],["results",{"_index":242,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[index",{"_index":3559,"title":{},"body":{"injectables/RepoService.html":{}}}],["retrieves",{"_index":2368,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["return",{"_index":66,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":5719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returns",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["review",{"_index":1935,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestReviewService.html":{}}}],["review.entity.ts",{"_index":1931,"title":{},"body":{"entities/DbPullRequestReview.html":{},"coverage.html":{}}}],["review.entity.ts:16",{"_index":1938,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:20",{"_index":1943,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:27",{"_index":1945,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:37",{"_index":1936,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:47",{"_index":1940,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:57",{"_index":1948,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.entity.ts:64",{"_index":1947,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["review.service",{"_index":3131,"title":{},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{}}}],["review.service.ts",{"_index":3264,"title":{},"body":{"injectables/PullRequestReviewService.html":{},"coverage.html":{}}}],["review.service.ts:13",{"_index":3270,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["review.service.ts:7",{"_index":3267,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["reviewed",{"_index":1636,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbUserListContributorStat.html":{}}}],["reviewer",{"_index":1944,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviewer_login",{"_index":1934,"title":{},"body":{"entities/DbPullRequestReview.html":{}}}],["reviews",{"_index":3117,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["rights",{"_index":5455,"title":{},"body":{"license.html":{}}}],["ritadee",{"_index":2174,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["role",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["root",{"_index":5654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rounded",{"_index":2571,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":5701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rsa:4096",{"_index":5299,"title":{},"body":{"index.html":{}}}],["rule",{"_index":5357,"title":{},"body":{"index.html":{}}}],["run",{"_index":5245,"title":{},"body":{"index.html":{}}}],["running",{"_index":5343,"title":{},"body":{"index.html":{}}}],["russian",{"_index":1263,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["rxjs",{"_index":3091,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["same",{"_index":5317,"title":{},"body":{"index.html":{}}}],["san",{"_index":3996,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":1397,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":1371,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":4075,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/ai",{"_index":1401,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/api.opensauced.pizza",{"_index":5379,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":5520,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":5524,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":5522,"title":{},"body":{"properties.html":{}}}],["sauced/code",{"_index":5641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sauced/hot/pull/320",{"_index":1622,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":1614,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":741,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1777,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":731,"title":{},"body":{"classes/BakeRepoDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":2525,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights.git",{"_index":1542,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights.git'})@column({type",{"_index":1515,"title":{},"body":{"entities/DbBakedRepo.html":{}}}],["sauced/insights/pull/1",{"_index":1396,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":2127,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":1393,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":2107,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":1314,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":1308,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["saucedopen",{"_index":4005,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":4085,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauceduser",{"_index":1149,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserListContributor.html":{}}}],["sauceduser'})@column({type",{"_index":2208,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["saucy",{"_index":523,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"entities/DbCoupon.html":{},"classes/SupabaseAuthDto.html":{}}}],["saucy'})@isstring",{"_index":516,"title":{},"body":{"classes/ApplyUserCouponDto.html":{}}}],["saving",{"_index":5715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema",{"_index":5420,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["script",{"_index":5332,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":5400,"title":{},"body":{"index.html":{}}}],["search",{"_index":2537,"title":{},"body":{"classes/FilteredUsersDto.html":{},"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["searchallpullrequestcontributors",{"_index":1152,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequestcontributors(pageoptionsdto",{"_index":1153,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequests",{"_index":3110,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(@query",{"_index":3136,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":3123,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":1156,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{}}}],["seconds](https://en.wikipedia.org/wiki/unix_time",{"_index":5728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretkey",{"_index":5686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":5778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure",{"_index":5288,"title":{},"body":{"index.html":{}}}],["see",{"_index":5419,"title":{},"body":{"index.html":{}}}],["select",{"_index":82,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbCommitAuthors.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["select(\"author_login",{"_index":3343,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"count(distinct",{"_index":3499,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"current_month.author_login",{"_index":3340,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"distinct",{"_index":4810,"title":{},"body":{"injectables/UserListService.html":{}}}],["select(\"emoji_id",{"_index":4494,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"previous_month.author_login",{"_index":3348,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"pull_requests.author_login",{"_index":3332,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"split_part(repos.full_name",{"_index":193,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["select(\"users.id",{"_index":3561,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"users.login",{"_index":77,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/EndorsementService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserService.html":{}}}],["select([\"users.login",{"_index":5093,"title":{},"body":{"injectables/UserService.html":{}}}],["select(['repo.id",{"_index":3505,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":3217,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`to_char('${startdate}'::timestamp",{"_index":3226,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(this.hacktoberfestprdatecharbuilder(interval",{"_index":3224,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1802,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":21,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["self",{"_index":5294,"title":{},"body":{"index.html":{}}}],["sell",{"_index":5461,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1766,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":5656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server.crt",{"_index":5292,"title":{},"body":{"index.html":{}}}],["server.key",{"_index":5293,"title":{},"body":{"index.html":{}}}],["service",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"index.html":{}}}],["services.module",{"_index":2421,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/PizzaOvenModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["services.module.ts",{"_index":256,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["services/user.service",{"_index":4136,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["session",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{}}}],["session.id",{"_index":3832,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":3831,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":3873,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setcontact(\"open",{"_index":5639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription(markdowndescription",{"_index":5637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlicense(`the",{"_index":5643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameters",{"_index":5069,"title":{},"body":{"injectables/UserService.html":{}}}],["settermsofservice(\"https://github.com/open",{"_index":5640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":5255,"title":{},"body":{"index.html":{}}}],["settings",{"_index":5278,"title":{},"body":{"index.html":{}}}],["settitle(`@open",{"_index":5636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion(`1",{"_index":5638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":5470,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":1373,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":1369,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["short",{"_index":1736,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1720,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":5720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":1878,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1874,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["shows",{"_index":5732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sig",{"_index":3917,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1921,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1913,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":3920,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["signed",{"_index":5295,"title":{},"body":{"index.html":{}}}],["singleline",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2493,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/TopUsersDto.html":{},"index.html":{}}}],["snippet",{"_index":892,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["software",{"_index":5247,"title":{},"body":{"index.html":{},"license.html":{}}}],["solution",{"_index":2919,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["something",{"_index":5759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"index.html":{}}}],["source_branch",{"_index":1836,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":1294,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":1295,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1837,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1817,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach((type",{"_index":3230,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1797,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":3434,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests\".\"updated_at",{"_index":3436,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["spam_pull_requests.repo_id",{"_index":3433,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":2821,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":1257,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["specific",{"_index":985,"title":{},"body":{"classes/CommitsDto.html":{}}}],["specifications",{"_index":796,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["sponsors",{"_index":3982,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":1498,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["src/.../api",{"_index":5531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":5530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":5532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":5222,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../datetimes.ts",{"_index":5536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db",{"_index":5533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":5534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../generate",{"_index":5535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hacktoberfest.config.ts",{"_index":5537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":5223,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":5235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../most",{"_index":5228,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../openai.config.ts",{"_index":5538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":5224,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pizza.config.ts",{"_index":5539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pull",{"_index":5226,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":5227,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":5540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":5541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":5529,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":5542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":5229,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":5543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:238",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:116",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:134",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:147",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:178",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:192",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:211",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:230",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":718,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":3966,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":4959,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":4012,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":4015,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:18",{"_index":4023,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:22",{"_index":4021,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:7",{"_index":4018,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":5175,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/blogs/dtos/create",{"_index":1247,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"coverage.html":{}}}],["src/blogs/issue",{"_index":743,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"injectables/BlogSummaryService.html":{},"coverage.html":{}}}],["src/common/constants/order",{"_index":5230,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":5179,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":2519,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":2954,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":2951,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":2953,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":2952,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":3405,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":1469,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":2704,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/services/api",{"_index":255,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["src/common/services/pager.service.ts",{"_index":2978,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["src/common/services/pager.service.ts:16",{"_index":2982,"title":{},"body":{"injectables/PagerService.html":{}}}],["src/common/util/cli",{"_index":5186,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util/datetimes.ts",{"_index":5188,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/util/swagger.ts",{"_index":5189,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":5191,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":5192,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":5195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/hacktoberfest.config.ts",{"_index":5197,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":5198,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/pizza.config.ts",{"_index":5199,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":5200,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":1578,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:104",{"_index":1615,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:112",{"_index":1606,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:28",{"_index":1600,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:39",{"_index":1607,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:50",{"_index":1586,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:57",{"_index":1604,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:67",{"_index":1596,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:77",{"_index":1612,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:84",{"_index":1598,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:94",{"_index":1582,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":1014,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":1093,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":1096,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":1099,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":1054,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":3352,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/contributor/contributor",{"_index":1178,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts",{"_index":1151,"title":{},"body":{"controllers/ContributorController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts:22",{"_index":1162,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.module.ts",{"_index":1216,"title":{},"body":{"modules/ContributorModule.html":{}}}],["src/coupon/coupon.module.ts",{"_index":1223,"title":{},"body":{"modules/CouponModule.html":{}}}],["src/coupon/coupon.service.ts",{"_index":1227,"title":{},"body":{"injectables/CouponService.html":{},"coverage.html":{}}}],["src/coupon/coupon.service.ts:14",{"_index":1233,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:20",{"_index":1237,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:34",{"_index":1235,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/coupon.service.ts:8",{"_index":1231,"title":{},"body":{"injectables/CouponService.html":{}}}],["src/coupon/entities/coupon.entity.ts",{"_index":1655,"title":{},"body":{"entities/DbCoupon.html":{},"coverage.html":{}}}],["src/coupon/entities/coupon.entity.ts:16",{"_index":1657,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:26",{"_index":1658,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/coupon/entities/coupon.entity.ts:33",{"_index":1661,"title":{},"body":{"entities/DbCoupon.html":{}}}],["src/customer/customer.entity.ts",{"_index":1663,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:12",{"_index":1665,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:22",{"_index":1667,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":1445,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":1449,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":1459,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":1463,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:26",{"_index":1461,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:34",{"_index":1458,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":1454,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":2293,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:23",{"_index":2301,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":2312,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":2315,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":2317,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":2319,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":2320,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":1671,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:25",{"_index":1683,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:32",{"_index":1685,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:39",{"_index":1691,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:47",{"_index":1680,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:57",{"_index":1675,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:67",{"_index":1689,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:74",{"_index":1676,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:78",{"_index":1688,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":1289,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/dto/update",{"_index":4046,"title":{},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/endorsement",{"_index":2473,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":2326,"title":{},"body":{"controllers/EndorsementController.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts:107",{"_index":2362,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:123",{"_index":2365,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:138",{"_index":2347,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:26",{"_index":2339,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:40",{"_index":2354,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:51",{"_index":2351,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:65",{"_index":2358,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:96",{"_index":2371,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":2419,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":2424,"title":{},"body":{"injectables/EndorsementService.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.service.ts:11",{"_index":2431,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:110",{"_index":2447,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:124",{"_index":2449,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:18",{"_index":2433,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:22",{"_index":2435,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:26",{"_index":2436,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:37",{"_index":2438,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:48",{"_index":2440,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:61",{"_index":2442,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:77",{"_index":2443,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:91",{"_index":2445,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1696,"title":{},"body":{"entities/DbEndorsement.html":{},"coverage.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:14",{"_index":1699,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:22",{"_index":1698,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:30",{"_index":1701,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:38",{"_index":1702,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:45",{"_index":1705,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:52",{"_index":1706,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:62",{"_index":1708,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:72",{"_index":1697,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/generate",{"_index":5203,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":2575,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":2581,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:57",{"_index":2584,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":2621,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":2163,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":2177,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":2624,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:106",{"_index":2662,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:117",{"_index":2656,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:35",{"_index":2653,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:46",{"_index":2646,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:61",{"_index":2642,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:79",{"_index":2666,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:93",{"_index":2650,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":2700,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":1317,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":2811,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":4049,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":1748,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1718,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:108",{"_index":1724,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:116",{"_index":1744,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:120",{"_index":1735,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:33",{"_index":1726,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:44",{"_index":1745,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:54",{"_index":1732,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:61",{"_index":1730,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:68",{"_index":1729,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:78",{"_index":1739,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:88",{"_index":1722,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:98",{"_index":1742,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":2764,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":2729,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:34",{"_index":2739,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:50",{"_index":2745,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":2855,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":2863,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:14",{"_index":2869,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:21",{"_index":2873,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:27",{"_index":2876,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:54",{"_index":2872,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:58",{"_index":2880,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:62",{"_index":2878,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:66",{"_index":2875,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":4513,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/issues/dtos/create",{"_index":1338,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{},"coverage.html":{}}}],["src/issues/issue",{"_index":2899,"title":{},"body":{"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":1408,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":1345,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":1784,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":1790,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1789,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1786,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1788,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1785,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":2927,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":2931,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":2937,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":2934,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":5206,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/open",{"_index":827,"title":{},"body":{"interfaces/ChatResponse.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["src/pizza/commit",{"_index":958,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"coverage.html":{}}}],["src/pizza/commits.service.ts",{"_index":990,"title":{},"body":{"injectables/CommitsService.html":{},"coverage.html":{}}}],["src/pizza/commits.service.ts:11",{"_index":995,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:18",{"_index":997,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:24",{"_index":999,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:37",{"_index":1001,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/commits.service.ts:50",{"_index":1003,"title":{},"body":{"injectables/CommitsService.html":{}}}],["src/pizza/dtos/baked",{"_index":725,"title":{},"body":{"classes/BakeRepoDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts",{"_index":950,"title":{},"body":{"classes/CommitAuthorDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commit_authors.dto.ts:11",{"_index":955,"title":{},"body":{"classes/CommitAuthorDto.html":{}}}],["src/pizza/dtos/commits.dto.ts",{"_index":982,"title":{},"body":{"classes/CommitsDto.html":{},"coverage.html":{}}}],["src/pizza/dtos/commits.dto.ts:11",{"_index":987,"title":{},"body":{"classes/CommitsDto.html":{}}}],["src/pizza/entities/baked",{"_index":1511,"title":{},"body":{"entities/DbBakedRepo.html":{},"coverage.html":{}}}],["src/pizza/entities/commit_authors.entity.ts",{"_index":1543,"title":{},"body":{"entities/DbCommitAuthors.html":{},"coverage.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:20",{"_index":1549,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:28",{"_index":1546,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commit_authors.entity.ts:32",{"_index":1548,"title":{},"body":{"entities/DbCommitAuthors.html":{}}}],["src/pizza/entities/commits.entity.ts",{"_index":1551,"title":{},"body":{"entities/DbCommits.html":{},"coverage.html":{}}}],["src/pizza/entities/commits.entity.ts:21",{"_index":1572,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:31",{"_index":1571,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:41",{"_index":1570,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:51",{"_index":1564,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:59",{"_index":1560,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:69",{"_index":1568,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/entities/commits.entity.ts:77",{"_index":1566,"title":{},"body":{"entities/DbCommits.html":{}}}],["src/pizza/pizza",{"_index":2990,"title":{},"body":{"controllers/PizzaOvenController.html":{},"modules/PizzaOvenModule.html":{},"injectables/PizzaOvenService.html":{},"coverage.html":{}}}],["src/pull",{"_index":862,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":3440,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":5211,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":1951,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:27",{"_index":1957,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:35",{"_index":1964,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:43",{"_index":1960,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:53",{"_index":1953,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":1961,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:70",{"_index":1954,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:78",{"_index":1963,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:86",{"_index":1959,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":1968,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:27",{"_index":1972,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:35",{"_index":1979,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:43",{"_index":1975,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:53",{"_index":1970,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":1976,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:70",{"_index":1971,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:78",{"_index":1978,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:86",{"_index":1974,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":1983,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:27",{"_index":1988,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:35",{"_index":1997,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":1993,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:50",{"_index":1990,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:60",{"_index":1986,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":1994,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:77",{"_index":1987,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:85",{"_index":1996,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:93",{"_index":1992,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":2001,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:27",{"_index":2005,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:35",{"_index":2012,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:43",{"_index":2008,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:53",{"_index":2003,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":2009,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:70",{"_index":2004,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:78",{"_index":2011,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:86",{"_index":2007,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":3377,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:23",{"_index":3387,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:34",{"_index":3391,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:45",{"_index":3382,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:56",{"_index":3385,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":3450,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":3468,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:157",{"_index":3490,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:18",{"_index":3475,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:26",{"_index":3493,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:285",{"_index":3483,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:299",{"_index":3484,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:313",{"_index":3481,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:347",{"_index":3482,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:41",{"_index":3479,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:418",{"_index":3488,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:448",{"_index":3486,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:66",{"_index":3478,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":3572,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":3747,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":3749,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":3755,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:19",{"_index":3759,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:42",{"_index":3757,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":3753,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":3619,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":3776,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":3778,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":3784,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:19",{"_index":3788,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:44",{"_index":3786,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":3782,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":3855,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":3801,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":3803,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":3812,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":3808,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":3810,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":3806,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":3657,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":3943,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":3945,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":3951,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:19",{"_index":3955,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:42",{"_index":3953,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":3949,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":2016,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":6,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateUserListDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"classes/DbTimezone.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserRepo.html":{},"classes/FilterListContributorsDto.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dtos/apply",{"_index":508,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":1352,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/filtered",{"_index":2533,"title":{},"body":{"classes/FilteredUsersDto.html":{},"coverage.html":{}}}],["src/user/dtos/top",{"_index":4042,"title":{},"body":{"classes/TopUsersDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":4060,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/filtered",{"_index":1711,"title":{},"body":{"classes/DbFilteredUser.html":{},"coverage.html":{}}}],["src/user/entities/top",{"_index":2065,"title":{},"body":{"classes/DbTopUser.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":2066,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/services/user.service.ts",{"_index":5016,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/services/user.service.ts:108",{"_index":5042,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:182",{"_index":5046,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:205",{"_index":5036,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:21",{"_index":5031,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:242",{"_index":5057,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:267",{"_index":5053,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:282",{"_index":5059,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:29",{"_index":5034,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:292",{"_index":5055,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:302",{"_index":5051,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:306",{"_index":5049,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:313",{"_index":5033,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:320",{"_index":5038,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:35",{"_index":5047,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:41",{"_index":5044,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/services/user.service.ts:71",{"_index":5040,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user",{"_index":4110,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":4181,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:107",{"_index":4212,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":4205,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:49",{"_index":4200,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:64",{"_index":4191,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:81",{"_index":4195,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:96",{"_index":4209,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":5218,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":4892,"title":{},"body":{"modules/UserModule.html":{}}}],["src/vote/repo",{"_index":3694,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":5136,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":5138,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":5145,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:19",{"_index":5148,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:42",{"_index":5152,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:61",{"_index":5147,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":5143,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:77",{"_index":5150,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":459,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["stack",{"_index":1423,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":1989,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["standard",{"_index":2507,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["star",{"_index":1969,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["star'})@apiokresponse({description",{"_index":3582,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star'})@apiparam({name",{"_index":3587,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":3748,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":3573,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:100",{"_index":3588,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:119",{"_index":3591,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:36",{"_index":3595,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:57",{"_index":3600,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:76",{"_index":3603,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":3607,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":3751,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":3758,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":3765,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":3766,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":1952,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{}}}],["stargaze.controller",{"_index":3777,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":3620,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":3631,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":3634,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:36",{"_index":3637,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:57",{"_index":3641,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:79",{"_index":3644,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":3646,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":3780,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":3787,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists",{"_index":3793,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":3794,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":280,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":3624,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":3638,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":3625,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":3642,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":3514,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":3462,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":3645,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":279,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":3577,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(@param(\"id",{"_index":3611,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":3596,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":3578,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":3601,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":3594,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{}}}],["stars",{"_index":3456,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":3463,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":3606,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":917,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":5342,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":3309,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_date}'::timestamp",{"_index":3351,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["start_range",{"_index":3306,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["startdate",{"_index":157,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListStatsService.html":{}}}],["startdate}'::timestamp",{"_index":161,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["started",{"_index":5237,"title":{"index.html":{},"license.html":{}},"body":{"miscellaneous/variables.html":{}}}],["starting",{"_index":3201,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["starts",{"_index":5657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["starttime",{"_index":2716,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":5577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stat.service",{"_index":4724,"title":{},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{}}}],["stat.service.ts",{"_index":9,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["stat.service.ts:178",{"_index":4883,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:193",{"_index":4879,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:208",{"_index":4887,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:223",{"_index":4881,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:25",{"_index":4867,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:299",{"_index":4885,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:31",{"_index":4874,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:350",{"_index":4877,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:37",{"_index":4886,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:386",{"_index":4869,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:416",{"_index":4873,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:446",{"_index":4871,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["stat.service.ts:72",{"_index":4876,"title":{},"body":{"injectables/UserListStatsService.html":{}}}],["state",{"_index":1838,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{}}}],["statements",{"_index":5169,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":5410,"title":{},"body":{"index.html":{}}}],["stats",{"_index":97,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["stats.controller",{"_index":4725,"title":{},"body":{"modules/UserListModule.html":{}}}],["stats.controller.ts",{"_index":4814,"title":{},"body":{"controllers/UserListStatsController.html":{},"coverage.html":{}}}],["stats.controller.ts:110",{"_index":4834,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:41",{"_index":4847,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:59",{"_index":4836,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:77",{"_index":4825,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.controller.ts:92",{"_index":4842,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["stats.entity",{"_index":32,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["stats.entity.ts",{"_index":2211,"title":{},"body":{"entities/DbUserListContributorStat.html":{},"coverage.html":{}}}],["stats.entity.ts:15",{"_index":2215,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["stats.entity.ts:27",{"_index":2213,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["stats.entity.ts:39",{"_index":2216,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["stats.entity.ts:51",{"_index":2217,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["stats.entity.ts:63",{"_index":2214,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["stats.entity.ts:75",{"_index":2212,"title":{},"body":{"entities/DbUserListContributorStat.html":{}}}],["status",{"_index":2027,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":2720,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"controllers/PizzaOvenController.html":{}}}],["statusmessage",{"_index":2721,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["steps",{"_index":5259,"title":{},"body":{"index.html":{}}}],["stood",{"_index":5329,"title":{},"body":{"index.html":{}}}],["string",{"_index":69,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/Contributor.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/IssueSummaryService.html":{},"injectables/OpenAiService.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apiparam({name",{"_index":4645,"title":{},"body":{"controllers/UserListController.html":{}}}],["string'})@column({type",{"_index":1641,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["string'})@minlength(3)@type(undefined",{"_index":2538,"title":{},"body":{"classes/FilteredUsersDto.html":{}}}],["string'})@primarycolumn({type",{"_index":1656,"title":{},"body":{"entities/DbCoupon.html":{}}}],["string(id",{"_index":672,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(major(\"1.8.0",{"_index":5628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_codename",{"_index":5546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":5553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":5549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":5551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":5568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.hacktoberfest_year",{"_index":5669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":5673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":5680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":5675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_host",{"_index":5682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.pizza_oven_port",{"_index":5683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":5695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":5693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":5687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":5691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":5688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":5579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":5593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":5587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":5598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":5580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":5594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":5585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":5597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":5582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":5595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":5590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":5599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":5583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":5596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":1478,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":1495,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":1252,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":2561,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":3814,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":3934,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":3802,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":3929,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":721,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":1457,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":691,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":695,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":716,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":610,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":281,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":3836,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":3854,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":282,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":5417,"title":{},"body":{"index.html":{}}}],["structured",{"_index":5516,"title":{},"body":{"properties.html":{}}}],["style",{"_index":2570,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["styles",{"_index":5381,"title":{},"body":{"index.html":{}}}],["sub",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":2057,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":2041,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":5611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":3926,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":3927,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subj",{"_index":5303,"title":{},"body":{"index.html":{}}}],["subject",{"_index":5466,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":5459,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1985,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{}}}],["submission'})@apiokresponse({description",{"_index":3666,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submission'})@apiparam({name",{"_index":3668,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":3513,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{}}}],["submissionscount",{"_index":3461,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":3685,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{}}}],["submit.controller",{"_index":3944,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":3658,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":3669,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":3672,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:36",{"_index":3676,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:57",{"_index":3679,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:79",{"_index":3682,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":3684,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":3947,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":3954,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":3962,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":3960,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":3961,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":283,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":3662,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":3677,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":3663,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":3680,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":3683,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":3675,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["subquery",{"_index":215,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder",{"_index":153,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerybuilder.innerjoin",{"_index":154,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["subquerycount",{"_index":3473,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":3491,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":3176,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":3189,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribers",{"_index":3458,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":2032,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":3896,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":3895,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":3898,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":3931,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":2017,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":2040,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":2031,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":2035,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":2053,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":2052,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":2042,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":2055,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":2050,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":2043,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":2046,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":2048,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":2033,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":2036,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":2039,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":2038,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":3903,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":3890,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":3894,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":3893,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":3837,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":3838,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":3840,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":3845,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":3847,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":3843,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":3892,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":3907,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":3905,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":3889,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":3869,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":5690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":3844,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":2056,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscriptionsessioncancelurl",{"_index":5694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":5692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":5472,"title":{},"body":{"license.html":{}}}],["succeeds",{"_index":5736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success_url",{"_index":3827,"title":{},"body":{"injectables/StripeService.html":{}}}],["successfully",{"_index":5572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":804,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":916,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion",{"_index":883,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.controller",{"_index":3245,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":897,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"coverage.html":{}}}],["suggestion.controller.ts:22",{"_index":903,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":904,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":2548,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["suggestion.dto.ts:13",{"_index":2550,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:23",{"_index":2552,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:30",{"_index":2553,"title":{},"body":{"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:33",{"_index":2551,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:40",{"_index":2549,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":906,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":909,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["suggestion.service.ts:10",{"_index":914,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:18",{"_index":913,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:7",{"_index":911,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suite",{"_index":5344,"title":{},"body":{"index.html":{}}}],["summarize",{"_index":809,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"controllers/PizzaOvenController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["summary.controller",{"_index":781,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.controller.ts",{"_index":744,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{},"coverage.html":{}}}],["summary.controller.ts:22",{"_index":757,"title":{},"body":{"controllers/BlogSummaryController.html":{},"controllers/IssueSummaryController.html":{}}}],["summary.dto",{"_index":765,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.dto.ts",{"_index":1248,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"coverage.html":{}}}],["summary.dto.ts:13",{"_index":1269,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:23",{"_index":1271,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:32",{"_index":1277,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:42",{"_index":1266,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:49",{"_index":1254,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:56",{"_index":1253,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["summary.dto.ts:63",{"_index":1343,"title":{},"body":{"classes/CreateIssueSummaryDto.html":{}}}],["summary.module",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["summary.module.ts",{"_index":780,"title":{},"body":{"modules/BlogSummaryModule.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service",{"_index":768,"title":{},"body":{"controllers/BlogSummaryController.html":{},"modules/BlogSummaryModule.html":{},"controllers/IssueSummaryController.html":{},"modules/IssueSummaryModule.html":{}}}],["summary.service.ts",{"_index":783,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"coverage.html":{}}}],["summary.service.ts:10",{"_index":793,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:20",{"_index":789,"title":{},"body":{"injectables/BlogSummaryService.html":{}}}],["summary.service.ts:21",{"_index":2914,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["summary.service.ts:7",{"_index":787,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{}}}],["summarylength",{"_index":1251,"title":{},"body":{"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{}}}],["supabase",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":723,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":832,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserService.html":{}}}],["supabase_api_key=your_supabase_api_key",{"_index":5269,"title":{},"body":{"index.html":{}}}],["supabase_jwt_secret=your_supabase_jwt_secret",{"_index":5270,"title":{},"body":{"index.html":{}}}],["supabase_url=your_supabase_url",{"_index":5268,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":622,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":5528,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":4028,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{}}}],["supabaseguard",{"_index":626,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":4035,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":4032,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":4034,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":717,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":4030,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":1051,"title":{},"body":{"classes/ContributionPageMetaDto.html":{},"injectables/SupabaseStrategy.html":{}}}],["super(context",{"_index":1434,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.authenticate(req",{"_index":4040,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":1441,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":1439,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":1437,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":4039,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":1440,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":5496,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":753,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["sure",{"_index":5394,"title":{},"body":{"index.html":{}}}],["svg",{"_index":5497,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":5391,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["swagger.ts",{"_index":5204,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger.yaml",{"_index":5659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription",{"_index":5190,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggermarkdowndescription(apidomain",{"_index":5621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":5646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":112,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserListStatsService.html":{}}}],["synchronize",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":852,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["systemmessage",{"_index":853,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["t",{"_index":1119,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":5782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":5219,"title":{},"body":{"coverage.html":{}}}],["tagged",{"_index":1381,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["tagged_repos",{"_index":2099,"title":{},"body":{"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["taggedrepos",{"_index":1370,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["tags",{"_index":1911,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["take",{"_index":3200,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["taken",{"_index":2916,"title":{},"body":{"injectables/IssueSummaryService.html":{}}}],["target",{"_index":482,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{}}}],["target_branch",{"_index":1839,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1840,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target}.id",{"_index":3502,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":1327,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["team'})@column({type",{"_index":1731,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":1321,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["ted",{"_index":5525,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":837,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{}}}],["tense",{"_index":2917,"title":{},"body":{"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":930,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"index.html":{}}}],["test.suggestion.controller",{"_index":3246,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["test.suggestion.controller.ts",{"_index":925,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"coverage.html":{}}}],["test.suggestion.controller.ts:22",{"_index":931,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test:coveragefor",{"_index":5355,"title":{},"body":{"index.html":{}}}],["tests",{"_index":5345,"title":{},"body":{"index.html":{}}}],["testyou",{"_index":5353,"title":{},"body":{"index.html":{}}}],["text",{"_index":922,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1926,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{}}}],["th3nn3ss'})@column('text",{"_index":1851,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1922,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1901,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":4578,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":4529,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apipaginatedresponse(dbbakedrepo)@apiokresponse({type",{"_index":3011,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommitauthors)@apiokresponse({type",{"_index":3017,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcommits)@apiokresponse({type",{"_index":3021,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":3359,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":2298,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":2350,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3121,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":1160,"title":{},"body":{"controllers/ContributorController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":3381,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":2645,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":2649,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this._stripe",{"_index":3813,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":4951,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.allcontributionscount",{"_index":1052,"title":{},"body":{"classes/ContributionPageMetaDto.html":{}}}],["this.applyactivecontributorsfilter(activecountquerybuilder",{"_index":164,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(ctebuilder",{"_index":118,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyactivecontributorsfilter(subquerybuilder",{"_index":156,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(alumnicountquerybuilder",{"_index":174,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(ctebuilder",{"_index":122,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applyalumnicontributorsfilter(subquerybuilder",{"_index":159,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(ctebuilder",{"_index":120,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(newcountquerybuilder",{"_index":169,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.applynewcontributorsfilter(subquerybuilder",{"_index":158,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.bakedreporepository.createquerybuilder(\"baked_repos",{"_index":3093,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.basefilterquerybuilder",{"_index":3560,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basefilterquerybuilder(startdate",{"_index":3544,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":73,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.baseuserquerybuilder",{"_index":4809,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.blogsummaryservice.generateblogsummary(genereateblogsummarydto",{"_index":774,"title":{},"body":{"controllers/BlogSummaryController.html":{}}}],["this.codeexplanationservice.generateexplanation(generatecodeexplanationdto",{"_index":884,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":908,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.codetestsuggestionservice.generatetestsuggestion(generatecodetestsuggestiondto",{"_index":934,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["this.commitauthorservice.findallcommitauthors(pageoptionsdto",{"_index":3060,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorservice.findcommitauthorbyid(id",{"_index":3055,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitauthorsrepository.createquerybuilder(\"commit_authors",{"_index":975,"title":{},"body":{"injectables/CommitAuthorsService.html":{}}}],["this.commitsrepository.createquerybuilder(\"commits",{"_index":1006,"title":{},"body":{"injectables/CommitsService.html":{}}}],["this.commitsservice.findallcommitsbybakedrepoid(pageoptionsdto",{"_index":3066,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findallcommitsbycommitauthorid(pageoptionsdto",{"_index":3069,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.commitsservice.findcommitbyid(id",{"_index":3063,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":2482,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":2605,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":2607,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":2620,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":2612,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":2616,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":2618,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":2614,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":2610,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"hacktoberfest.year",{"_index":3199,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":2600,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":2602,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":846,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":850,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"pizza.host",{"_index":3096,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"pizza.port",{"_index":3097,"title":{},"body":{"injectables/PizzaOvenService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":3825,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":3830,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":3828,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":3922,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":1105,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":3372,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.couponrepository.createquerybuilder(\"coupons\").withdeleted",{"_index":1239,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponrepository.softdelete(code",{"_index":1246,"title":{},"body":{"injectables/CouponService.html":{}}}],["this.couponservice.findcoupon(applyusercoupondto.couponcode",{"_index":709,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":1465,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":1468,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":694,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":3882,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":688,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":1129,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":2598,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":2606,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":2603,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":2322,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":2309,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":2451,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":2465,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":2452,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":2470,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":2388,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":2391,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":2409,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":4248,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":2411,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":4251,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":2394,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":2398,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":2402,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":2405,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":2414,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":3326,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findcontributionsintimeframehelper(framestartdate.toisostring",{"_index":140,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.findcontributorcategoriesintimeframehelper(framestartdate.toisostring",{"_index":134,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.findonebyid(id",{"_index":5102,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generateprompt(options.descriptionlength",{"_index":938,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["this.generateprompt(options.language",{"_index":818,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.getcontributorrangequerybuilder(startdate",{"_index":3339,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.getdateframes(range",{"_index":130,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.getvotequery(repoid",{"_index":5156,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.hacktoberfestfilterquerybuilder(range",{"_index":3543,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.hasnextpage",{"_index":2968,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":2967,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":2597,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":2619,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":2611,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":2615,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":2617,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":2613,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":2609,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":2793,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":2795,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":2797,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":2796,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":4559,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight",{"_index":4554,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":4548,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":4550,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":4565,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":4573,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":4571,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":2847,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":2850,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":2883,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":2890,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":2892,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":2891,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":2798,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":4618,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":4594,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":4608,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":4591,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":4586,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":2758,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":4546,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":2762,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":4595,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.issuesummaryservice.generateissuesummary(generateissuesummarydto",{"_index":2908,"title":{},"body":{"controllers/IssueSummaryController.html":{}}}],["this.itemcount",{"_index":2964,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2517,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.logger",{"_index":1499,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":1509,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error",{"_index":1505,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{}}}],["this.logger.error(`${query",{"_index":1504,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":2722,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":1502,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":3914,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":2727,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":1508,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":2725,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":1507,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":2941,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":2942,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":1436,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":1438,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":3930,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":3937,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":4943,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":2599,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":2601,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":1130,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["this.openaiservice.generatecompletion",{"_index":817,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.page",{"_index":2516,"title":{},"body":{"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.pagecount",{"_index":2965,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.pagerservice.applypagination",{"_index":977,"title":{},"body":{"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PizzaOvenService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{}}}],["this.pizzaovenservice.findallbakedrepos(pageoptionsdto",{"_index":3051,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.findbakedrepobyid(id",{"_index":3048,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakeoptionsinfo",{"_index":3044,"title":{},"body":{"controllers/PizzaOvenController.html":{}}}],["this.pizzaovenservice.posttopizzaovenservice(bakerepoinfo",{"_index":2846,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":3197,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":3157,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":3314,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestrepository.manager.createquerybuilder",{"_index":3330,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestreviewrepository.find",{"_index":3273,"title":{},"body":{"injectables/PullRequestReviewService.html":{}}}],["this.pullrequestreviewservice.findallreviewsbyprid(id",{"_index":3146,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":3135,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":4223,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallchurncontributors(pageoptionsdto",{"_index":1211,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallcontributorswithfilters(pageoptionsdto",{"_index":1176,"title":{},"body":{"controllers/ContributorController.html":{}}}],["this.pullrequestservice.findallrecentcontributors(pageoptionsdto",{"_index":1209,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallrepeatcontributors(pageoptionsdto",{"_index":1213,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":3137,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findnewcontributorsintimerange(pageoptionsdto",{"_index":1207,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":3143,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.reactionsquerybuilder",{"_index":5062,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":3219,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":3503,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":3550,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":3399,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":3401,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":3371,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":3375,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findorgsrecommendations(userid",{"_index":4987,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.reposervice.findrecommendations(interests",{"_index":4983,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes\").withdeleted",{"_index":3790,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":3795,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":3796,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":3797,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars\").withdeleted",{"_index":3762,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":3768,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":3769,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":3771,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits\").withdeleted",{"_index":3957,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":3963,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":3964,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":3965,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes\").withdeleted",{"_index":5154,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":5158,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":5159,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":5160,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":3654,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":3650,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":3616,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":3612,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":1503,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":3818,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":3817,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":692,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":697,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":3884,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":3924,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":3909,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":3691,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":3688,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":3511,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":3231,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":3849,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":3850,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":4171,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":4173,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":4175,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":4174,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":4143,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":4148,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":4156,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":4152,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows\").withdeleted",{"_index":4275,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":4286,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":4288,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":4289,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":4315,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.findallfollowers(userid",{"_index":4485,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":4313,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":4317,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository",{"_index":4504,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":4493,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":4509,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":4511,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":4512,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":4474,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":4448,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":4483,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":4492,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":4491,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.addfeatured(id",{"_index":2685,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":4374,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":4393,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":4389,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":4398,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":2679,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":4225,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallfeatured(pageoptionsdto",{"_index":2682,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":2694,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":2691,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":4388,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":4378,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":4376,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction",{"_index":4397,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findtop(pageoptionsdto",{"_index":2697,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.removefeatured(id",{"_index":2687,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":4379,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userlistcontributorrepository.create",{"_index":4789,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.createquerybuilder(\"user_list_contributors",{"_index":65,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.findone",{"_index":4791,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.manager",{"_index":191,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["this.userlistcontributorrepository.save(newuserlistcontributor",{"_index":4790,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistcontributorrepository.softdelete(userlistcontributorid",{"_index":4792,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.create",{"_index":4784,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.createquerybuilder(\"user_lists",{"_index":4772,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.save(newuserlist",{"_index":4787,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.softdelete(listid",{"_index":4795,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistrepository.update(listid",{"_index":4794,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userlistservice.adduserlist(userid",{"_index":4684,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(id",{"_index":4710,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.adduserlistcontributor(newlist.id",{"_index":4687,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlist(list.id",{"_index":4699,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.deleteuserlistcontributor(id",{"_index":4714,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findallbyuserid(pageoptionsdto",{"_index":4681,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbyfilter(pageoptionsdto",{"_index":4703,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findcontributorsbylistid(pageoptionsdto",{"_index":4706,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(list.id",{"_index":4697,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findonebyid(listid",{"_index":4693,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.findpubliconebyid(id",{"_index":4692,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.getalltimezones",{"_index":4716,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userlistservice.updateuserlist(list.id",{"_index":4694,"title":{},"body":{"controllers/UserListController.html":{}}}],["this.userliststatsservice.findalllistcontributorstats(pageoptionsdto",{"_index":4850,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsbyproject(id",{"_index":4855,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributionsintimeframe(options",{"_index":4853,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findcontributorcategoriesbytimeframe(options",{"_index":4859,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.userliststatsservice.findlistcontributorstatsbyproject(id",{"_index":4858,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":4933,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":4944,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":4957,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":4287,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(newhighlight.id",{"_index":4488,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.adduserhighlightreactionnotification(userid",{"_index":4510,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":4907,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userreporepository.create",{"_index":5013,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":5011,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":5014,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.createquerybuilder(\"user",{"_index":4796,"title":{},"body":{"injectables/UserListService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":4773,"title":{},"body":{"injectables/UserListService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":5108,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":5113,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(user.id",{"_index":5104,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.applycoupon(userid",{"_index":710,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkadduser(user",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":4557,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(user.user_metadata.sub",{"_index":4146,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":703,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":4144,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":2408,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.findtopusers(pageoptionsdto",{"_index":4230,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findusersbyfilter(pageoptionsdto",{"_index":4232,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":705,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":702,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":3911,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":700,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":3741,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.findonebyrepoid(repoid",{"_index":3734,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":3737,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":2604,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":775,"title":{},"body":{"controllers/BlogSummaryController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/CouponService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/OpenAiService.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":1492,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterListContributorsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["time'})@isstring()@isoptional",{"_index":2508,"title":{},"body":{"classes/FilterListContributorsDto.html":{}}}],["time_end",{"_index":178,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["time_start",{"_index":177,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe",{"_index":4852,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":4822,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["timeframe.dto",{"_index":41,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.dto.ts",{"_index":1131,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"coverage.html":{}}}],["timeframe.dto.ts:17",{"_index":1134,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.dto.ts:26",{"_index":1133,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{}}}],["timeframe.entity",{"_index":44,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{}}}],["timeframe.entity.ts",{"_index":1625,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"coverage.html":{}}}],["timeframe.entity.ts:16",{"_index":1643,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:28",{"_index":1642,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:40",{"_index":1631,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:52",{"_index":1635,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:64",{"_index":1637,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:65",{"_index":1654,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:76",{"_index":1634,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timeframe.entity.ts:78",{"_index":1652,"title":{},"body":{"entities/DbContributorCategoryTimeframe.html":{}}}],["timeframe.entity.ts:88",{"_index":1630,"title":{},"body":{"entities/DbContributionStatTimeframe.html":{}}}],["timestamp",{"_index":1588,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["timezone",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{},"classes/DbTimezone.html":{},"classes/FilterListContributorsDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserListService.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{}}}],["timezones",{"_index":4657,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["timezones'})@apiokresponse({type",{"_index":4655,"title":{},"body":{"controllers/UserListController.html":{}}}],["title",{"_index":813,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/IssueSummaryService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["tmodel",{"_index":5569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to_date('${hacktoberfestyear",{"_index":3207,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["todatetime",{"_index":3870,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":3897,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":3899,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":3902,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":3901,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":3900,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":3904,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":3908,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":3906,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1815,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["todo",{"_index":184,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":2387,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{}}}],["token.guard",{"_index":2380,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":2474,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:5",{"_index":2477,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":2480,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":792,"title":{},"body":{"injectables/BlogSummaryService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":5368,"title":{},"body":{"index.html":{}}}],["top",{"_index":94,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":2817,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":3430,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":3429,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":3431,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":2521,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["toprepos",{"_index":4228,"title":{},"body":{"controllers/UserController.html":{}}}],["topusersdto",{"_index":4041,"title":{"classes/TopUsersDto.html":{}},"body":{"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["tort",{"_index":5491,"title":{},"body":{"license.html":{}}}],["total",{"_index":1583,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["total_contributions",{"_index":4731,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{},"miscellaneous/enumerations.html":{}}}],["transformer",{"_index":946,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["translatetime",{"_index":486,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":805,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":481,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":2051,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":2028,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":2029,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["true",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"classes/CollaboratorsDto.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionsPageDto.html":{},"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserList.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/StripeService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["true`).orderby(\"user_highlights.updated_at",{"_index":4465,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["true})@column({type",{"_index":2119,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["true})@isarray()@isstring({each",{"_index":1383,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["true})@isboolean",{"_index":5165,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["true})@isoptional",{"_index":2168,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["true})@isstring({each",{"_index":2167,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{}}}],["true})@type(undefined",{"_index":1123,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":1122,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["try",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["turbo",{"_index":5678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":4004,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter_username",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"injectables/CommitAuthorsService.html":{},"classes/CommitsDto.html":{},"injectables/CommitsService.html":{},"classes/ContributionPageMetaDto.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CouponService.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTimezone.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PizzaOvenController.html":{},"injectables/PizzaOvenService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type')@apioperation({operationid",{"_index":4828,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["typealiases",{"_index":5526,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":839,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["typeorm",{"_index":22,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"injectables/CommitAuthorsService.html":{},"injectables/CommitsService.html":{},"injectables/ContributionService.html":{},"injectables/CouponService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbCoupon.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PizzaOvenService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestReviewService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["typeorm/query",{"_index":2983,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["typeormhealthindicator",{"_index":2587,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":1472,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":4726,"title":{},"body":{"modules/UserListModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([dbbakedrepo",{"_index":3076,"title":{},"body":{"modules/PizzaOvenModule.html":{}}}],["typeormmodule.forfeature([dbcoupon",{"_index":1226,"title":{},"body":{"modules/CouponModule.html":{}}}],["typeormmodule.forfeature([dbcustomer",{"_index":1448,"title":{},"body":{"modules/CustomerModule.html":{}}}],["typeormmodule.forfeature([dbemoji",{"_index":2314,"title":{},"body":{"modules/EmojiModule.html":{}}}],["typeormmodule.forfeature([dbendorsement",{"_index":2423,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["typeormmodule.forfeature([dbinsight",{"_index":2862,"title":{},"body":{"modules/InsightsModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":2930,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbpullrequest",{"_index":1219,"title":{},"body":{"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":1019,"title":{},"body":{"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":3839,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forfeature([dbuserhighlight",{"_index":2702,"title":{},"body":{"modules/HighlightModule.html":{}}}],["typeormmodule.forfeature([dbuserrepo",{"_index":4999,"title":{},"body":{"modules/UserReposModule.html":{}}}],["typeormmodule.forrootasync",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":5398,"title":{},"body":{"index.html":{}}}],["types:auto",{"_index":5405,"title":{},"body":{"index.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":5586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":2569,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"miscellaneous/variables.html":{}}}],["unable",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":2746,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{}}}],["unauthorizedexception(\"you're",{"_index":4780,"title":{},"body":{"injectables/UserListService.html":{}}}],["undefined",{"_index":840,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":4340,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["undefined})@apiparam({name",{"_index":3118,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["undefined})@column({type",{"_index":1846,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":4106,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isarray()@type(undefined",{"_index":1402,"title":{},"body":{"classes/CreateUserListDto.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":1065,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":1074,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":3254,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":3453,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatsorderenum)@isoptional",{"_index":4730,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isenum(userlistcontributorstatstypeenum)@isoptional",{"_index":1132,"title":{},"body":{"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{}}}],["undefined})@isoptional",{"_index":2558,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":944,"title":{},"body":{"classes/CollaboratorsDto.html":{},"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":4089,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["unfeaturehighlight",{"_index":2632,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfeaturehighlight(id",{"_index":2663,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfollowed",{"_index":3630,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":3653,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":3628,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":4295,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":4305,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":4307,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":1580,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":5364,"title":{},"body":{"index.html":{}}}],["unix",{"_index":5779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":759,"title":{},"body":{"controllers/BlogSummaryController.html":{},"injectables/BlogSummaryService.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CouponService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/IssueSummaryController.html":{},"injectables/IssueSummaryService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["unnecessary",{"_index":803,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unprocessableentityexception",{"_index":4583,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":4001,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":2078,"title":{},"body":{"entities/DbUserCollaboration.html":{},"index.html":{}}}],["update",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["updatecollaboratorsdto",{"_index":4670,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatecollaboratorsdto.contributors.map(async",{"_index":4708,"title":{},"body":{"controllers/UserListController.html":{}}}],["updated",{"_index":1740,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserList.html":{},"index.html":{}}}],["updated_at",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":1618,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":4567,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":4570,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":4569,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":4150,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferences",{"_index":5024,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":5048,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":4045,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["updatehighlightdto",{"_index":4367,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.highlight",{"_index":4381,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":4384,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.taggedrepos",{"_index":4387,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.title",{"_index":4380,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.type",{"_index":4383,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.url",{"_index":4382,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":4329,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":4363,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":2867,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":2879,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":2748,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":4597,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":4596,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter",{"_index":4614,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find((repoinfo",{"_index":4603,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto})@apiparam({name",{"_index":2744,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":4575,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":4580,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":2770,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":2789,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":4053,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":4568,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto})@apiparam({name",{"_index":4539,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterests",{"_index":5025,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":5050,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatelistdto",{"_index":4674,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.is_public",{"_index":4696,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistdto.name",{"_index":4695,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser",{"_index":4632,"title":{},"body":{"controllers/UserListController.html":{}}}],["updatelistforuser(updatelistdto",{"_index":4671,"title":{},"body":{"controllers/UserListController.html":{}}}],["updateonboarding",{"_index":5026,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":5052,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(@userid",{"_index":699,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":5027,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":5054,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PullRequestService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserNotificationService.html":{}}}],["updateuser",{"_index":5028,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":5056,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusercollaboration",{"_index":4116,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":4132,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":4059,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["updateusercollaborationdto.status",{"_index":4151,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":580,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":581,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":4412,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":4444,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserlist",{"_index":4743,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserlist(listid",{"_index":4768,"title":{},"body":{"injectables/UserListService.html":{}}}],["updateuserprofileinterestsdto",{"_index":588,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":5029,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":5058,"title":{},"body":{"injectables/UserService.html":{}}}],["upsert",{"_index":3887,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":3841,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":3846,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":662,"title":{},"body":{"controllers/AuthController.html":{},"classes/BakeRepoDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbBakedRepo.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["url'})@column({type",{"_index":1703,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":5612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/delete",{"_index":5753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/get",{"_index":5742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/patch",{"_index":5751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/methods/post",{"_index":5747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/200",{"_index":5740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/201",{"_index":5745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/204",{"_index":5749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/400",{"_index":5756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/401",{"_index":5763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/403",{"_index":5768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/404",{"_index":5771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["us/docs/web/http/status/429",{"_index":5774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":2705,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["use(request",{"_index":2706,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["used",{"_index":808,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/IssueSummaryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":5699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useguards(endorsementtokenguard",{"_index":2383,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogSummaryController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/IssueSummaryController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserListStatsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useless",{"_index":4457,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":213,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"modules/AppModule.html":{},"classes/ApplyUserCouponDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"classes/CollaboratorsDto.html":{},"classes/Contributor.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbContribution.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"classes/DbFilteredUser.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1769,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":4976,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":4344,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserListController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":4127,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apiokresponse({type",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.bio",{"_index":5116,"title":{},"body":{"injectables/UserService.html":{}}}],["user.collaborations",{"_index":2094,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.collaborations)@joincolumn({name",{"_index":2088,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.company",{"_index":5119,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":4895,"title":{},"body":{"modules/UserModule.html":{}}}],["user.discord_url",{"_index":5125,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_email",{"_index":5128,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":5121,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":4065,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":4076,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:11",{"_index":4081,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:110",{"_index":4071,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":4074,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":4067,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":4094,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:50",{"_index":4092,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:59",{"_index":4069,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":4079,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:77",{"_index":4073,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:86",{"_index":4084,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":4078,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":5115,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":2092,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.from_user_notifications",{"_index":2248,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.from_user_notifications)@joincolumn({name",{"_index":2224,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["user.github_sponsors_url",{"_index":5123,"title":{},"body":{"injectables/UserService.html":{}}}],["user.highlights",{"_index":2135,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.highlights)@joincolumn({name",{"_index":2129,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":4226,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1747,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.insights)@joincolumn({name",{"_index":1743,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests.join",{"_index":5127,"title":{},"body":{"injectables/UserService.html":{}}}],["user.interests?.split(\",\").filter(boolean",{"_index":4982,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user.is_open_sauced_member",{"_index":5103,"title":{},"body":{"injectables/UserService.html":{}}}],["user.linkedin_url",{"_index":5124,"title":{},"body":{"injectables/UserService.html":{}}}],["user.lists",{"_index":2194,"title":{},"body":{"entities/DbUserList.html":{}}}],["user.lists)@joincolumn({name",{"_index":2185,"title":{},"body":{"entities/DbUserList.html":{}}}],["user.location",{"_index":5120,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":5114,"title":{},"body":{"injectables/UserService.html":{}}}],["user.organizations",{"_index":2262,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.organizations)@joincolumn({name",{"_index":2257,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user.receive_collaboration",{"_index":5129,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repotouserstargazers",{"_index":1966,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":1962,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":1981,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":1977,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":1999,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":1995,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":2014,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":2010,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":2095,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.request_collaborations)@joincolumn({name",{"_index":2083,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.role",{"_index":4470,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user.timezone",{"_index":5122,"title":{},"body":{"injectables/UserService.html":{}}}],["user.toprepos",{"_index":2290,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":2286,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.twitter_username",{"_index":5118,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":5117,"title":{},"body":{"injectables/UserService.html":{}}}],["user.user_list_contributors",{"_index":2210,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user.user_list_contributors)@joincolumn({name",{"_index":2206,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user/collaborations",{"_index":4112,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/apply",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/dtos/update",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":4235,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{}}}],["user/highlights",{"_index":4320,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":4515,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":4901,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/recommendations",{"_index":4965,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user/services/user.service",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user/user",{"_index":2671,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{}}}],["user/user.module",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{}}}],["user_collaborations",{"_index":2093,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows",{"_index":5083,"title":{},"body":{"injectables/UserService.html":{}}}],["user_follows.deleted_at",{"_index":5084,"title":{},"body":{"injectables/UserService.html":{}}}],["user_follows.user_id=users.id",{"_index":4276,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_follows_deleted_at",{"_index":4284,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":2156,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["user_highlight_reactions.user_id=users.id",{"_index":4497,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights",{"_index":2133,"title":{},"body":{"entities/DbUserHighlight.html":{},"injectables/UserService.html":{}}}],["user_highlights.created_at",{"_index":4469,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights.deleted_at",{"_index":5080,"title":{},"body":{"injectables/UserService.html":{}}}],["user_highlights.id",{"_index":5067,"title":{},"body":{"injectables/UserService.html":{}}}],["user_highlights.user_id",{"_index":4455,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["user_highlights.user_id=users.id",{"_index":4449,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":4450,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":4453,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":1721,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserListService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["user_id=:userid",{"_index":4456,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_list_contributor",{"_index":2197,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["user_list_contributors",{"_index":218,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"entities/DbContributionStatTimeframe.html":{},"entities/DbContributionsProjects.html":{},"entities/DbContributorCategoryTimeframe.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserListContributorStat.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors\".\"user_id",{"_index":220,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.list_id='${listid",{"_index":155,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors.user_id=users.id",{"_index":76,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["user_list_contributors_login",{"_index":4807,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists",{"_index":2192,"title":{},"body":{"entities/DbUserList.html":{}}}],["user_lists.user_id=users.id",{"_index":4774,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_lists_login",{"_index":4775,"title":{},"body":{"injectables/UserListService.html":{}}}],["user_login",{"_index":216,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["user_metadata",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_notifications",{"_index":2245,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserService.html":{}}}],["user_notifications.read_at",{"_index":5073,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.type",{"_index":5072,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.user_id=users.id",{"_index":4934,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_organizations",{"_index":2261,"title":{},"body":{"entities/DbUserOrganization.html":{}}}],["user_orgs",{"_index":3565,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.login",{"_index":3569,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_orgs.organization_id",{"_index":3566,"title":{},"body":{"injectables/RepoService.html":{}}}],["user_repos",{"_index":2268,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":2289,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":4154,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":4155,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":4109,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercollaborationrepository",{"_index":4161,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":4137,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":4180,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":677,"title":{},"body":{"controllers/AuthController.html":{}}}],["userendorsementcontroller",{"_index":4233,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowrepository",{"_index":4261,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":4291,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":4252,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":4396,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":4414,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["userhighlightrepository",{"_index":4416,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":4318,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":2670,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":2857,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":2856,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["userinterests",{"_index":3551,"title":{},"body":{"injectables/RepoService.html":{}}}],["userinterests[interest",{"_index":3558,"title":{},"body":{"injectables/RepoService.html":{}}}],["userlistcontributorid",{"_index":4640,"title":{},"body":{"controllers/UserListController.html":{},"injectables/UserListService.html":{}}}],["userlistcontributorrepository",{"_index":61,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatsorderenum",{"_index":33,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatsorderenum.commits",{"_index":4729,"title":{},"body":{"classes/UserListMostActiveContributorsDto.html":{}}}],["userlistcontributorstatstypeenum",{"_index":34,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"miscellaneous/enumerations.html":{}}}],["userlistcontributorstatstypeenum.active",{"_index":117,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.all",{"_index":115,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.alumni",{"_index":121,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontributorstatstypeenum.new",{"_index":119,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["userlistcontroller",{"_index":4620,"title":{"controllers/UserListController.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{},"coverage.html":{}}}],["userlistmodule",{"_index":284,"title":{"modules/UserListModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserListModule.html":{},"modules.html":{},"overview.html":{}}}],["userlistmostactivecontributorsdto",{"_index":35,"title":{"classes/UserListMostActiveContributorsDto.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"classes/UserListMostActiveContributorsDto.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{}}}],["userlistrepository",{"_index":4747,"title":{},"body":{"injectables/UserListService.html":{}}}],["userlistservice",{"_index":4676,"title":{"injectables/UserListService.html":{}},"body":{"controllers/UserListController.html":{},"modules/UserListModule.html":{},"injectables/UserListService.html":{},"coverage.html":{},"overview.html":{}}}],["userliststatscontroller",{"_index":4722,"title":{"controllers/UserListStatsController.html":{}},"body":{"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"coverage.html":{}}}],["userliststatsservice",{"_index":56,"title":{"injectables/UserListStatsService.html":{}},"body":{"interfaces/AllContributionsCount.html":{},"modules/UserListModule.html":{},"controllers/UserListStatsController.html":{},"injectables/UserListStatsService.html":{},"coverage.html":{},"overview.html":{}}}],["usermessage",{"_index":836,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["usermodule",{"_index":285,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbPullRequestReview.html":{},"entities/DbUserListContributor.html":{},"controllers/EndorsementController.html":{},"classes/FilteredUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserListService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":4299,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":4308,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":4204,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":4198,"title":{},"body":{"controllers/UserController.html":{}}}],["username.tolowercase",{"_index":5092,"title":{},"body":{"injectables/UserService.html":{}}}],["usernames",{"_index":2165,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":4925,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":4948,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":4947,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":4949,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":4945,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":4946,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":4893,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["usernotificationrepository",{"_index":4916,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":4259,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":2241,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":4952,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightcreated",{"_index":4955,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":4954,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":568,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userprofile",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrecommendationcontroller",{"_index":4894,"title":{"controllers/UserRecommendationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["userrelations",{"_index":3480,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map((relation",{"_index":3535,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":4988,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["userreporepository",{"_index":5004,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":4745,"title":{},"body":{"injectables/UserListService.html":{},"injectables/UserService.html":{}}}],["userreposmodule",{"_index":286,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":4996,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":3910,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":75,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"controllers/AuthController.html":{},"classes/DbFilteredUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"injectables/EndorsementService.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserListController.html":{},"injectables/UserListService.html":{},"injectables/UserListStatsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["users\".\"id",{"_index":221,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users\".\"login",{"_index":87,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["users'})@apiokresponse({type",{"_index":4208,"title":{},"body":{"controllers/UserController.html":{}}}],["users.dto",{"_index":4216,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.dto.ts",{"_index":2534,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:15",{"_index":2536,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:23",{"_index":2539,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:36",{"_index":2535,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.dto.ts:38",{"_index":2540,"title":{},"body":{"classes/FilteredUsersDto.html":{},"classes/TopUsersDto.html":{}}}],["users.entity",{"_index":4214,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.entity.ts",{"_index":1712,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{},"coverage.html":{}}}],["users.entity.ts:14",{"_index":1716,"title":{},"body":{"classes/DbFilteredUser.html":{}}}],["users.entity.ts:8",{"_index":1717,"title":{},"body":{"classes/DbFilteredUser.html":{},"classes/DbTopUser.html":{}}}],["users.id",{"_index":3567,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["users.name",{"_index":5094,"title":{},"body":{"injectables/UserService.html":{}}}],["users.timezone",{"_index":4811,"title":{},"body":{"injectables/UserListService.html":{}}}],["users_email",{"_index":5077,"title":{},"body":{"injectables/UserService.html":{}}}],["users_followers_count",{"_index":5086,"title":{},"body":{"injectables/UserService.html":{}}}],["users_following_count",{"_index":5085,"title":{},"body":{"injectables/UserService.html":{}}}],["users_highlights_count",{"_index":5081,"title":{},"body":{"injectables/UserService.html":{}}}],["users_is_maintainer",{"_index":5090,"title":{},"body":{"injectables/UserService.html":{}}}],["users_notification_count",{"_index":5074,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":1965,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":1980,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":1998,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":2013,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":2279,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":608,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1157,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"index.html":{}}}],["utc",{"_index":4082,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["utc:hh:mm:ss.l",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["utf8",{"_index":5660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["util/cli",{"_index":2714,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":3871,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1681,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":1694,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@column",{"_index":2201,"title":{},"body":{"entities/DbUserListContributor.html":{}}}],["v4'})@column({type",{"_index":2144,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@isstring()@isoptional",{"_index":3250,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1759,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":1682,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":708,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":4017,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":4022,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":1127,"title":{},"body":{"classes/ContributionsPageDto.html":{},"classes/PageDto.html":{}}}],["validator",{"_index":521,"title":{},"body":{"classes/ApplyUserCouponDto.html":{},"classes/BakeRepoDto.html":{},"classes/CollaboratorsDto.html":{},"classes/CommitAuthorDto.html":{},"classes/CommitsDto.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsPageDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/Contributor.html":{},"classes/CreateBlogSummaryDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateIssueSummaryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/CreateUserListDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["value",{"_index":1060,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/ContributionsTimeframeDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterListContributorsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/FilteredUsersDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopUsersDto.html":{},"classes/UserListMostActiveContributorsDto.html":{},"injectables/UserListStatsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":5277,"title":{},"body":{"index.html":{}}}],["varchar",{"_index":2120,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["variable",{"_index":5176,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":5262,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":1517,"title":{},"body":{"entities/DbBakedRepo.html":{},"entities/DbCommitAuthors.html":{},"entities/DbCommits.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserList.html":{},"entities/DbUserNotification.html":{}}}],["verbose",{"_index":1414,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":1427,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["version",{"_index":5507,"title":{},"body":{"properties.html":{}}}],["versioningtype.uri",{"_index":5626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["videos",{"_index":5431,"title":{},"body":{"index.html":{}}}],["view",{"_index":2737,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserListService.html":{}}}],["view'})@isstring()@isin(['view",{"_index":4054,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":2157,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":1145,"title":{},"body":{"classes/Contributor.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserListDto.html":{},"entities/DbInsight.html":{},"entities/DbUserList.html":{},"classes/UpdateInsightDto.html":{}}}],["visit",{"_index":5260,"title":{},"body":{"index.html":{}}}],["visual",{"_index":5436,"title":{},"body":{"index.html":{}}}],["visualization",{"_index":5435,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":5439,"title":{},"body":{"index.html":{}}}],["vitest",{"_index":5370,"title":{},"body":{"index.html":{}}}],["void",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserListStatsService.html":{}}}],["vortex",{"_index":1621,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":1581,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex@opensauced.pizza",{"_index":3980,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":2002,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["vote'})@apiokresponse({description",{"_index":3704,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote'})@apiparam({name",{"_index":3706,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":5137,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":3695,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:117",{"_index":3707,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:136",{"_index":3710,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:37",{"_index":3714,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:56",{"_index":3720,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:74",{"_index":3723,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:93",{"_index":3726,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":3730,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":5141,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":5151,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":3713,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["votedrepodto",{"_index":3718,"title":{"classes/VotedRepoDto.html":{}},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["voteexists",{"_index":5155,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":5157,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":287,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":3700,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(@param(\"id",{"_index":3736,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":3721,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":3701,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":3724,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":3512,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":3460,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":3729,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["wait",{"_index":727,"title":{},"body":{"classes/BakeRepoDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/PizzaOvenService.html":{}}}],["waitlist",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["waitlisted",{"_index":3990,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["want",{"_index":188,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["warn",{"_index":1415,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":1429,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warranties",{"_index":5478,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":5474,"title":{},"body":{"license.html":{}}}],["watch",{"_index":5346,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":3457,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":5352,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":187,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["web",{"_index":2577,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook.controller",{"_index":3857,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":3859,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":3868,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:82",{"_index":3865,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":3858,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":5212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":3856,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":3921,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":4008,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":2246,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":2240,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":2456,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"id",{"_index":5075,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insight_members.insight_id",{"_index":2799,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":2884,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":2893,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"lower(login",{"_index":5091,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"lower(repos.full_name",{"_index":2460,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":3791,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2votes.repo_id",{"_index":5162,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"reactions.deleted_at",{"_index":5068,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":4178,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.following_user_id",{"_index":4277,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_follows.user_id",{"_index":4279,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":4498,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":4451,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":4936,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["where(\"user_list_contributors.list_id",{"_index":4808,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_lists.id",{"_index":4776,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(\"user_orgs.user_id",{"_index":3570,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"users.timezone",{"_index":4812,"title":{},"body":{"injectables/UserListService.html":{}}}],["where(`\"previous_month_prs\".\"author_login",{"_index":237,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`\"user_list_contributors\".\"list_id",{"_index":222,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":3501,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`'${startdate}'::timestamp",{"_index":4468,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`(:topic",{"_index":3555,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":3319,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`lower(users.login",{"_index":5095,"title":{},"body":{"injectables/UserService.html":{}}}],["where(`pr.\"updated_at",{"_index":226,"title":{},"body":{"interfaces/AllContributionsCount.html":{},"injectables/UserListStatsService.html":{}}}],["where(`pull_requests.updated_at",{"_index":3344,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["whether",{"_index":2102,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["window",{"_index":5725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["withdeleted",{"_index":4506,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["within",{"_index":4831,"title":{},"body":{"controllers/UserListStatsController.html":{}}}],["without",{"_index":1594,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"license.html":{}}}],["workflow",{"_index":5440,"title":{},"body":{"index.html":{}}}],["write",{"_index":5363,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["writefile(path.resolve(process.cwd",{"_index":5658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["writing",{"_index":5356,"title":{},"body":{"index.html":{}}}],["written",{"_index":799,"title":{},"body":{"injectables/BlogSummaryService.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/IssueSummaryService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["x",{"_index":5722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x509",{"_index":5297,"title":{},"body":{"index.html":{}}}],["xa",{"_index":1883,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":5653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yaml.stringify(document",{"_index":5652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yamlswaggerdoc",{"_index":5651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["year",{"_index":5668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["years",{"_index":3206,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["yes",{"_index":1100,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserListService.html":{}}}],["you'})@column({type",{"_index":2231,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["your_api_domain",{"_index":5275,"title":{},"body":{"index.html":{}}}],["your_supabase_api_key",{"_index":5273,"title":{},"body":{"index.html":{}}}],["your_supabase_jwt_secret",{"_index":5274,"title":{},"body":{"index.html":{}}}],["your_supabase_url",{"_index":5272,"title":{},"body":{"index.html":{}}}],["youtube",{"_index":5433,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":3208,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["zone",{"_index":1595,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCoupon.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbPullRequestReview.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserList.html":{},"entities/DbUserListContributor.html":{},"entities/DbUserNotification.html":{},"entities/DbUserOrganization.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":252,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogSummaryModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CouponModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/IssueSummaryModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PizzaOvenModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserListModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AllContributionsCount.html":{"url":"interfaces/AllContributionsCount.html","title":"interface - AllContributionsCount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllContributionsCount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            all_contributions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        all_contributions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        all_contributions:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(listId: string, repoId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n        )::INTEGER`,\n        \"commits\"\n      )\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n        )::INTEGER`,\n        \"prs_created\"\n      );\n\n    // limit to only the top 20 contributors for stats by projects\n    queryBuilder.limit(20);\n\n    const entities: DbUserListContributorStat[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findAllListContributorStats(\n    pageOptionsDto: UserListMostActiveContributorsDto,\n    listId: string\n  ): Promise> {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days'  {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(listId: string): Promise {\n    // todo (jpmcb) - in the future we'll likely want to make this range dynamic.\n    const range = 30;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiServicesModule.html":{"url":"modules/ApiServicesModule.html","title":"module - ApiServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/api-services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PagerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PagerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PagerService } from \"./pager.service\";\n\n@Module({\n  providers: [PagerService],\n  exports: [PagerService],\n})\nexport class ApiServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BlogSummaryModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            ContributorModule\n                        \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            IssueSummaryModule\n                        \n                        \n                            OpenAiModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserListModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport {\n  ApiConfig,\n  DbApiConfig,\n  DbLoggingConfig,\n  EndpointConfig,\n  StripeConfig,\n  OpenAIConfig,\n  PizzaConfig,\n  HacktoberfestConfig,\n} from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { DbBakedRepo } from \"./pizza/entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./pizza/entities/commit_authors.entity\";\nimport { DbCommits } from \"./pizza/entities/commits.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbPullRequestReview } from \"./pull-requests/entities/pull-request-review.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { DbUserOrganization } from \"./user/entities/user-organization.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\nimport { ContributorModule } from \"./contributor/contributor.module\";\nimport { OpenAiModule } from \"./open-ai/open-ai.module\";\nimport { IssueSummaryModule } from \"./issues/issue-summary.module\";\nimport { BlogSummaryModule } from \"./blogs/issue-summary.module\";\nimport { PizzaOvenModule } from \"./pizza/pizza-oven.module\";\nimport { UserListModule } from \"./user-lists/user-list.module\";\nimport { CouponModule } from \"./coupon/coupon.module\";\nimport { DbUserList } from \"./user-lists/entities/user-list.entity\";\nimport { DbUserListContributor } from \"./user-lists/entities/user-list-contributor.entity\";\nimport { DbCoupon } from \"./coupon/entities/coupon.entity\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        ApiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        EndpointConfig,\n        StripeConfig,\n        OpenAIConfig,\n        PizzaConfig,\n        HacktoberfestConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-api.connection\"),\n          host: configService.get(\"db-api.host\"),\n          port: configService.get(\"db-api.port\"),\n          username: configService.get(\"db-api.username\"),\n          password: configService.get(\"db-api.password\"),\n          database: configService.get(\"db-api.database\"),\n          autoLoadEntities: false,\n          entities: [\n            DbUser,\n            DbUserRepo,\n            DbUserHighlight,\n            DbUserHighlightReaction,\n            DbUserNotification,\n            DbUserCollaboration,\n            DbRepo,\n            DbContribution,\n            DbRepoToUserVotes,\n            DbRepoToUserStars,\n            DbRepoToUserSubmissions,\n            DbRepoToUserStargazers,\n            DbInsight,\n            DbInsightMember,\n            DbInsightRepo,\n            DbCustomer,\n            DbSubscription,\n            DbPullRequest,\n            DbPullRequestReview,\n            DbPRInsight,\n            DbUserToUserFollows,\n            DbEmoji,\n            DbUserTopRepo,\n            DbEndorsement,\n            DbBakedRepo,\n            DbCommitAuthors,\n            DbCommits,\n            DbUserOrganization,\n            DbUserList,\n            DbUserListContributor,\n            DbCoupon,\n          ],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-api.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-logging.connection\"),\n          host: configService.get(\"db-logging.host\"),\n          port: configService.get(\"db-logging.port\"),\n          username: configService.get(\"db-logging.username\"),\n          password: configService.get(\"db-logging.password\"),\n          database: configService.get(\"db-logging.database\"),\n          autoLoadEntities: false,\n          entities: [DbLog],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"LG\"),\n          ssl: {\n            ca: configService.get(\"db-logging.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    IssueSummaryModule,\n    BlogSummaryModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n    ContributorModule,\n    OpenAiModule,\n    PizzaOvenModule,\n    UserListModule,\n    CouponModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor(\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v1`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplyUserCouponDto.html":{"url":"classes/ApplyUserCouponDto.html","title":"class - ApplyUserCouponDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplyUserCouponDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/apply-user-coupon.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                couponCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        couponCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Coupon Code', type: String, example: 'saucy'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/apply-user-coupon.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class ApplyUserCouponDto {\n  @ApiProperty({\n    description: \"Coupon Code\",\n    type: String,\n    example: \"saucy\",\n  })\n  @IsString()\n  couponCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyCouponForUser\n                            \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyCouponForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyCouponForUser(userId: number, applyUserCouponDto: ApplyUserCouponDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/coupon')@ApiOperation({operationId: 'applyCouponForUser', summary: 'Applies a coupon for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to apply coupon for the user profile'})@ApiBody({type: ApplyUserCouponDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:230\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    applyUserCouponDto\n                                    \n                                                ApplyUserCouponDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { UserService } from \"../user/services/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { ApplyUserCouponDto } from \"../user/dtos/apply-user-coupon.dto\";\nimport { CouponService } from \"../coupon/coupon.service\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n    private couponService: CouponService\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      role,\n      email: session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      user_metadata: { sub: id, user_name },\n    } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const {\n        is_onboarded,\n        is_waitlisted,\n        role: insights_role,\n        name,\n        bio,\n        location,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n      } = await this.userService.checkAddUser(user);\n\n      userProfile = {\n        is_onboarded,\n        insights_role,\n        is_waitlisted,\n        name,\n        location,\n        bio,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n        coupon_code,\n      };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding(@UserId() userId: number, @Body() body: UserOnboardingDto): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist(@UserId() userId: number): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      email,\n      user_metadata: { sub },\n    } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser(@UserId() userId: number, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserProfileInterestsDto\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserEmailPreferencesDto\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/coupon\")\n  @ApiOperation({\n    operationId: \"applyCouponForUser\",\n    summary: \"Applies a coupon for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to apply coupon for the user profile\" })\n  @ApiBody({ type: ApplyUserCouponDto })\n  async applyCouponForUser(@UserId() userId: number, @Body() applyUserCouponDto: ApplyUserCouponDto): Promise {\n    // check for valid coupon\n    await this.couponService.findCoupon(applyUserCouponDto.couponCode);\n\n    await this.userService.applyCoupon(userId, applyUserCouponDto.couponCode);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCouponModule\n\nCouponModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CouponModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\nimport { CouponModule } from \"../coupon/coupon.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { SupabaseGuard } from \"./supabase.guard\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule, CouponModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BakeRepoDto.html":{"url":"classes/BakeRepoDto.html","title":"class - BakeRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BakeRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/baked-repo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                url\n                            \n                            \n                                wait\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo clone URL', type: String, example: 'https://github.com/open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Option to wait for Pizza service to finish baking repo', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/baked-repo.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean, IsString } from \"class-validator\";\n\nexport class BakeRepoDto {\n  @ApiProperty({\n    description: \"Repo clone URL\",\n    type: String,\n    example: \"https://github.com/open-sauced/insights\",\n  })\n  @IsString()\n  url: string;\n\n  @ApiProperty({\n    description: \"Option to wait for Pizza service to finish baking repo\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  wait: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogSummaryController.html":{"url":"controllers/BlogSummaryController.html","title":"controller - BlogSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blogs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                genereateBlogSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        genereateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    genereateBlogSummary(genereateBlogSummaryDto: CreateBlogSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateBlogSummary', summary: 'Generate a summary for a markdown supported blog'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateBlogSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/blogs/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    genereateBlogSummaryDto\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\nimport { BlogSummaryService } from \"./issue-summary.service\";\n\n@Controller(\"blogs\")\n@ApiTags(\"Blog summary service\")\nexport class BlogSummaryController {\n  constructor(private readonly blogSummaryService: BlogSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateBlogSummary\",\n    summary: \"Generate a summary for a markdown supported blog\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateBlogSummaryDto })\n  async genereateBlogSummary(@Body() genereateBlogSummaryDto: CreateBlogSummaryDto) {\n    const summary = await this.blogSummaryService.generateBlogSummary(genereateBlogSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogSummaryModule.html":{"url":"modules/BlogSummaryModule.html","title":"module - BlogSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blogs/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BlogSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { BlogSummaryService } from \"./issue-summary.service\";\nimport { BlogSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [BlogSummaryController],\n  providers: [BlogSummaryService],\n  exports: [BlogSummaryService],\n})\nexport class BlogSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogSummaryService.html":{"url":"injectables/BlogSummaryService.html","title":"injectable - BlogSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/issue-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBlogSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/blogs/issue-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateBlogSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBlogSummary(options: CreateBlogSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/issue-summary.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateBlogSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/blogs/issue-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateBlogSummaryDto } from \"./dtos/create-blog-summary.dto\";\n\n@Injectable()\nexport class BlogSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate a blog summary for a blog with the specifications mentioned below`,\n      `The summary should be written in ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the blog.\",\n    ].join(\"\\n\");\n  }\n\n  async generateBlogSummary(options: CreateBlogSummaryDto) {\n    const content = `Blog Title: ${options.blogTitle}\\n\\nBlog Content: ${options.blogMarkdown}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeExplanationController.html":{"url":"controllers/CodeExplanationController.html","title":"controller - CodeExplanationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeExplanationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeExplanationDto: GenerateCodeExplanationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/explanation/generate')@ApiOperation({operationId: 'generateCodeExplanation', summary: 'Generates an explanation for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeExplanationDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-explanation.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeExplanationDto\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeExplanationController {\n  constructor(private codeExplanationService: CodeExplanationService) {}\n\n  @Post(\"/explanation/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeExplanation\",\n    summary: \"Generates an explanation for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeExplanationDto })\n  async generatePRDescription(@Body() generateCodeExplanationDto: GenerateCodeExplanationDto) {\n    const suggestion = await this.codeExplanationService.generateExplanation(generateCodeExplanationDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeExplanationService.html":{"url":"injectables/CodeExplanationService.html","title":"injectable - CodeExplanationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeExplanationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateExplanation\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-explanation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateExplanation\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateExplanation(options: GenerateCodeExplanationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\n\n@Injectable()\nexport class CodeExplanationService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate an explanation for the given code snippet written in ${language} with the specifications mentioned below`,\n      `The explanation must be a maximum of ${maxLength} characters.`,\n    ].join(\"\\n\");\n  }\n\n  async generateExplanation(options: GenerateCodeExplanationDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor(private codeRefactorSuggestionService: CodeRefactorSuggestionService) {}\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription(@Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeTestSuggestionController.html":{"url":"controllers/CodeTestSuggestionController.html","title":"controller - CodeTestSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeTestSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test.suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/generate')@ApiOperation({operationId: 'generateCodeTest', summary: 'Generates a test for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeTestSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-test.suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeTestSuggestionDto\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeTestSuggestionController {\n  constructor(private codeTestSuggestionService: CodeTestSuggestionService) {}\n\n  @Post(\"/test/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeTest\",\n    summary: \"Generates a test for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeTestSuggestionDto })\n  async generatePRDescription(@Body() generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto) {\n    const suggestion = await this.codeTestSuggestionService.generateTestSuggestion(generateCodeTestSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeTestSuggestionService.html":{"url":"injectables/CodeTestSuggestionService.html","title":"injectable - CodeTestSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeTestSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generatePrompt\n                            \n                            \n                                    Async\n                                generateTestSuggestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-test-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTestSuggestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTestSuggestion(options: GenerateCodeTestSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\n\n@Injectable()\nexport class CodeTestSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(maxLength: number) {\n    return [\n      `Generate a test for a given code snippet with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateTestSuggestion(options: GenerateCodeTestSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollaboratorsDto.html":{"url":"classes/CollaboratorsDto.html","title":"class - CollaboratorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollaboratorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/collaborators.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor user IDs', isArray: true, type: 'integer', example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/collaborators.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray } from \"class-validator\";\n\nexport class CollaboratorsDto {\n  @ApiProperty({\n    description: \"An array of contributor user IDs\",\n    isArray: true,\n    type: \"integer\",\n    example: [42211, 81233],\n  })\n  @Type(() => Number)\n  @IsArray()\n  contributors: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitAuthorDto.html":{"url":"classes/CommitAuthorDto.html","title":"class - CommitAuthorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitAuthorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commit_authors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author_email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Public Commit Author Email', type: String, example: 'hello@opensauced.pizza'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commit_authors.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitAuthorDto {\n  @ApiProperty({\n    description: \"Public Commit Author Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsString()\n  author_email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitAuthorsService.html":{"url":"injectables/CommitAuthorsService.html","title":"injectable - CommitAuthorsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitAuthorsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commit-authors.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitAuthors\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitAuthorsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commit-authors.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitAuthorsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commit-authors.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\n\n@Injectable()\nexport class CommitAuthorsService {\n  constructor(\n    @InjectRepository(DbCommitAuthors, \"ApiConnection\")\n    private commitAuthorsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitAuthorsRepository.createQueryBuilder(\"commit_authors\");\n\n    return builder;\n  }\n\n  async findAllCommitAuthors(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitAuthorById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommitsDto.html":{"url":"classes/CommitsDto.html","title":"class - CommitsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommitsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/dtos/commits.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commit_hash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Hash for a specific commit', type: String, example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/dtos/commits.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class CommitsDto {\n  @ApiProperty({\n    description: \"Hash for a specific commit\",\n    type: String,\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @IsString()\n  commit_hash: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommitsService.html":{"url":"injectables/CommitsService.html","title":"injectable - CommitsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommitsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/commits.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                findAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commitsRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/commits.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commitsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/commits.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Injectable()\nexport class CommitsService {\n  constructor(\n    @InjectRepository(DbCommits, \"ApiConnection\")\n    private commitsRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.commitsRepository.createQueryBuilder(\"commits\");\n\n    return builder;\n  }\n\n  async findAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"baked_repo_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"commit_author_id = :id\", { id });\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findCommitById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbContribution], \"ApiConnection\"), RepoModule],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageMetaDto.html":{"url":"classes/ContributionPageMetaDto.html","title":"class - ContributionPageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-pagemeta.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageMetaDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allContributionsCount\n                            \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters, allContributionsCount: number)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        allContributionsCount\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        allContributionsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of all contributions', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-pagemeta.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageMetaDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageMetaDto:31\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"../../common/dtos/page-meta-parameters.dto\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionPageMetaDto extends PageMetaDto {\n  @ApiProperty({\n    description: \"The number of all contributions\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly allContributionsCount: number;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters, allContributionsCount: number) {\n    super({ pageOptionsDto, itemCount });\n\n    this.allContributionsCount = allContributionsCount;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor(\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository\n  ) {}\n\n  async findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder.where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsPageDto.html":{"url":"classes/ContributionsPageDto.html","title":"class - ContributionsPageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsPageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\n\nexport class ContributionsPageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionsTimeframeDto.html":{"url":"classes/ContributionsTimeframeDto.html","title":"class - ContributionsTimeframeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionsTimeframeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/contributions-timeframe.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/contributions-timeframe.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsIn, IsInt, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { UserListContributorStatsTypeEnum } from \"./most-active-contributors.dto\";\n\nexport class ContributionsTimeframeDto {\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Contributor.html":{"url":"classes/Contributor.html","title":"class - Contributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Contributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorController.html":{"url":"controllers/ContributorController.html","title":"controller - ContributorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchAllPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequestContributors', summary: 'Searches contributors from pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\n\n@Controller(\"contributors\")\n@ApiTags(\"Contributors service\")\nexport class ContributorController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequestContributors\",\n    summary: \"Searches contributors from pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async searchAllPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllContributorsWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorInsightsController.html":{"url":"controllers/ContributorInsightsController.html","title":"controller - ContributorInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor-insights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllChurnPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRecentPullRequestContributors\n                            \n                            \n                                    Async\n                                findAllRepeatPullRequestContributors\n                            \n                            \n                                    Async\n                                newPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/churn')@ApiOperation({operationId: 'findAllChurnPullRequestContributors', summary: 'Gets all recent churned contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recent')@ApiOperation({operationId: 'findAllRecentPullRequestContributors', summary: 'Gets all recent contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repeat')@ApiOperation({operationId: 'findAllRepeatPullRequestContributors', summary: 'Gets all recent repeat contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        newPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    newPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/new')@ApiOperation({operationId: 'newPullRequestContributors', summary: 'Gets new contributors given a date range for repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorInsightsDto } from \"../pull-requests/dtos/pull-request-contributor-insights.dto\";\n\n@Controller(\"contributors/insights\")\n@ApiTags(\"Contributors service\")\nexport class ContributorInsightsController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/new\")\n  @ApiOperation({\n    operationId: \"newPullRequestContributors\",\n    summary: \"Gets new contributors given a date range for repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async newPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findNewContributorsInTimeRange(pageOptionsDto);\n  }\n\n  @Get(\"/recent\")\n  @ApiOperation({\n    operationId: \"findAllRecentPullRequestContributors\",\n    summary: \"Gets all recent contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRecentPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRecentContributors(pageOptionsDto);\n  }\n\n  @Get(\"/churn\")\n  @ApiOperation({\n    operationId: \"findAllChurnPullRequestContributors\",\n    summary: \"Gets all recent churned contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllChurnPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllChurnContributors(pageOptionsDto);\n  }\n\n  @Get(\"/repeat\")\n  @ApiOperation({\n    operationId: \"findAllRepeatPullRequestContributors\",\n    summary: \"Gets all recent repeat contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRepeatPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRepeatContributors(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributorModule.html":{"url":"modules/ContributorModule.html","title":"module - ContributorModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributorModule\n\n\n\ncluster_ContributorModule_imports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nContributorModule\n\nContributorModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contributor/contributor.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ContributorController\n                        \n                        \n                            ContributorInsightsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { ContributorController } from \"./contributor.controller\";\nimport { ContributorInsightsController } from \"./contributor-insights.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest], \"ApiConnection\"), PullRequestModule],\n  controllers: [ContributorController, ContributorInsightsController],\n})\nexport class ContributorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CouponModule.html":{"url":"modules/CouponModule.html","title":"module - CouponModule","body":"\n                   \n\n\n\n\n    Modules\n    CouponModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_exports\n\n\n\ncluster_CouponModule_providers\n\n\n\n\nCouponService \n\nCouponService \n\n\n\nCouponModule\n\nCouponModule\n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/coupon/coupon.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CouponService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CouponService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\nimport { CouponService } from \"./coupon.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCoupon], \"ApiConnection\")],\n  providers: [CouponService],\n  exports: [CouponService],\n})\nexport class CouponModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CouponService.html":{"url":"injectables/CouponService.html","title":"injectable - CouponService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CouponService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/coupon.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteCoupon\n                            \n                            \n                                    Async\n                                findCoupon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(couponRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/coupon/coupon.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        couponRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCoupon(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/coupon/coupon.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbCoupon } from \"./entities/coupon.entity\";\n\n@Injectable()\nexport class CouponService {\n  constructor(\n    @InjectRepository(DbCoupon, \"ApiConnection\")\n    private couponRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.couponRepository.createQueryBuilder(\"coupons\").withDeleted();\n\n    return builder;\n  }\n\n  async findCoupon(code: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"code = :code\", { code }).andWhere(`(expired_at IS NULL OR expired_at > now())`);\n\n    const entity = await queryBuilder.getOne();\n\n    if (!entity) {\n      throw new NotFoundException(\"The coupon does not exist\");\n    }\n\n    return entity;\n  }\n\n  async deleteCoupon(code: string) {\n    return this.couponRepository.softDelete(code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBlogSummaryDto.html":{"url":"classes/CreateBlogSummaryDto.html","title":"class - CreateBlogSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBlogSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blogs/dtos/create-blog-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blogMarkdown\n                            \n                            \n                                blogTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blogMarkdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Markdown', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blogTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Blog Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blogs/dtos/create-blog-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateBlogSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Blog Title\",\n    type: String,\n  })\n  @IsString()\n  blogTitle: string;\n\n  @ApiProperty({\n    description: \"Blog Markdown\",\n    type: String,\n  })\n  @IsString()\n  blogMarkdown: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: 'integer', example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: 'integer', example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', type: 'integer', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: \"integer\",\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: \"integer\",\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    type: \"integer\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n  repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIssueSummaryDto.html":{"url":"classes/CreateIssueSummaryDto.html","title":"class - CreateIssueSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIssueSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/dtos/create-issue-summary.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issueComments\n                            \n                            \n                                issueDescription\n                            \n                            \n                                issueTitle\n                            \n                            \n                                language\n                            \n                            \n                                summaryLength\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        issueComments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Comments', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Description', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issueTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Issue Title', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        summaryLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Summary Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issues/dtos/create-issue-summary.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class CreateIssueSummaryDto {\n  @ApiProperty({\n    description: \"Summary Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  summaryLength: number;\n\n  @ApiProperty({\n    description: \"Summary Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Summary Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Summary Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Issue Title\",\n    type: String,\n  })\n  @IsString()\n  issueTitle: string;\n\n  @ApiProperty({\n    description: \"Issue Description\",\n    type: String,\n  })\n  @IsString()\n  issueDescription: string;\n\n  @ApiProperty({\n    description: \"Issue Comments\",\n    type: String,\n  })\n  @IsString()\n  issueComments: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n  username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                taggedRepos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        taggedRepos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"pull_request\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight type', type: String, example: 'pull_request'})@IsString()@IsIn(['pull_request', 'blog_post', 'issue', 'milestone'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsArray, IsDateString, IsIn, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n\n  @ApiProperty({\n    description: \"Highlight type\",\n    type: String,\n    example: \"pull_request\",\n  })\n  @IsString()\n  @IsIn([\"pull_request\", \"blog_post\", \"issue\", \"milestone\"])\n  public type = \"pull_request\";\n\n  @ApiProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @IsArray()\n  @IsString({ each: true })\n  public taggedRepos: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserListDto.html":{"url":"classes/CreateUserListDto.html","title":"class - CreateUserListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/create-user-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributors\n                            \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of contributor objects', isArray: true, example: undefined})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List Name', type: String, example: 'My List'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/create-user-list.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nexport class Contributor {\n  id: number;\n  login: string;\n}\n\nexport class CreateUserListDto {\n  @ApiProperty({\n    description: \"List Name\",\n    type: String,\n    example: \"My List\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"List Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of contributor objects\",\n    isArray: true,\n    example: [{ id: 12345, login: \"sauceduser\" }],\n  })\n  @IsArray()\n  @Type(() => Contributor)\n  contributors: { id: number; login: string }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService) {\n    super(context, {\n      ...options,\n      logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n    });\n\n    this.logsService = logsService;\n  }\n\n  async log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_CustomerModule_exports\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCustomer], \"ApiConnection\")],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById(id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer(userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor(name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.warn(message);\n  }\n\n  log(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbBakedRepo.html":{"url":"entities/DbBakedRepo.html","title":"entity - DbBakedRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbBakedRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/baked-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clone_url\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clone_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository clone url', example: 'https://github.com/open-sauced/insights.git'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.baked_repo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 12345678, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/baked-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"baked_repos\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbBakedRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Baked repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository clone url\",\n    example: \"https://github.com/open-sauced/insights.git\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public clone_url: string;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 12345678,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public repo_id!: number;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.baked_repo)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommitAuthors.html":{"url":"entities/DbCommitAuthors.html","title":"entity - DbCommitAuthors","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommitAuthors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commit_authors.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                commit_author_email\n                            \n                            \n                                    Public\n                                commits\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'character varying', length: 255, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommits[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, commits => commits.commit_author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commit_authors.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, OneToMany, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbCommits } from \"./commits.entity\";\n\n@Entity({\n  name: \"commit_authors\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommitAuthors extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"character varying\",\n    length: 255,\n    select: false,\n  })\n  public commit_author_email: string;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbCommits, (commits) => commits.commit_author)\n  public commits: DbCommits[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCommits.html":{"url":"entities/DbCommits.html","title":"entity - DbCommits","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCommits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/entities/commits.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                baked_repo\n                            \n                            \n                                    Public\n                                baked_repo_id\n                            \n                            \n                                    Public\n                                commit_author\n                            \n                            \n                                    Public\n                                commit_author_id\n                            \n                            \n                                    Public\n                                commit_date\n                            \n                            \n                                    Public\n                                commit_hash\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbBakedRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, baked_repo => baked_repo.commits)@JoinColumn({name: 'baked_repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        baked_repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Baked repo identifier', example: 57568598, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbCommitAuthors\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, commit_author => commit_author.commits)@JoinColumn({name: 'commit_author_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_author_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit author identifier', example: 9876543, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Date for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        commit_hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Hash for the commit', example: '5e7c6c7af42d38c57f363c564c58007da448c443'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Commit identifier', example: 71359796, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pizza/entities/commits.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, JoinColumn, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbBakedRepo } from \"./baked-repo.entity\";\nimport { DbCommitAuthors } from \"./commit_authors.entity\";\n\n@Entity({\n  name: \"commits\",\n  orderBy: {\n    id: \"DESC\",\n  },\n})\nexport class DbCommits extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Commit identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Hash for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_hash: string;\n\n  @ApiModelProperty({\n    description: \"Date for the commit\",\n    example: \"5e7c6c7af42d38c57f363c564c58007da448c443\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public commit_date: string;\n\n  @ApiModelProperty({\n    description: \"Baked repo identifier\",\n    example: 57568598,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public baked_repo_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbBakedRepo, (baked_repo) => baked_repo.commits)\n  @JoinColumn({\n    name: \"baked_repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public baked_repo!: DbBakedRepo;\n\n  @ApiModelProperty({\n    description: \"Commit author identifier\",\n    example: 9876543,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n  })\n  public commit_author_id!: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbCommitAuthors, (commit_author) => commit_author.commits)\n  @JoinColumn({\n    name: \"commit_author_id\",\n    referencedColumnName: \"id\",\n  })\n  public commit_author!: DbCommitAuthors;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15, type: 'integer'})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:104\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionStatTimeframe.html":{"url":"entities/DbContributionStatTimeframe.html","title":"entity - DbContributionStatTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionStatTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionStatTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributionsProjects.html":{"url":"entities/DbContributionsProjects.html","title":"entity - DbContributionsProjects","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributionsProjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributions-projects.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contributions\n                            \n                            \n                                org_id\n                            \n                            \n                                project_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contributions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The number of contributions associated with a org/repo', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        org_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The org name of the repo', example: 0, type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        project_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The project name of the repo', example: 0, type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributions-projects.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributionsProjects {\n  @ApiModelProperty({\n    description: \"The org name of the repo\",\n    example: 0,\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  org_id: string;\n\n  @ApiModelProperty({\n    description: \"The project name of the repo\",\n    example: 0,\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  project_id: string;\n\n  @ApiModelProperty({\n    description: \"The number of contributions associated with a org/repo\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  contributions: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContributorCategoryTimeframe.html":{"url":"entities/DbContributorCategoryTimeframe.html","title":"entity - DbContributorCategoryTimeframe","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContributorCategoryTimeframe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/contributors-timeframe.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                all\n                            \n                            \n                                alumni\n                            \n                            \n                                new\n                            \n                            \n                                time_end\n                            \n                            \n                                time_start\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who contributed in current time frame and previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of all contributors (active, new, and alumni)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alumni\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who did not contribute in current time frame but did in the previous time frame', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        new\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the end of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time_start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'The ISO timestamp for the start of the time frame', example: '2023-08-26T23:55:49.204Z', type: 'string'})@Column({type: 'string', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/contributors-timeframe.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, Entity } from \"typeorm\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbContributorCategoryTimeframe {\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the start of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_start: string;\n\n  @ApiModelProperty({\n    description: \"The ISO timestamp for the end of the time frame\",\n    example: \"2023-08-26T23:55:49.204Z\",\n    type: \"string\",\n  })\n  @Column({\n    type: \"string\",\n    select: false,\n    insert: false,\n  })\n  time_end: string;\n\n  @ApiModelProperty({\n    description: \"Number of all contributors (active, new, and alumni)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  all: number;\n\n  @ApiModelProperty({\n    description: \"Number of contributors who contributed in current time frame and previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  active: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  new: number;\n\n  @ApiModelProperty({\n    description:\n      \"Number of contributors who did not contribute in current time frame but did in the previous time frame\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  alumni: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCoupon.html":{"url":"entities/DbCoupon.html","title":"entity - DbCoupon","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCoupon\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/coupon/entities/coupon.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                expired_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Coupon identifier', example: 'saucy', type: 'string'})@PrimaryColumn({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        expired_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing coupon expiration date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/coupon/entities/coupon.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, CreateDateColumn, DeleteDateColumn, PrimaryColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"coupons\" })\nexport class DbCoupon extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Coupon identifier\",\n    example: \"saucy\",\n    type: \"string\",\n  })\n  @PrimaryColumn({ type: \"text\" })\n  public code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing coupon expiration date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public expired_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn } from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbFilteredUser.html":{"url":"classes/DbFilteredUser.html","title":"class - DbFilteredUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbFilteredUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/filtered-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Users fullname', example: 'Brian Douglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/filtered-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbFilteredUser {\n  @ApiModelProperty({\n    description: \"User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Users fullname\",\n    example: \"Brian Douglas\",\n  })\n  public full_name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbInsightRepo } from \"./insight-repo.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.insights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, (insightRepo) => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133, type: 'integer'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28', type: 'string', format: 'date'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287, type: 'integer'})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28\",\n    type: \"string\",\n    format: \"date\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: Date;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                commits\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_by_login\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:244\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:260\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits in the PR', example: 4, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:279\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:252\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:271\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:228\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:201\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_by_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request merged by username', example: 'bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:208\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612, type: 'integer'})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:218\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n    type: \"integer\",\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request merged by username\",\n    example: \"bdougie\",\n  })\n  @Column(\"text\")\n  public merged_by_login?: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits in the PR\",\n    example: 4,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public commits?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbPullRequestContributor.html":{"url":"classes/DbPullRequestContributor.html","title":"class - DbPullRequestContributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbPullRequestContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr last update', example: '2022-08-28 22:04:29.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbPullRequestContributor {\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  public updated_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequestReview.html":{"url":"entities/DbPullRequestReview.html","title":"entity - DbPullRequestReview","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequestReview\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-review.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                published_at\n                            \n                            \n                                    Public\n                                pullRequest\n                            \n                            \n                                    Public\n                                reviewer_login\n                            \n                            \n                                    Public\n                                    Optional\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr review creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review identifier', example: 123456789, type: 'integer'})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        published_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review published date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pullRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbPullRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'pull_request_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reviewer_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request reviewer username', example: 'Bdougie'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request review state', example: 'approved'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr review update date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-review.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, ManyToOne, JoinColumn, BaseEntity, CreateDateColumn, PrimaryColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbPullRequest } from \"./pull-request.entity\";\n\n@Entity(\"pull_request_reviews\")\nexport class DbPullRequestReview extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request review identifier\",\n    example: 123456789,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"integer\")\n  public id: number;\n\n  @ManyToOne(() => DbPullRequest)\n  @JoinColumn({ name: \"pull_request_id\" })\n  public pullRequest: DbPullRequest;\n\n  @ApiModelProperty({\n    description: \"Pull request reviewer username\",\n    example: \"Bdougie\",\n  })\n  @Column(\"text\")\n  public reviewer_login: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr review creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review published date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public published_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr review update date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Pull request review state\",\n    example: \"approved\",\n  })\n  @Column(\"text\")\n  public state?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTimezone.html":{"url":"classes/DbTimezone.html","title":"class - DbTimezone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTimezone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/timezones.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timezone string', example: 'America/Los_Angeles'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/timezones.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTimezone {\n  @ApiModelProperty({\n    description: \"Timezone string\",\n    example: \"America/Los_Angeles\",\n  })\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTopUser.html":{"url":"classes/DbTopUser.html","title":"class - DbTopUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTopUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/top-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/top-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTopUser {\n  @ApiModelProperty({\n    description: \"Top User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations)@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133, type: 'integer'})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n    type: \"integer\",\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.collaborations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.request_collaborations)\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                featured\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                tagged_repos\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is featured or not', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133, type: 'integer'})@PrimaryGeneratedColumn({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tagged_repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'An array of full-names of tagged repositories', example: undefined, type: 'string', isArray: true})@Column({type: 'varchar', array: true, default: '{}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight type', example: 'pull_request'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:177\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn({ type: \"bigint\" })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Highlight type\",\n    example: \"pull_request\",\n  })\n  @Column(\"text\")\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is featured or not\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public featured?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"An array of full-names of tagged repositories\",\n    example: [\"open-sauced/insights\", \"open-sauced/ai\"],\n    type: \"string\",\n    isArray: true,\n  })\n  @Column({\n    type: \"varchar\",\n    array: true,\n    default: \"{}\",\n  })\n  public tagged_repos: string[];\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.highlights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({type: 'integer'})@Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @ApiModelProperty({ type: \"integer\" })\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n  emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightReactionResponse.html":{"url":"classes/DbUserHighlightReactionResponse.html","title":"class - DbUserHighlightReactionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightReactionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                reaction_users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reaction_users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Usernames of users who reacted with this emoji', type: 'string', example: undefined, isArray: true})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserList.html":{"url":"entities/DbUserList.html","title":"entity - DbUserList","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                list_user\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User List identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.lists)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List Name', example: 'JavaScript Developers'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133, type: 'integer'})@Column({type: 'bigint', select: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_lists\" })\nexport class DbUserList extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User List identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: true,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"List Name\",\n    example: \"JavaScript Developers\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.lists)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public list_user!: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributor.html":{"url":"entities/DbUserListContributor.html","title":"entity - DbUserListContributor","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                list_id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                user_id\n                            \n                            \n                                    Public\n                                user_list_contributor\n                            \n                            \n                                    Public\n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list contributor identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        list_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List identifier', example: 'uuid-v4'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_list_contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.user_list_contributors)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'List user source username', example: 'sauceduser'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryColumn,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributor {\n  @ApiModelProperty({\n    description: \"User list contributor identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"List identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column()\n  public list_id!: string;\n\n  @ApiModelProperty({\n    description: \"List user source username\",\n    example: \"sauceduser\",\n  })\n  @Column({ type: \"text\" })\n  public username?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.user_list_contributors)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user_list_contributor!: DbUser;\n\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserListContributorStat.html":{"url":"entities/DbUserListContributorStat.html","title":"entity - DbUserListContributorStat","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserListContributorStat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/entities/user-list-contributor-stats.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                commits\n                            \n                            \n                                issues_created\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                prs_created\n                            \n                            \n                                prs_reviewed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of comments associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of commits associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issues_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of issues created by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User list collaborator's login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs created associated with a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prs_reviewed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Number of PRs reviewed by a user login', example: 0, type: 'integer'})@Column({type: 'bigint', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/entities/user-list-contributor-stats.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_list_contributors\" })\nexport class DbUserListContributorStat {\n  @ApiModelProperty({\n    description: \"User list collaborator's login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiModelProperty({\n    description: \"Number of commits associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  commits: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs created associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of PRs reviewed by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  prs_reviewed: number;\n\n  @ApiModelProperty({\n    description: \"Number of issues created by a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  issues_created: number;\n\n  @ApiModelProperty({\n    description: \"Number of comments associated with a user login\",\n    example: 0,\n    type: \"integer\",\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n    insert: false,\n  })\n  comments: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                from_user\n                            \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        from_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.from_user_notifications)@JoinColumn({name: 'from_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133, type: 'integer'})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498, type: 'integer'})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn, JoinColumn, ManyToOne } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n    type: \"integer\",\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.from_user_notifications)\n  @JoinColumn({\n    name: \"from_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public from_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserOrganization.html":{"url":"entities/DbUserOrganization.html","title":"entity - DbUserOrganization","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserOrganization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-organization.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                organization_id\n                            \n                            \n                                    Public\n                                organization_user\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User organization identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Organization identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        organization_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'organization_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.organizations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-organization.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_organizations\" })\nexport class DbUserOrganization {\n  @ApiModelProperty({\n    description: \"User organization identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Organization identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public organization_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.organizations)\n  @JoinColumn({\n    name: \"organization_id\",\n    referencedColumnName: \"id\",\n  })\n  public organization_user: DbUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, Column, PrimaryColumn, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196, type: 'integer'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133, type: 'integer'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n    type: \"integer\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n    type: \"integer\",\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n    type: \"integer\",\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor(private emojiService: EmojiService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEmoji], \"ApiConnection\")],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor(\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsementsByUsername\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserCreatedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsementsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsementsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsementsByUsername', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/services/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor(private readonly endorsementService: EndorsementService, private readonly userService: UserService) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement(\n    @Headers(\"X-OpenSauced-token\") _token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername(\n    @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById(@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsementsByUsername\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsementsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById(@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_imports\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEndorsement], \"ApiConnection\"), UserModule, AuthModule, ApiServicesModule],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor(\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create(createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.creator_user_id = :userId\", { userId }).orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findOneById(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async remove(id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor(private configService: ConfigService) {}\n\n  canActivate(host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterListContributorsDto.html":{"url":"classes/FilterListContributorsDto.html","title":"class - FilterListContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterListContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/filter-contributors.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Optional\n                                pr_velocity\n                            \n                            \n                                    Optional\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'Denver, Colorado'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pr_velocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'integer', example: 2, description: 'Less than or equal to the average number of days to merge a PR over the last 30 days'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'Mountain Standard Time'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/filter-contributors.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user-lists/dtos/filter-contributors.dto.ts:54\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, IsString } from \"class-validator\";\n\nexport class FilterListContributorsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"Denver, Colorado\",\n  })\n  @IsString()\n  @IsOptional()\n  location?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"Mountain Standard Time\",\n  })\n  @IsString()\n  @IsOptional()\n  timezone?: string;\n\n  @ApiPropertyOptional({\n    type: \"integer\",\n    example: 2,\n    description: \"Less than or equal to the average number of days to merge a PR over the last 30 days\",\n  })\n  @IsOptional()\n  pr_velocity?: number;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilteredUsersDto.html":{"url":"classes/FilteredUsersDto.html","title":"class - FilteredUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilteredUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/filtered-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username search query to filter from the list of users', type: 'string'})@MinLength(3)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/filtered-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/filtered-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max, MinLength } from \"class-validator\";\n\nexport class FilteredUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiProperty({\n    description: \"Username search query to filter from the list of users\",\n    type: \"string\",\n  })\n  @MinLength(3)\n  @Type(() => String)\n  readonly username: string = \"\";\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly limit?: number = 10;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeExplanationDto.html":{"url":"classes/GenerateCodeExplanationDto.html","title":"class - GenerateCodeExplanationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeExplanationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-explanation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min, IsIn } from \"class-validator\";\n\nexport class GenerateCodeExplanationDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeTestSuggestionDto.html":{"url":"classes/GenerateCodeTestSuggestionDto.html","title":"class - GenerateCodeTestSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeTestSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeTestSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: 'integer', example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: 'integer', example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: \"integer\",\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: \"integer\",\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n  diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\"chore: fixed a bug with the UI\", \"style: added some rounded corners to some boxes\"],\n  })\n  @IsOptional()\n  commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service() {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () =>\n        this.disk.checkStorage(\"disk.usage\", {\n          thresholdPercent: this.configService.get(\"disk_percentage\")!,\n          path: \"/\",\n        }),\n      async () =>\n        this.disk.checkStorage(\"disk.storage\", {\n          thresholdPercent: this.configService.get(\"disk_size\")!,\n          path: \"/\",\n        }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web() {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                featureHighlight\n                            \n                            \n                                    Async\n                                findAllFeaturedHighlights\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                findTopHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                            \n                                    Async\n                                unfeatureHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        featureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    featureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/featured')@ApiOperation({operationId: 'addAFeaturedHighlight', summary: 'Add a highlight to the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeaturedHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeaturedHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findAllFeaturedHighlights', summary: 'Finds all featured highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopHighlights(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'findTopHighlights', summary: 'Finds top highlights for the day range and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfeatureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfeatureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/featured')@ApiOperation({operationId: 'removeAFeaturedHighlight', summary: 'Remove a highlight from the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findAllFeaturedHighlights\",\n    summary: \"Finds all featured highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllFeaturedHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"addAFeaturedHighlight\",\n    summary: \"Add a highlight to the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async featureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addFeatured(id, userId);\n  }\n\n  @Delete(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"removeAFeaturedHighlight\",\n    summary: \"Remove a highlight from the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async unfeatureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.removeFeatured(id, userId);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightReactions(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"findTopHighlights\",\n    summary: \"Finds top highlights for the day range and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findTopHighlights(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findTop(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { HighlightController } from \"./highlight.controller\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [TypeOrmModule.forFeature([DbUserHighlight], \"ApiConnection\"), UserModule],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\"emoji_id\", \"reaction_count\"]) {\n  @ApiPropertyOptional({\n    description: \"Usernames of users who reacted with this emoji\",\n    type: \"string\",\n    example: [\"RitaDee\", \"diivi\"],\n    isArray: true,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  readonly reaction_users?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use(request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor(private readonly insightsService: InsightsService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findInsightPageById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightForUser(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor(\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsightMember(insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember(id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember(id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight(\n    userId: number,\n    insightId: number,\n    accessRoles: string[],\n    checkOwner = true\n  ): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor(\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  async addInsightRepo(insightId: number, repo: RepoInfo) {\n    // when individual insight pages are fetched, go bake their repos to get fresh commit data\n    const bakeRepoInfo: BakeRepoDto = {\n      url: `https://github.com/${repo.fullName}`,\n      wait: false,\n    };\n\n    await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo(id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_imports\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PizzaOvenModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenModule } from \"../pizza/pizza-oven.module\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([DbInsight, DbInsightRepo, DbInsightMember], \"ApiConnection\"),\n    UserModule,\n    ApiServicesModule,\n    PizzaOvenModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository, pizzaOvenService: PizzaOvenService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pizzaOvenService\n                                                  \n                                                        \n                                                                        PizzaOvenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { PizzaOvenService } from \"../pizza/pizza-oven.service\";\nimport { BakeRepoDto } from \"../pizza/dtos/baked-repo.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor(\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n    private pizzaOvenService: PizzaOvenService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    item.repos.forEach(async (url) => {\n      // when individual insight pages are fetched, go bake their repos to get fresh commit data\n      const bakeRepoInfo: BakeRepoDto = {\n        url: `https://github.com/${url.full_name}`,\n        wait: false,\n      };\n\n      await this.pizzaOvenService.postToPizzaOvenService(bakeRepoInfo);\n    });\n\n    return item;\n  }\n\n  async addInsight(insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight(id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight(id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(\n        `:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `,\n        { userId }\n      )\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssueSummaryController.html":{"url":"controllers/IssueSummaryController.html","title":"controller - IssueSummaryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssueSummaryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(generateIssueSummaryDto: CreateIssueSummaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/summary/generate')@ApiOperation({operationId: 'generateIssueSummary', summary: 'Generate a summary for an issue'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateIssueSummaryDto})\n                \n            \n\n            \n                \n                    Defined in src/issues/issue-summary.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateIssueSummaryDto\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\n\n@Controller(\"issues\")\n@ApiTags(\"Issue summary service\")\nexport class IssueSummaryController {\n  constructor(private readonly issueSummaryService: IssueSummaryService) {}\n\n  @Post(\"/summary/generate\")\n  @ApiOperation({\n    operationId: \"generateIssueSummary\",\n    summary: \"Generate a summary for an issue\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateIssueSummaryDto })\n  async generateIssueSummary(@Body() generateIssueSummaryDto: CreateIssueSummaryDto) {\n    const summary = await this.issueSummaryService.generateIssueSummary(generateIssueSummaryDto);\n\n    if (!summary) {\n      throw new BadRequestException();\n    }\n\n    return { summary };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssueSummaryModule.html":{"url":"modules/IssueSummaryModule.html","title":"module - IssueSummaryModule","body":"\n                   \n\n\n\n\n    Modules\n    IssueSummaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_imports\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issues/issue-summary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IssueSummaryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IssueSummaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { IssueSummaryService } from \"./issue-summary.service\";\nimport { IssueSummaryController } from \"./issue-summary.controller\";\n\n@Module({\n  imports: [OpenAiModule],\n  controllers: [IssueSummaryController],\n  providers: [IssueSummaryService],\n  exports: [IssueSummaryService],\n})\nexport class IssueSummaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssueSummaryService.html":{"url":"injectables/IssueSummaryService.html","title":"injectable - IssueSummaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssueSummaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issues/issue-summary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateIssueSummary\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/issues/issue-summary.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateIssueSummary\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateIssueSummary(options: CreateIssueSummaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateIssueSummaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/issues/issue-summary.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { CreateIssueSummaryDto } from \"./dtos/create-issue-summary.dto\";\n\n@Injectable()\nexport class IssueSummaryService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt issue summary for an issue taken from github issues with the specifications mentioned below`,\n      `The summary should be written in past tense and ${tone} tone`,\n      `Summary language: ${language}`,\n      `Summary must be a maximum of ${maxLength} characters.`,\n      \"If the issue or its comments include a solution, include it in the summary.\",\n      \"Exclude anything unnecessary such as translation. Your entire response will be used to summarize and analyze the issue.\",\n    ].join(\"\\n\");\n  }\n\n  async generateIssueSummary(options: CreateIssueSummaryDto) {\n    const content = `Issue Title: ${options.issueTitle}\\nIssue Description: ${options.issueDescription}\\nIssue Comments: ${options.issueComments}`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.summaryLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor(\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenAiModule.html":{"url":"modules/OpenAiModule.html","title":"module - OpenAiModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenAiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\n\nOpenAiService \n\nOpenAiService \n\n\n\nOpenAiModule\n\nOpenAiModule\n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/open-ai/open-ai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiService } from \"./open-ai.service\";\n\n@Module({\n  providers: [OpenAiService],\n  exports: [OpenAiService],\n})\nexport class OpenAiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenAiService.html":{"url":"injectables/OpenAiService.html","title":"injectable - OpenAiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenAiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/open-ai/open-ai.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateCompletion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCompletion(systemMessage: string, userMessage: string, temperature: number)\n                \n            \n\n\n            \n                \n                    Defined in src/open-ai/open-ai.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    systemMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    temperature\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { PageMetaDto } from \"./page-meta.dto\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n    type: \"integer\",\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n    type: \"integer\",\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:59\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  @ApiPropertyOptional({\n    description: \"Number of days in the past to start range block\",\n    default: 0,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsIn([0, 7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly prev_days_start_date?: number = 0;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PagerService.html":{"url":"injectables/PagerService.html","title":"injectable - PagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyPagination\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyPagination(undefined: PaginationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/pager.service.ts:16\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        Entity\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PaginationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationInput.html":{"url":"interfaces/PaginationInput.html","title":"interface - PaginationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                                \n                                        \n                                            queryBuilder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryBuilder:     SelectQueryBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SelectQueryBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PizzaOvenController.html":{"url":"controllers/PizzaOvenController.html","title":"controller - PizzaOvenController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PizzaOvenController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bake\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                findCommitAuthorById\n                            \n                            \n                                    Async\n                                findCommitById\n                            \n                            \n                                    Async\n                                listAllBakedRepos\n                            \n                            \n                                    Async\n                                listAllCommitAuthors\n                            \n                            \n                                    Async\n                                listAllCommitsByBakedRepoId\n                            \n                            \n                                    Async\n                                listAllCommitsByCommitAuthorId\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('repos/:id')@ApiOperation({operationId: 'findBakedRepoById', summary: 'Finds a baked repo by :id'})@ApiOkResponse({type: DbBakedRepo})@ApiNotFoundResponse({description: 'Baked repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitAuthorById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitAuthorById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commit-authors/:id')@ApiOperation({operationId: 'findCommitAuthorById', summary: 'Finds a commit author by :id'})@ApiOkResponse({type: DbCommitAuthors})@ApiNotFoundResponse({description: 'Commit author not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCommitById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCommitById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('commits/:id')@ApiOperation({operationId: 'findCommitById', summary: 'Finds a commit by :id'})@ApiOkResponse({type: DbCommits})@ApiNotFoundResponse({description: 'Commit not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'listAllBakedRepos', summary: 'Finds all baked repos and paginates them'})@ApiPaginatedResponse(DbBakedRepo)@ApiOkResponse({type: DbBakedRepo})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitAuthors(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commit-authors/list')@ApiOperation({operationId: 'listAllCommitAuthors', summary: 'Finds all commit authors and paginates them'})@ApiPaginatedResponse(DbCommitAuthors)@ApiOkResponse({type: DbCommitAuthors})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByBakedRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByBakedRepoId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/repo/:id')@ApiOperation({operationId: 'listAllCommitsByBakedRepoId', summary: 'Finds all commits by baked repo :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllCommitsByCommitAuthorId\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllCommitsByCommitAuthorId(pageOptionsDto: PageOptionsDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/commits/list/commit-author/:id')@ApiOperation({operationId: 'listAllCommitsByCommitAuthorId', summary: 'Finds all commits by commit author :id and paginates them'})@ApiPaginatedResponse(DbCommits)@ApiOkResponse({type: DbCommits})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeOptionsInfo: BakeRepoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'Bake a repository with the pizza oven microservice', summary: 'postToPizzaOvenService'})@ApiAcceptedResponse()@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: BakeRepoDto})\n                \n            \n\n            \n                \n                    Defined in src/pizza/pizza-oven.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeOptionsInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, Param, ParseIntPipe, Post, Query } from \"@nestjs/common\";\nimport {\n  ApiAcceptedResponse,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\nimport { DbCommits } from \"./entities/commits.entity\";\n\n@Controller(\"bake\")\n@ApiTags(\"Pizza oven service\")\nexport class PizzaOvenController {\n  constructor(\n    private readonly pizzaOvenService: PizzaOvenService,\n    private readonly commitAuthorService: CommitAuthorsService,\n    private readonly commitsService: CommitsService\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"Bake a repository with the pizza oven microservice\",\n    summary: \"postToPizzaOvenService\",\n  })\n  @ApiAcceptedResponse()\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: BakeRepoDto })\n  async postToPizzaOvenService(@Body() bakeOptionsInfo: BakeRepoDto) {\n    const statusCode = await this.pizzaOvenService.postToPizzaOvenService(bakeOptionsInfo);\n\n    if (statusCode !== 202) {\n      throw new BadRequestException();\n    }\n  }\n\n  @Get(\"repos/:id\")\n  @ApiOperation({\n    operationId: \"findBakedRepoById\",\n    summary: \"Finds a baked repo by :id\",\n  })\n  @ApiOkResponse({ type: DbBakedRepo })\n  @ApiNotFoundResponse({ description: \"Baked repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findBakedRepoById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pizzaOvenService.findBakedRepoById(id);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"listAllBakedRepos\",\n    summary: \"Finds all baked repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbBakedRepo)\n  @ApiOkResponse({ type: DbBakedRepo })\n  async listAllBakedRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pizzaOvenService.findAllBakedRepos(pageOptionsDto);\n  }\n\n  @Get(\"commit-authors/:id\")\n  @ApiOperation({\n    operationId: \"findCommitAuthorById\",\n    summary: \"Finds a commit author by :id\",\n  })\n  @ApiOkResponse({ type: DbCommitAuthors })\n  @ApiNotFoundResponse({ description: \"Commit author not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitAuthorById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitAuthorService.findCommitAuthorById(id);\n  }\n\n  @Get(\"/commit-authors/list\")\n  @ApiOperation({\n    operationId: \"listAllCommitAuthors\",\n    summary: \"Finds all commit authors and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommitAuthors)\n  @ApiOkResponse({ type: DbCommitAuthors })\n  async listAllCommitAuthors(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.commitAuthorService.findAllCommitAuthors(pageOptionsDto);\n  }\n\n  @Get(\"commits/:id\")\n  @ApiOperation({\n    operationId: \"findCommitById\",\n    summary: \"Finds a commit by :id\",\n  })\n  @ApiOkResponse({ type: DbCommits })\n  @ApiNotFoundResponse({ description: \"Commit not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findCommitById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.commitsService.findCommitById(id);\n  }\n\n  @Get(\"/commits/list/repo/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByBakedRepoId\",\n    summary: \"Finds all commits by baked repo :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByBakedRepoId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByBakedRepoId(pageOptionsDto, id);\n  }\n\n  @Get(\"/commits/list/commit-author/:id\")\n  @ApiOperation({\n    operationId: \"listAllCommitsByCommitAuthorId\",\n    summary: \"Finds all commits by commit author :id and paginates them\",\n  })\n  @ApiPaginatedResponse(DbCommits)\n  @ApiOkResponse({ type: DbCommits })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async listAllCommitsByCommitAuthorId(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\", ParseIntPipe) id: number\n  ): Promise> {\n    return this.commitsService.findAllCommitsByCommitAuthorId(pageOptionsDto, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PizzaOvenModule.html":{"url":"modules/PizzaOvenModule.html","title":"module - PizzaOvenModule","body":"\n                   \n\n\n\n\n    Modules\n    PizzaOvenModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PizzaOvenModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pizza/pizza-oven.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PizzaOvenController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommitAuthorsService\n                        \n                        \n                            CommitsService\n                        \n                        \n                            PizzaOvenService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { HttpModule } from \"@nestjs/axios\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { PizzaOvenService } from \"./pizza-oven.service\";\nimport { PizzaOvenController } from \"./pizza-oven.controller\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\nimport { DbCommitAuthors } from \"./entities/commit_authors.entity\";\nimport { DbCommits } from \"./entities/commits.entity\";\nimport { CommitAuthorsService } from \"./commit-authors.service\";\nimport { CommitsService } from \"./commits.service\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    HttpModule,\n    TypeOrmModule.forFeature([DbBakedRepo, DbCommitAuthors, DbCommits], \"ApiConnection\"),\n  ],\n  controllers: [PizzaOvenController],\n  providers: [PizzaOvenService, CommitAuthorsService, CommitsService],\n  exports: [PizzaOvenService, CommitAuthorsService, CommitsService],\n})\nexport class PizzaOvenModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PizzaOvenService.html":{"url":"injectables/PizzaOvenService.html","title":"injectable - PizzaOvenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PizzaOvenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pizza/pizza-oven.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllBakedRepos\n                            \n                            \n                                    Async\n                                findBakedRepoById\n                            \n                            \n                                    Async\n                                postToPizzaOvenService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bakedRepoRepository: Repository, httpService: HttpService, configService: ConfigService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/pizza/pizza-oven.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bakedRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllBakedRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllBakedRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBakedRepoById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBakedRepoById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postToPizzaOvenService\n                        \n                    \n                \n            \n            \n                \n                    \n                    postToPizzaOvenService(bakeRepoInfo: BakeRepoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pizza/pizza-oven.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bakeRepoInfo\n                                    \n                                                BakeRepoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { lastValueFrom, map } from \"rxjs\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { Repository } from \"typeorm\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { BakeRepoDto } from \"./dtos/baked-repo.dto\";\nimport { DbBakedRepo } from \"./entities/baked-repo.entity\";\n\n@Injectable()\nexport class PizzaOvenService {\n  constructor(\n    @InjectRepository(DbBakedRepo, \"ApiConnection\")\n    private bakedRepoRepository: Repository,\n    private readonly httpService: HttpService,\n    private configService: ConfigService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.bakedRepoRepository.createQueryBuilder(\"baked_repos\");\n\n    return builder;\n  }\n\n  async postToPizzaOvenService(bakeRepoInfo: BakeRepoDto): Promise {\n    const data = {\n      url: bakeRepoInfo.url,\n      wait: bakeRepoInfo.wait,\n    };\n\n    const host: string = this.configService.get(\"pizza.host\")!;\n    const port: string = this.configService.get(\"pizza.port\")!;\n\n    return lastValueFrom(this.httpService.post(`${host}:${port}/bake`, data).pipe(map((resp) => resp.status)));\n  }\n\n  async findBakedRepoById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAllBakedRepos(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorInsightsDto.html":{"url":"classes/PullRequestContributorInsightsDto.html","title":"class - PullRequestContributorInsightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorInsightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-insights.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional, IsString, Max, Min } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class PullRequestContributorInsightsDto extends PageOptionsDto {\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  limit?: number = 50;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorOptionsDto.html":{"url":"classes/PullRequestContributorOptionsDto.html","title":"class - PullRequestContributorOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport class PullRequestContributorOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                getPullRequestReviews\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestReviews\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestReviews(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reviews')@ApiOperation({operationId: 'getPullRequestReviews', summary: 'Find all pull request reviews by pull request ID'})@ApiOkResponse({type: undefined})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiParam } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor(\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n    private readonly pullRequestReviewService: PullRequestReviewService\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests(@Query() pageOptionsDto: PullRequestPageOptionsDto): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights(@Query() pageOptionsDto: FilterOptionsDto): Promise {\n    return Promise.all(\n      [30, 60].map(async (interval) => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto))\n    );\n  }\n\n  @Get(\"/:id/reviews\")\n  @ApiOperation({\n    operationId: \"getPullRequestReviews\",\n    summary: \"Find all pull request reviews by pull request ID\",\n  })\n  @ApiOkResponse({ type: [DbPullRequestReview] })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getPullRequestReviews(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.pullRequestReviewService.findAllReviewsByPrId(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor(private pullRequestDescriptionService: PullRequestDescriptionService) {}\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription(@Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw new BadRequestException();\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${\n      options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"\n    }`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrCountFilterBuilderStart\n                            \n                            \n                                hacktoberfestPrDateCharBuilder\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderEnd(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrCountFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrCountFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrDateCharBuilder\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrDateCharBuilder(interval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor(\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  hacktoberfestPrCountFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this ensures inclusive date range blocks for years in the past.\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day' >= \"pr\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrCountFilterBuilderEnd(interval = 0) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October minus the range.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n            + INTERVAL '10 months'\n            - INTERVAL '1 day'\n            - INTERVAL '${interval} days' (\n    qb: SelectQueryBuilder,\n    type = \"all\",\n    interval = 0,\n    options: FilterOptionsDto\n  ) {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, startDate, interval);\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrCountFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrCountFilterBuilderEnd(interval), {}]);\n        break;\n\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pr\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${interval} days'  {\n    const startDate = GetPrevDateISOString(options.prev_days_start_date);\n    let queryBuilder: SelectQueryBuilder;\n\n    switch (options.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.baseQueryBuilder()\n          .select(this.hacktoberfestPrDateCharBuilder(interval), \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n\n      default:\n        queryBuilder = this.baseQueryBuilder()\n          .select(`TO_CHAR('${startDate}'::TIMESTAMP - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n          .addSelect(`${interval}::INTEGER`, \"interval\");\n        break;\n    }\n\n    queryBuilder.limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach((type) => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_PullRequestModule_imports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeExplanationService\n                        \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            CodeTestSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                        \n                            CodeTestSuggestionController\n                        \n                        \n                            CodeExplanationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestReviewService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\nimport { CodeTestSuggestionController } from \"./code-test.suggestion.controller\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\nimport { CodeExplanationController } from \"./code-explanation.controller\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\nimport { PullRequestReviewService } from \"./pull-request-review.service\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbPullRequest, DbPRInsight, DbPullRequestReview], \"ApiConnection\"),\n    RepoFilterModule,\n    OpenAiModule,\n  ],\n  controllers: [\n    PullRequestController,\n    PullRequestDescriptionController,\n    CodeRefactorSuggestionController,\n    CodeTestSuggestionController,\n    CodeExplanationController,\n  ],\n  providers: [\n    PullRequestService,\n    PullRequestInsightsService,\n    PullRequestDescriptionService,\n    CodeRefactorSuggestionService,\n    CodeTestSuggestionService,\n    CodeExplanationService,\n    PullRequestReviewService,\n  ],\n  exports: [PullRequestService, PullRequestReviewService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                listId\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        listId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'uuid-v4'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\",\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"uuid-v4\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly listId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestReviewService.html":{"url":"injectables/PullRequestReviewService.html","title":"injectable - PullRequestReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-review.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllReviewsByPrId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestReviewRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-review.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestReviewRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReviewsByPrId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReviewsByPrId(PrId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-review.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    PrId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbPullRequestReview } from \"./entities/pull-request-review.entity\";\n\n@Injectable()\nexport class PullRequestReviewService {\n  constructor(\n    @InjectRepository(DbPullRequestReview, \"ApiConnection\")\n    private pullRequestReviewRepository: Repository\n  ) {}\n\n  async findAllReviewsByPrId(PrId: number): Promise {\n    return this.pullRequestReviewRepository.find({\n      where: { pullRequest: { id: PrId } },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllChurnContributors\n                            \n                            \n                                    Async\n                                findAllContributorsWithFilters\n                            \n                            \n                                    Async\n                                findAllRecentContributors\n                            \n                            \n                                    Async\n                                findAllRepeatContributors\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findNewContributorsInTimeRange\n                            \n                            \n                                    Private\n                                getContributorRangeQueryBuilder\n                            \n                            \n                                hacktoberfestPrFilterBuilderEnd\n                            \n                            \n                                hacktoberfestPrFilterBuilderStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllChurnContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllChurnContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:272\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllContributorsWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllContributorsWithFilters(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRepeatContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRepeatContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:310\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findNewContributorsInTimeRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    findNewContributorsInTimeRange(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getContributorRangeQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorRangeQueryBuilder(start_date: string, start_range: number, end_range: number, repoIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:348\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start_date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end_range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderEnd\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderEnd(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hacktoberfestPrFilterBuilderStart\n                        \n                    \n                \n            \n            \n                \nhacktoberfestPrFilterBuilderStart()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { DbPullRequestContributor } from \"./dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"./dtos/pull-request-contributor-options.dto\";\nimport { PullRequestContributorInsightsDto } from \"./dtos/pull-request-contributor-insights.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor(\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  hacktoberfestPrFilterBuilderStart() {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * this is inclusive of previous years where the current pull_requests have \"newer\" updates\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests\".\"updated_at\"`;\n  }\n\n  hacktoberfestPrFilterBuilderEnd(range = 30) {\n    const hacktoberfestYear: string = this.configService.get(\"hacktoberfest.year\")!;\n\n    /*\n     * take the date range starting from the last day of October.\n     * so Oct 31st minus 30 days would be the full hacktoberfest month date range\n     */\n    return `to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() })\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' > {\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .from(DbPullRequest, \"pull_requests\")\n      .distinct()\n      .select(\"pull_requests.author_login\", \"author_login\")\n      .addSelect(\"MAX(pull_requests.updated_at)\", \"updated_at\")\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addGroupBy(\"author_login\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        filters.push([this.hacktoberfestPrFilterBuilderStart(), {}]);\n        filters.push([this.hacktoberfestPrFilterBuilderEnd(range), {}]);\n        break;\n      default:\n        filters.push([`'${startDate}'::TIMESTAMP >= \"pull_requests\".\"updated_at\"`, {}]);\n        filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findNewContributorsInTimeRange(\n    pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const currentMonthQuery = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n\n    queryBuilder\n      .select(\"current_month.author_login\")\n      .distinct()\n      .from(`(${currentMonthQuery.getQuery()})`, \"current_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.getContributorRangeQueryBuilder(startDate, 0, range, repoIds);\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n    const itemCount = entities.length;\n\n    const pageMetaDto = new PageMetaDto({\n      itemCount,\n      pageOptionsDto: { ...pageOptionsDto, limit: itemCount, skip: 0 },\n    });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllChurnContributors(\n    pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at > {\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(startDate, range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= '${startDate}'::TIMESTAMP - INTERVAL '${range} days'`)\n            .andWhere(`pull_requests.updated_at = '${start_date}'::TIMESTAMP - INTERVAL '${end_range} days'`)\n      .andWhere(`pull_requests.updated_at \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ContributionService } from \"./contribution.service\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor(private readonly repoService: RepoService, private readonly contributionService: ContributionService) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllByRepoId(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor(private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findOneById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo(@Param(\"owner\") owner: string, @Param(\"repo\") repo: string): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll(@Query() pageOptionsDto: RepoPageOptionsDto): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters(@Query() pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:86\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters(options: FilterOptionsDto, startDate = \"NOW()\", range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=:repo`, { repo: decodeURIComponent(options.repo.toLowerCase()) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `,\n        {},\n      ]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND '${startDate}'::TIMESTAMP >= \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: 'integer', example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: \"integer\",\n    example: 234343,\n  })\n  @IsNumber()\n  id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_providers\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findOrgsRecommendations\n                            \n                            \n                                    Async\n                                findRecommendations\n                            \n                            \n                                    Private\n                                hacktoberfestfilterquerybuilder\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"NOW()\"\n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOrgsRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:448\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecommendations(interests: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:418\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    interests\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hacktoberfestfilterquerybuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    hacktoberfestfilterquerybuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { ConfigService } from \"@nestjs/config\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor(\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n    private configService: ConfigService\n  ) {}\n\n  subQueryCount(\n    subQuery: SelectQueryBuilder,\n    entity: string,\n    alias: string,\n    target = \"repo\"\n  ) {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder() {\n    const builder = this.repoRepository\n      .createQueryBuilder(\"repo\")\n\n      /*\n       * .select(['repo.id'])\n       * .leftJoinAndSelect(\"repo.user\", \"user\")\n       * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n       * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n       */\n\n      .addSelect((qb) => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder(startDate = \"NOW()\", range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND '${startDate}'::TIMESTAMP >= \"open_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND '${startDate}'::TIMESTAMP >= \"pull_requests_velocity\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"open_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"closed_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"merged_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"draft_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"spam_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day' >= \"pull_requests_velocity\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days' = \"active_pull_requests\".\"updated_at\"\n            AND to_date('${hacktoberfestYear}', 'YYYY')\n                + INTERVAL '10 months'\n                - INTERVAL '1 day'\n                - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo(owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[]\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map((relation) =>\n        queryBuilder.innerJoin(\n          `repo.repoToUser${relation}`,\n          `authUser${relation}`,\n          `authUser${relation}.user_id = :userId`,\n          { userId }\n        )\n      );\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    let queryBuilder;\n\n    switch (pageOptionsDto.topic) {\n      case \"hacktoberfest\":\n        queryBuilder = this.hacktoberfestfilterquerybuilder(range);\n        break;\n      default:\n        queryBuilder = this.baseFilterQueryBuilder(startDate, range);\n        break;\n    }\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, startDate, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`, { range }]);\n      filters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' = \"repos\".\"updated_at\"`, { range }]);\n      countFilters.push([`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findRecommendations(interests: string[]): Promise> {\n    const queryBuilder = this.repoRepository.createQueryBuilder(\"repo\");\n    const userInterests: Record = {};\n\n    const promises = interests.map(async (interest) => {\n      queryBuilder\n        .where(`(:topic = ANY(\"repo\".\"topics\"))`, { topic: interest })\n        .andWhere(\n          `\n          repo.id IN (\n            SELECT repo_id FROM pull_requests\n            WHERE now() - INTERVAL '30 days'  {\n      userInterests[interest] = results[index];\n    });\n\n    return userInterests;\n  }\n\n  async findOrgsRecommendations(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseFilterQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .leftJoin(\n        (qb: SelectQueryBuilder) =>\n          qb\n            .select(\"users.id\", \"id\")\n            .addSelect(\"users.login\", \"login\")\n            .addSelect(\"user_orgs.user_id\", \"user_id\")\n            .from(\"user_organizations\", \"user_orgs\")\n            .innerJoin(\"users\", \"users\", \"user_orgs.organization_id = users.id\"),\n        \"user_orgs\",\n        \"repos.full_name LIKE user_orgs.login || '/%'\"\n      )\n      .where(\"user_orgs.user_id = :userId\", { userId })\n      .andWhere(`'${startDate}'::TIMESTAMP >= \"repos\".\"updated_at\"`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StarService } from \"./star.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor(private readonly repoService: RepoService, private readonly starService: StarService) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async starOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStarOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { StargazeService } from \"./stargaze.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor(private readonly repoService: RepoService, private readonly stargazeService: StargazeService) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async stargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downStargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SubmitService } from \"./submit.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor(private readonly repoService: RepoService, private readonly submitService: SubmitService) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async submitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downSubmitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:repoId/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findOneByRepoId', summary: 'Finds a repo by :repoId and returns if authenticated user has voted for it'})@ApiOkResponse({type: VotedRepoDto, description: 'Returns if authenticated user has voted for it'})@ApiParam({name: 'repoId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { VotedRepoDto } from \"./../user-repo/dtos/user-repos.dto\";\nimport { VoteService } from \"./vote.service\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor(private readonly repoService: RepoService, private readonly voteService: VoteService) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Get(\"/:repoId/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findOneByRepoId\",\n    summary: \"Finds a repo by :repoId and returns if authenticated user has voted for it\",\n  })\n  @ApiOkResponse({\n    type: VotedRepoDto,\n    description: \"Returns if authenticated user has voted for it\",\n  })\n  @ApiParam({ name: \"repoId\", type: \"integer\" })\n  async findOneByRepoId(@Param(\"repoId\", ParseIntPipe) repoId: number, @UserId() userId: number) {\n    return this.voteService.findOneByRepoId(repoId, userId);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async voteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async downVoteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStars], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor(\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\").withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_imports\n\n\n\ncluster_StargazeModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStargazers], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor(\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\").withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor(private configService: ConfigService) {}\n\n  get stripe() {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer(id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession(customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      allow_promotion_codes: true,\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\")],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor(\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription(subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\n\n@Module({\n  imports: [StripeSubscriptionModule, CustomerModule, StripeModule, UserModule],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/services/user.service\";\nimport { toDateTime } from \"./utils\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor(\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService\n  ) {}\n\n  private async manageSubscriptionStatusChange(subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw new BadRequestException();\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, {\n      expand: [\"default_payment_method\"],\n    });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(\n        `Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`\n      );\n      throw new BadRequestException();\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook(@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw new BadRequestException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserSubmissions], \"ApiConnection\"), RepoModule],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor(\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\").withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                coupon_code\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        coupon_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Coupon Code', example: 'saucy'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5, type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n    type: \"integer\",\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  readonly discord_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n    type: \"integer\",\n  })\n  readonly notification_count?: number;\n\n  @ApiPropertyOptional({\n    description: \"Coupon Code\",\n    example: \"saucy\",\n  })\n  readonly coupon_code?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(SupabaseAuthStrategy, \"supabase\") {\n  public constructor() {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate(req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopUsersDto.html":{"url":"classes/TopUsersDto.html","title":"class - TopUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/top-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID to filter followings from the list', type: 'integer'})@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/top-users.dto.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max } from \"class-validator\";\n\nexport class TopUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    description: \"User ID to filter followings from the list\",\n    type: \"integer\",\n  })\n  @IsOptional()\n  @Type(() => Number)\n  readonly userId?: number = 0;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n    type: \"integer\",\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n  access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {\n    message:\n      \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\",\n  })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly discord_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'The requested user is not accepting collaboration requests'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n} from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { User, UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserService } from \"./services/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor(\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"The requested user is not accepting collaboration requests\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration(\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n    @User() user: SupabaseAuthUser\n  ): Promise {\n    const recipient = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n    const requester = await this.userService.findOneById(user.user_metadata.sub as number);\n\n    if (requester.role  {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById(@Param(\"id\") id: string, @UserId() userId: number): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor(\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration(userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration(id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration(id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations(\n    pageOptionsDto: PageOptionsDto,\n    userId: number\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                            \n                                    Async\n                                getTopUsers\n                            \n                            \n                                    Async\n                                getUsersByFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'getTop10Highlights', summary: 'List top users'})@ApiOkResponse({type: DbTopUser})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByFilter(pageOptionsDto: FilteredUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'getUsersByFilter', summary: 'Search users'})@ApiOkResponse({type: DbFilteredUser})@ApiBadRequestResponse({description: 'Username is required'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilteredUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiBadRequestResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { DbTopUser } from \"./entities/top-users.entity\";\nimport { TopUsersDto } from \"./dtos/top-users.dto\";\nimport { DbFilteredUser } from \"./entities/filtered-users.entity\";\nimport { FilteredUsersDto } from \"./dtos/filtered-users.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById(@Param(\"username\") username: string): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"getTop10Highlights\",\n    summary: \"List top users\",\n  })\n  @ApiOkResponse({ type: DbTopUser })\n  async getTopUsers(@Query() pageOptionsDto: TopUsersDto): Promise> {\n    return this.userService.findTopUsers(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"getUsersByFilter\",\n    summary: \"Search users\",\n  })\n  @ApiOkResponse({ type: DbFilteredUser })\n  @ApiBadRequestResponse({ description: \"Username is required\" })\n  async getUsersByFilter(@Query() pageOptionsDto: FilteredUsersDto): Promise> {\n    return this.userService.findUsersByFilter(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor(private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllFollowers\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFollowers(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor(\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\").withDeleted();\n\n    return builder;\n  }\n\n  async findAllFollowers(userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_follows.user_id=users.id\")\n      .where(\"user_follows.following_user_id = :userId\", { userId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n\n    return entities;\n  }\n\n  async findUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId(userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(\"You have already followed this user\");\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./services/user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n  OmitType,\n  ApiParam,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserHighlight, [\"id\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser(\n    @Body() createHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getUserHighlight(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateHighlightForUser(\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, {\n      title: updateHighlightDto.title,\n      highlight: updateHighlightDto.highlight,\n      url: updateHighlightDto.url,\n      type: updateHighlightDto.type,\n      shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at,\n      tagged_repos: updateHighlightDto.taggedRepos,\n    });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async getAllHighlightUserReactions(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addHighlightReactionForUser(\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string,\n    @UserId() userId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async deleteHighlightReactionForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(\n      highlightId,\n      userId,\n      emojiId\n    );\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFeatured\n                            \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                findTop\n                            \n                            \n                                    Async\n                                removeFeatured\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService, userService: UserService, userFollowService: UserFollowService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userFollowService\n                                                  \n                                                        \n                                                                        UserFollowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTop\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTop(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { GetPrevDateISOString } from \"../common/util/datetimes\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./services/user.service\";\nimport { UserFollowService } from \"./user-follow.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor(\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n    private userService: UserService,\n    private userFollowService: UserFollowService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([\n        `user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`,\n        { userId: followerUserId },\n      ]);\n    }\n\n    if (pageOptionsDto.repo) {\n      filters.push([\n        // eslint-disable-next-line no-useless-escape\n        `REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`,\n        { repo: decodeURIComponent(pageOptionsDto.repo) },\n      ]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`user_highlights.featured = true`).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findTop(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const startDate = GetPrevDateISOString(pageOptionsDto.prev_days_start_date);\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .addSelect(\n        `\n        (SELECT COUNT(id) FROM user_highlight_reactions\n        WHERE highlight_id=user_highlights.id\n        AND deleted_at IS NULL)\n      `,\n        \"reactions\"\n      )\n      .where(`'${startDate}'::TIMESTAMP >= user_highlights.created_at`)\n      .andWhere(`'${startDate}'::TIMESTAMP - INTERVAL '${range} days' ({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addFeatured(highlightId: number, userId: number): Promise {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role  {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_highlights.user_id = :userId\", { userId }).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserHighlight(userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : new Date(),\n      type: highlight.type,\n      tagged_repos: highlight.taggedRepos,\n    });\n\n    const newHighlight = await this.userHighlightRepository.save(newUserHighlight);\n\n    const followers = await this.userFollowService.findAllFollowers(userId);\n\n    const notifications = followers.map(async (follower) =>\n      this.userNotificationService.addUserHighlightNotification(newHighlight.id, userId, follower.user_id)\n    );\n\n    await Promise.all(notifications);\n\n    return newHighlight;\n  }\n\n  async updateUserHighlight(highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight(highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions(highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .addSelect(\"ARRAY_AGG(users.login)\", \"reaction_users\")\n      .innerJoin(\"users\", \"users\", \"user_highlight_reactions.user_id=users.id\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .addGroupBy(\"emoji_id\");\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder.addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReactionResponse[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository\n      .createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightReactionNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction(id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserService } from \"../user/services/user.service\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\n      \"admin\",\n      \"edit\",\n      \"view\",\n    ]);\n\n    if (!canAccess) {\n      throw new UnauthorizedException();\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async addInsightMember(\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(\n      userId,\n      insight.id,\n      [\"admin\", \"edit\", \"view\"],\n      false\n    );\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightMember(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number,\n    @Body() updateInsightMemberDto: UpdateInsightMemberDto\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new UnauthorizedException();\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async removeInsightMemberById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})@ApiParam({name: 'id', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @UserId() userId: string\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser(@Body() createInsightDto: CreateInsightDto, @UserId() userId: number): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw new BadRequestException();\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async (repo) => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  @ApiParam({ name: \"id\", type: \"integer\" })\n  async updateInsightForUser(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Body() updateInsightDto: UpdateInsightDto,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter((insightRepo) => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(\n        (repo) => !updateInsightDto.repos.find((repoInfo) => `${repoInfo.id}` === `${repo.repo_id}`)\n      );\n\n      const reposToRemoveRequests = reposToRemove.map(async (insightRepo) =>\n        this.insightsRepoService.removeInsightRepo(insightRepo.id)\n      );\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map((cr) => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(\n        (repoInfo) => !currentRepoIds.find((id) => `${id}` === `${repoInfo.id}`)\n      );\n\n      const repoToAddRequests = reposToAdd.map(async (repo) =>\n        this.insightsRepoService.addInsightRepo(insight.id, repo)\n      );\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new UnprocessableEntityException();\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListController.html":{"url":"controllers/UserListController.html","title":"controller - UserListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addListForUser\n                            \n                            \n                                    Async\n                                deleteListForUser\n                            \n                            \n                                    Async\n                                deleteUserListContributors\n                            \n                            \n                                    Async\n                                getContributors\n                            \n                            \n                                    Async\n                                getListsForUser\n                            \n                            \n                                    Async\n                                getTimezones\n                            \n                            \n                                    Async\n                                getUserList\n                            \n                            \n                                    Async\n                                getUserListContributors\n                            \n                            \n                                    Async\n                                postUserListContributors\n                            \n                            \n                                    Async\n                                updateListForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addListForUser(createUserListDto: CreateUserListDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addListForUser', summary: 'Adds a new list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to add user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteListForUser(userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteListForUser', summary: 'Deletes the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributors(id: string, userListContributorId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/contributors/:userListContributorId')@ApiOperation({operationId: 'deleteUserListContributor', summary: 'Delete contributor from an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user from user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})@ApiParam({name: 'userListContributorId', type: 'integer'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributors(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/contributors')@ApiOperation({operationId: 'getContributors', summary: 'Retrieves paginated contributors'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUser)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to get contributors'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListsForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListsForUser(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getListsForUser', summary: 'Gets lists for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user lists'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimezones()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/timezones')@ApiOperation({operationId: 'getTimezones', summary: 'Retrieves all users timezones'})@ApiOkResponse({type: DbTimezone})@ApiNotFoundResponse({description: 'Unable to get timezones'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserList(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserList', summary: 'Retrieves an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to get user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserListContributors(pageOptionsDto: PageOptionsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributors')@ApiOperation({operationId: 'getUserListContributors', summary: 'Retrieves contributors for an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserListContributor)@ApiOkResponse({type: DbUserListContributor})@ApiNotFoundResponse({description: 'Unable to get user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postUserListContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    postUserListContributors(updateCollaboratorsDto: CollaboratorsDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/contributors')@ApiOperation({operationId: 'postUserListContributors', summary: 'Add new contributors to an individual user list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to add to user list contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateCollaboratorsDto\n                                    \n                                                CollaboratorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateListForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateListForUser(updateListDto: CreateUserListDto, userId: number, listId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateListForUser', summary: 'Updates the list for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserList})@ApiNotFoundResponse({description: 'Unable to update user list'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserListDto})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateListDto\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { DbUser } from \"../user/user.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { CollaboratorsDto } from \"./dtos/collaborators.dto\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListController {\n  constructor(private readonly userListService: UserListService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getListsForUser\",\n    summary: \"Gets lists for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user lists\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getListsForUser(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userListService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addListForUser\",\n    summary: \"Adds a new list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to add user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  async addListForUser(@Body() createUserListDto: CreateUserListDto, @UserId() userId: number): Promise {\n    const newList = await this.userListService.addUserList(userId, createUserListDto);\n\n    const listContributors = createUserListDto.contributors.map(async (contributor) =>\n      this.userListService.addUserListContributor(newList.id, contributor.id, contributor.login)\n    );\n\n    await Promise.allSettled(listContributors);\n\n    return newList;\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserList\",\n    summary: \"Retrieves an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to get user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserList(@Param(\"id\") id: string, @UserId() userId: number): Promise {\n    return this.userListService.findPublicOneById(id, userId);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateListForUser\",\n    summary: \"Updates the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserList })\n  @ApiNotFoundResponse({ description: \"Unable to update user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserListDto })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async updateListForUser(\n    @Body() updateListDto: CreateUserListDto,\n    @UserId() userId: number,\n    @Param(\"id\") listId: string\n  ): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.updateUserList(list.id, {\n      name: updateListDto.name,\n      is_public: updateListDto.is_public,\n    });\n\n    return this.userListService.findOneById(list.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteListForUser\",\n    summary: \"Deletes the list for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user list\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async deleteListForUser(@UserId() userId: number, @Param(\"id\") listId: string): Promise {\n    const list = await this.userListService.findOneById(listId, userId);\n\n    await this.userListService.deleteUserList(list.id);\n  }\n\n  @Get(\"/contributors\")\n  @ApiOperation({\n    operationId: \"getContributors\",\n    summary: \"Retrieves paginated contributors\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUser)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to get contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getContributors(@Query() pageOptionsDto: FilterListContributorsDto): Promise> {\n    return this.userListService.findContributorsByFilter(pageOptionsDto);\n  }\n\n  @Get(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"getUserListContributors\",\n    summary: \"Retrieves contributors for an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserListContributor)\n  @ApiOkResponse({ type: DbUserListContributor })\n  @ApiNotFoundResponse({ description: \"Unable to get user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getUserListContributors(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Param(\"id\") id: string\n  ): Promise> {\n    return this.userListService.findContributorsByListId(pageOptionsDto, id);\n  }\n\n  @Post(\"/:id/contributors\")\n  @ApiOperation({\n    operationId: \"postUserListContributors\",\n    summary: \"Add new contributors to an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to add to user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async postUserListContributors(\n    @Body() updateCollaboratorsDto: CollaboratorsDto,\n    @Param(\"id\") id: string\n  ): Promise {\n    const contributors = updateCollaboratorsDto.contributors.map(async (contributorId) =>\n      this.userListService.addUserListContributor(id, contributorId)\n    );\n\n    return Promise.all(contributors);\n  }\n\n  @Delete(\"/:id/contributors/:userListContributorId\")\n  @ApiOperation({\n    operationId: \"deleteUserListContributor\",\n    summary: \"Delete contributor from an individual user list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user from user list contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  @ApiParam({ name: \"userListContributorId\", type: \"integer\" })\n  async deleteUserListContributors(\n    @Param(\"id\") id: string,\n    @Param(\"userListContributorId\") userListContributorId: string\n  ): Promise {\n    await this.userListService.deleteUserListContributor(id, userListContributorId);\n  }\n\n  @Get(\"/timezones\")\n  @ApiOperation({\n    operationId: \"getTimezones\",\n    summary: \"Retrieves all users timezones\",\n  })\n  @ApiOkResponse({ type: DbTimezone })\n  @ApiNotFoundResponse({ description: \"Unable to get timezones\" })\n  async getTimezones(): Promise {\n    return this.userListService.getAllTimezones();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserListModule.html":{"url":"modules/UserListModule.html","title":"module - UserListModule","body":"\n                   \n\n\n\n\n    Modules\n    UserListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_imports\n\n\n\ncluster_UserListModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-lists/user-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserListController\n                        \n                        \n                            UserListStatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserListService\n                        \n                        \n                            UserListStatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUser } from \"../user/user.entity\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { UserListService } from \"./user-list.service\";\nimport { UserListController } from \"./user-list.controller\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { UserListStatsController } from \"./user-list-stats.controller\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\n\n@Module({\n  imports: [\n    ApiServicesModule,\n    UserModule,\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserList,\n        DbPullRequest,\n        DbUserListContributor,\n        DbUserListContributorStat,\n        DbContributionStatTimeframe,\n        DbContributorCategoryTimeframe,\n      ],\n      \"ApiConnection\"\n    ),\n  ],\n  controllers: [UserListController, UserListStatsController],\n  providers: [UserListService, UserListStatsService],\n  exports: [UserListService, UserListStatsService],\n})\nexport class UserListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserListMostActiveContributorsDto.html":{"url":"classes/UserListMostActiveContributorsDto.html","title":"class - UserListMostActiveContributorsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserListMostActiveContributorsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/dtos/most-active-contributors.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                contributorType\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        contributorType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsTypeEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsTypeEnum.all\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsTypeEnum, enumName: 'UserListContributorStatsTypeEnum', default: undefined})@IsEnum(UserListContributorStatsTypeEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserListContributorStatsOrderEnum\n\n                    \n                \n                \n                    \n                        Default value : UserListContributorStatsOrderEnum.commits\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserListContributorStatsOrderEnum, enumName: 'UserListContributorStatsOrderEnum', default: undefined})@IsEnum(UserListContributorStatsOrderEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-lists/dtos/most-active-contributors.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional } from \"class-validator\";\n\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum UserListContributorStatsOrderEnum {\n  commits = \"commits\",\n  prs_created = \"prs_created\",\n  total_contributions = \"total_contributions\",\n}\n\nexport enum UserListContributorStatsTypeEnum {\n  all = \"all\",\n  active = \"active\",\n  new = \"new\",\n  alumni = \"alumni\",\n}\n\nexport class UserListMostActiveContributorsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsTypeEnum,\n    enumName: \"UserListContributorStatsTypeEnum\",\n    default: UserListContributorStatsTypeEnum.all,\n  })\n  @IsEnum(UserListContributorStatsTypeEnum)\n  @IsOptional()\n  contributorType?: UserListContributorStatsTypeEnum = UserListContributorStatsTypeEnum.all;\n\n  @ApiPropertyOptional({\n    enum: UserListContributorStatsOrderEnum,\n    enumName: \"UserListContributorStatsOrderEnum\",\n    default: UserListContributorStatsOrderEnum.commits,\n  })\n  @IsEnum(UserListContributorStatsOrderEnum)\n  @IsOptional()\n  readonly orderBy?: UserListContributorStatsOrderEnum = UserListContributorStatsOrderEnum.commits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListService.html":{"url":"injectables/UserListService.html","title":"injectable - UserListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserList\n                            \n                            \n                                    Async\n                                addUserListContributor\n                            \n                            \n                                baseListContributorQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                baseUserQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserList\n                            \n                            \n                                    Async\n                                deleteUserListContributor\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findContributorsByFilter\n                            \n                            \n                                    Async\n                                findContributorsByListId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findPublicOneById\n                            \n                            \n                                    Async\n                                getAllTimezones\n                            \n                            \n                                    Async\n                                updateUserList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListRepository: Repository, userListContributorRepository: Repository, userRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserList(userId: number, list: CreateUserListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    list\n                                    \n                                                CreateUserListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserListContributor(listId: string, userId: number, username?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseListContributorQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseListContributorQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseUserQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseUserQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserList(listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserListContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserListContributor(id: string, userListContributorId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userListContributorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByFilter(pageOptionsDto: FilterListContributorsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterListContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorsByListId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorsByListId(pageOptionsDto: PageOptionsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPublicOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPublicOneById(id: string, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllTimezones\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTimezones()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserList(listId: string, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { CreateUserListDto } from \"./dtos/create-user-list.dto\";\nimport { DbUserList } from \"./entities/user-list.entity\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { FilterListContributorsDto } from \"./dtos/filter-contributors.dto\";\nimport { DbTimezone } from \"./entities/timezones.entity\";\n\n@Injectable()\nexport class UserListService {\n  constructor(\n    @InjectRepository(DbUserList, \"ApiConnection\")\n    private userListRepository: Repository,\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository,\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListRepository.createQueryBuilder(\"user_lists\");\n\n    return builder;\n  }\n\n  baseListContributorQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  baseUserQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_lists.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findPublicOneById(id: string, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_lists.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_lists_login\")\n      .where(\"user_lists.id = :id\", { id });\n\n    const item: DbUserList | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    if (!item.is_public && userId !== item.user_id) {\n      throw new UnauthorizedException(\"You're not authorized to view this list\");\n    }\n\n    return item;\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_lists.user_id = :userId\", { userId }).orderBy(\"user_lists.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserList(userId: number, list: CreateUserListDto) {\n    const newUserList = this.userListRepository.create({\n      user_id: userId,\n      name: list.name,\n      is_public: list.is_public,\n    });\n\n    return this.userListRepository.save(newUserList);\n  }\n\n  async addUserListContributor(listId: string, userId: number, username?: string) {\n    const newUserListContributor = this.userListContributorRepository.create({\n      list_id: listId,\n      user_id: userId,\n      username,\n    });\n\n    return this.userListContributorRepository.save(newUserListContributor);\n  }\n\n  async deleteUserListContributor(id: string, userListContributorId: string) {\n    const contributor = await this.userListContributorRepository.findOne({\n      where: {\n        id: userListContributorId,\n        list_id: id,\n      },\n    });\n\n    if (contributor) {\n      return this.userListContributorRepository.softDelete(userListContributorId);\n    }\n\n    throw new NotFoundException(\"User list contributor not found for given list ID\");\n  }\n\n  async updateUserList(listId: string, highlight: Partial) {\n    return this.userListRepository.update(listId, highlight);\n  }\n\n  async deleteUserList(listId: string) {\n    return this.userListRepository.softDelete(listId);\n  }\n\n  async findContributorsByFilter(pageOptionsDto: FilterListContributorsDto): Promise> {\n    const queryBuilder = this.userRepository.createQueryBuilder(\"user\");\n\n    if (pageOptionsDto.location) {\n      queryBuilder.andWhere(\"user.location = :location\", { location: pageOptionsDto.location });\n    }\n\n    if (pageOptionsDto.timezone) {\n      queryBuilder.andWhere(\"user.timezone = :timezone\", { timezone: pageOptionsDto.timezone });\n    }\n\n    if (pageOptionsDto.pr_velocity) {\n      queryBuilder.andWhere(\n        `\n        (\n          SELECT COALESCE(AVG((\"pull_requests\".\"merged_at\"::DATE - \"pull_requests\".\"created_at\"::DATE)), 0)\n          FROM \"pull_requests\"\n          WHERE LOWER(\"pull_requests\".\"author_login\") = LOWER(user.login)\n          AND now() - INTERVAL '30 days' > {\n    const queryBuilder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    queryBuilder\n      .leftJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_list_contributors_login\")\n      .where(\"user_list_contributors.list_id = :listId\", { listId });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async getAllTimezones(): Promise {\n    const queryBuilder = this.baseUserQueryBuilder();\n\n    queryBuilder\n      .select(\"DISTINCT users.timezone as timezone\")\n      .where(\"users.timezone IS NOT NULL\")\n      .andWhere(\"users.timezone != ''\");\n\n    const timezones: DbTimezone[] = await queryBuilder.getRawMany();\n\n    return timezones;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserListStatsController.html":{"url":"controllers/UserListStatsController.html","title":"controller - UserListStatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserListStatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lists\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getContributionsByProject\n                            \n                            \n                                    Async\n                                getContributionsByTimeframe\n                            \n                            \n                                    Async\n                                getContributionsByTimeFrame\n                            \n                            \n                                    Async\n                                getContributorContributionsByProject\n                            \n                            \n                                    Async\n                                getMostActiveContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByProject(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-by-project')@ApiOperation({operationId: 'getContributionsByProject', summary: 'Gets contributions in a given timeframe'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbContributionsProjects})@ApiNotFoundResponse({description: 'Unable to get contributions by project'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeframe(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-contributor-type')@ApiOperation({operationId: 'getContributorsByTimeframe', summary: 'Gets contributions by category within timeframe'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbContributorCategoryTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributionsByTimeFrame\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributionsByTimeFrame(id: string, options: ContributionsTimeframeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/contributions-evolution-by-type')@ApiOperation({operationId: 'getContributionsByTimeFrame', summary: 'Gets contributions in a given timeframe'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbContributionStatTimeframe})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContributorContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorContributionsByProject(id: string, repoId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/top-project-contributions-by-contributor/')@ApiOperation({operationId: 'getContributorContributionsByProject', summary: 'Gets top 20 contributor stats in a list by a given project'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get contributions'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMostActiveContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMostActiveContributors(id: string, pageOptionsDto: UserListMostActiveContributorsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/stats/most-active-contributors')@ApiOperation({operationId: 'getMostActiveContributors', summary: 'Gets most active contributors for a given list'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserListContributorStat)@ApiOkResponse({type: DbUserListContributorStat})@ApiNotFoundResponse({description: 'Unable to get list most active contributors'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiParam({name: 'id', type: 'string'})\n                \n            \n\n            \n                \n                    Defined in src/user-lists/user-list-stats.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiParam,\n} from \"@nestjs/swagger\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserListMostActiveContributorsDto } from \"./dtos/most-active-contributors.dto\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport { UserListStatsService } from \"./user-list-stat.service\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\n\n@Controller(\"lists\")\n@ApiTags(\"User Lists service\")\nexport class UserListStatsController {\n  constructor(private readonly userListStatsService: UserListStatsService) {}\n\n  @Get(\":id/stats/most-active-contributors\")\n  @ApiOperation({\n    operationId: \"getMostActiveContributors\",\n    summary: \"Gets most active contributors for a given list\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserListContributorStat)\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get list most active contributors\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getMostActiveContributors(\n    @Param(\"id\") id: string,\n    @Query() pageOptionsDto: UserListMostActiveContributorsDto\n  ): Promise> {\n    return this.userListStatsService.findAllListContributorStats(pageOptionsDto, id);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-type\")\n  @ApiOperation({\n    operationId: \"getContributionsByTimeFrame\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbContributionStatTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeFrame(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributionsInTimeframe(options, id);\n  }\n\n  @Get(\":id/stats/contributions-by-project\")\n  @ApiOperation({\n    operationId: \"getContributionsByProject\",\n    summary: \"Gets contributions in a given timeframe\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbContributionsProjects })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions by project\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByProject(@Param(\"id\") id: string): Promise {\n    return this.userListStatsService.findContributionsByProject(id);\n  }\n\n  @Get(\":id/stats/top-project-contributions-by-contributor/\")\n  @ApiOperation({\n    operationId: \"getContributorContributionsByProject\",\n    summary: \"Gets top 20 contributor stats in a list by a given project\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserListContributorStat })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributorContributionsByProject(\n    @Param(\"id\") id: string,\n    @Query(\"repoId\") repoId: number\n  ): Promise {\n    return this.userListStatsService.findListContributorStatsByProject(id, repoId);\n  }\n\n  @Get(\":id/stats/contributions-evolution-by-contributor-type\")\n  @ApiOperation({\n    operationId: \"getContributorsByTimeframe\",\n    summary: \"Gets contributions by category within timeframe\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbContributorCategoryTimeframe })\n  @ApiNotFoundResponse({ description: \"Unable to get contributions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiParam({ name: \"id\", type: \"string\" })\n  async getContributionsByTimeframe(\n    @Param(\"id\") id: string,\n    @Query() options: ContributionsTimeframeDto\n  ): Promise {\n    return this.userListStatsService.findContributorCategoriesByTimeframe(options, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserListStatsService.html":{"url":"injectables/UserListStatsService.html","title":"injectable - UserListStatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserListStatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-lists/user-list-stat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyActiveContributorsFilter\n                            \n                            \n                                    Private\n                                applyAlumniContributorsFilter\n                            \n                            \n                                    Private\n                                applyNewContributorsFilter\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllListContributorStats\n                            \n                            \n                                    Async\n                                findContributionsByProject\n                            \n                            \n                                    Async\n                                findContributionsInTimeframe\n                            \n                            \n                                    Async\n                                findContributionsInTimeframeHelper\n                            \n                            \n                                    Async\n                                findContributorCategoriesByTimeframe\n                            \n                            \n                                    Async\n                                findContributorCategoriesInTimeframeHelper\n                            \n                            \n                                    Async\n                                findListContributorStatsByProject\n                            \n                            \n                                getDateFrames\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userListContributorRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-lists/user-list-stat.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userListContributorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyActiveContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyActiveContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:386\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyAlumniContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyAlumniContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:446\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyNewContributorsFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyNewContributorsFilter(queryBuilder: SelectQueryBuilder, startDate: string, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:416\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queryBuilder\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllListContributorStats\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllListContributorStats(pageOptionsDto: UserListMostActiveContributorsDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserListMostActiveContributorsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsByProject(listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:350\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributionsInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributionsInTimeframeHelper(startDate: string, range: number, contributorType: string, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contributorType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesByTimeframe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesByTimeframe(options: ContributionsTimeframeDto, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ContributionsTimeframeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorCategoriesInTimeframeHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorCategoriesInTimeframeHelper(startDate: string, range: number, listId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:299\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    startDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findListContributorStatsByProject\n                        \n                    \n                \n            \n            \n                \n                    \n                    findListContributorStatsByProject(listId: string, repoId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    listId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDateFrames\n                        \n                    \n                \n            \n            \n                \ngetDateFrames(range: number, denominator: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-lists/user-list-stat.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                                \n                                    denominator\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        7\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserListContributor } from \"./entities/user-list-contributor.entity\";\nimport { DbUserListContributorStat } from \"./entities/user-list-contributor-stats.entity\";\nimport {\n  UserListContributorStatsOrderEnum,\n  UserListContributorStatsTypeEnum,\n  UserListMostActiveContributorsDto,\n} from \"./dtos/most-active-contributors.dto\";\nimport { ContributionsTimeframeDto } from \"./dtos/contributions-timeframe.dto\";\nimport { DbContributionStatTimeframe } from \"./entities/contributions-timeframe.entity\";\nimport { DbContributionsProjects } from \"./entities/contributions-projects.entity\";\nimport { DbContributorCategoryTimeframe } from \"./entities/contributors-timeframe.entity\";\nimport { ContributionPageMetaDto as ContributionsPageMetaDto } from \"./dtos/contributions-pagemeta.dto\";\nimport { ContributionsPageDto } from \"./dtos/contributions-page.dto\";\n\ninterface AllContributionsCount {\n  all_contributions: number;\n}\n\n@Injectable()\nexport class UserListStatsService {\n  constructor(\n    @InjectRepository(DbUserListContributor, \"ApiConnection\")\n    private userListContributorRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userListContributorRepository.createQueryBuilder(\"user_list_contributors\");\n\n    return builder;\n  }\n\n  async findListContributorStatsByProject(listId: string, repoId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    queryBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n        )::INTEGER`,\n        \"commits\"\n      )\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"repo_id\" = ${repoId}\n        )::INTEGER`,\n        \"prs_created\"\n      );\n\n    // limit to only the top 20 contributors for stats by projects\n    queryBuilder.limit(20);\n\n    const entities: DbUserListContributorStat[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findAllListContributorStats(\n    pageOptionsDto: UserListMostActiveContributorsDto,\n    listId: string\n  ): Promise> {\n    const range = pageOptionsDto.range!;\n    const now = new Date().toISOString();\n\n    const cteBuilder = this.baseQueryBuilder();\n\n    cteBuilder.innerJoin(\"users\", \"users\", \"user_list_contributors.user_id=users.id\");\n\n    switch (pageOptionsDto.contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(cteBuilder, now, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(cteBuilder, now, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    cteBuilder\n      .select(\"users.login\", \"login\")\n      .andWhere(\"user_list_contributors.list_id = :listId\", { listId })\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND now() - INTERVAL '${range} days'  {\n    const denominator = 82;\n    const range = options.range!;\n    const dates = this.getDateFrames(range, denominator);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributorCategoriesInTimeframeHelper(frameStartDate.toISOString(), range / denominator, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  async findContributionsInTimeframe(\n    options: ContributionsTimeframeDto,\n    listId: string\n  ): Promise {\n    const range = options.range!;\n    const contributorType = options.contributorType!;\n    const dates = this.getDateFrames(range);\n\n    const framePromises = dates.map(async (frameStartDate) =>\n      this.findContributionsInTimeframeHelper(frameStartDate.toISOString(), range / 7, contributorType, listId)\n    );\n\n    return Promise.all(framePromises);\n  }\n\n  getDateFrames(range = 30, denominator = 7): Date[] {\n    const currentDate = new Date();\n    const frameDuration = range / denominator;\n    const dates: Date[] = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let i = 0; i  {\n    const subQueryBuilder = this.baseQueryBuilder();\n\n    subQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    switch (contributorType) {\n      case UserListContributorStatsTypeEnum.all:\n        break;\n\n      case UserListContributorStatsTypeEnum.active:\n        this.applyActiveContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.new:\n        this.applyNewContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n\n      case UserListContributorStatsTypeEnum.alumni: {\n        this.applyAlumniContributorsFilter(subQueryBuilder, startDate, range);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    subQueryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(SUM(\"pull_requests\".\"commits\"), 0)\n          FROM \"pull_requests\"\n          WHERE \"pull_requests\".\"author_login\" = \"users\".\"login\"\n            AND \"pull_requests\".\"updated_at\" > '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n            AND \"pull_requests\".\"updated_at\"  {\n    const activeCountQueryBuilder = this.baseQueryBuilder();\n\n    activeCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyActiveContributorsFilter(activeCountQueryBuilder, startDate, range);\n\n    const activeCount = await activeCountQueryBuilder.getCount();\n\n    const newCountQueryBuilder = this.baseQueryBuilder();\n\n    newCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyNewContributorsFilter(newCountQueryBuilder, startDate, range);\n\n    const newCount = await newCountQueryBuilder.getCount();\n\n    const alumniCountQueryBuilder = this.baseQueryBuilder();\n\n    alumniCountQueryBuilder.innerJoin(\n      \"users\",\n      \"users\",\n      `user_list_contributors.user_id=users.id AND user_list_contributors.list_id='${listId}'`\n    );\n\n    this.applyAlumniContributorsFilter(alumniCountQueryBuilder, startDate, range);\n\n    const alumniCount = await alumniCountQueryBuilder.getCount();\n\n    return {\n      time_start: startDate,\n      time_end: `${new Date(new Date(startDate).getTime() + range * 86400000).toISOString()}`,\n      active: activeCount,\n      new: newCount,\n      alumni: alumniCount,\n      all: activeCount + newCount + alumniCount,\n    };\n  }\n\n  async findContributionsByProject(listId: string): Promise {\n    // todo (jpmcb) - in the future we'll likely want to make this range dynamic.\n    const range = 30;\n\n    const queryBuilder = this.userListContributorRepository.manager\n      .createQueryBuilder()\n      .select(\"split_part(repos.full_name, '/', 1)\", \"org_id\")\n      .addSelect(\"split_part(repos.full_name, '/', 2)\", \"project_id\")\n      .addSelect(\"COUNT(pr.id)\", \"contributions\")\n\n      // grab pull requests first\n      .from(\"pull_requests\", \"pr\")\n\n      // and join them with repos\n      .innerJoin(\"repos\", \"repos\", 'pr.\"repo_id\" = \"repos\".\"id\"')\n\n      // join with filtered users from the user list\n      .innerJoin(\n        (subQuery) =>\n          subQuery\n            .select(\"users.login\", \"user_login\")\n            .from(\"user_list_contributors\", \"user_list_contributors\")\n            .innerJoin(\"users\", \"users\", '\"user_list_contributors\".\"user_id\" = \"users\".\"id\"')\n            .where(`\"user_list_contributors\".\"list_id\" = '${listId}'`),\n        \"filtered_users\",\n        'pr.\"author_login\" = \"filtered_users\".\"user_login\"'\n      )\n\n      .where(`pr.\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days' AND NOW()`)\n      .groupBy(\"repos.full_name\");\n\n    const entities: DbContributionsProjects[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  private applyActiveContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          AND '${startDate}'::TIMESTAMP\n      )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n        SELECT DISTINCT \"author_login\"\n        FROM \"pull_requests\"\n        WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n          AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n      )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyNewContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN NOW() - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NOT NULL`);\n  }\n\n  private applyAlumniContributorsFilter(\n    queryBuilder: SelectQueryBuilder,\n    startDate: string,\n    range = 30\n  ) {\n    queryBuilder\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n              AND '${startDate}'::TIMESTAMP\n          )`,\n        \"current_month_prs\",\n        `\"users\".\"login\" = \"current_month_prs\".\"author_login\"`\n      )\n      .leftJoin(\n        `(\n            SELECT DISTINCT \"author_login\"\n            FROM \"pull_requests\"\n            WHERE \"pull_requests\".\"updated_at\" BETWEEN '${startDate}'::TIMESTAMP - INTERVAL '${range + range} days'\n              AND '${startDate}'::TIMESTAMP - INTERVAL '${range} days'\n          )`,\n        \"previous_month_prs\",\n        `\"users\".\"login\" = \"previous_month_prs\".\"author_login\"`\n      )\n      .where(`\"previous_month_prs\".\"author_login\" IS NOT NULL`)\n      .andWhere(`\"current_month_prs\".\"author_login\" IS NULL`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                        \n                            UserRecommendationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./services/user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { UserRecommendationController } from \"./user-recommendation.controller\";\nimport { DbUserOrganization } from \"./entities/user-organization.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserHighlight,\n        DbUserHighlightReaction,\n        DbUserToUserFollows,\n        DbUserTopRepo,\n        DbUserNotification,\n        DbUserCollaboration,\n        DbRepo,\n        DbEndorsement,\n        DbUserOrganization,\n      ],\n      \"ApiConnection\"\n    ),\n    PullRequestModule,\n    RepoModule,\n    ApiServicesModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n    UserRecommendationController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n  ],\n  exports: [UserService, UserHighlightsService, UserFollowService, RepoService, EndorsementService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags, OmitType } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor(private userNotificationService: UserNotificationService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserNotification, [\"read_at\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserHighlightReactionNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReactionNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./services/user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor(\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .innerJoinAndSelect(\"user_notifications.from_user\", \"from_user\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .orderBy(\"user_notifications.notified_at\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n\n    const notificationIds = entities\n      .filter((notification) => !notification.read_at)\n      .map((notification) => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification(userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: new Date(),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification(userId: number, followedUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightReactionNotification(userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async addUserHighlightNotification(highlightId: number, userId: number, highlightUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightCreated,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} created a new highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead(notificationIds: number[]) {\n    const updates = notificationIds.map(async (id) =>\n      this.userNotificationRepository.update(id, { read_at: new Date() })\n    );\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: 'string', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: \"string\",\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserRecommendationController.html":{"url":"controllers/UserRecommendationController.html","title":"controller - UserRecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserRecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-recommendation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/recommendations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserOrgsRepoRecommendations\n                            \n                            \n                                    Async\n                                findUserRepoRecommendations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserOrgsRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserOrgsRepoRecommendations(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/orgs')@ApiOperation({operationId: 'findUserOrgsRepoRecommendations', summary: 'Listing recommended repos for the authenticated user based on their orgs'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserRepoRecommendations(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos')@ApiOperation({operationId: 'findUserRepoRecommendations', summary: 'Listing recommended repos for the authenticated user'})@ApiBearerAuth()@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiTags, ApiOkResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { UserService } from \"./services/user.service\";\n\n@Controller(\"user/recommendations\")\n@ApiTags(\"User Recommendations service\")\nexport class UserRecommendationController {\n  constructor(private readonly repoService: RepoService, private readonly userService: UserService) {}\n\n  @Get(\"/repos\")\n  @ApiOperation({\n    operationId: \"findUserRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserRepoRecommendations(@UserId() userId: number) {\n    const user = await this.userService.findOneById(userId);\n    const interests = user.interests?.split(\",\").filter(Boolean) ?? [];\n\n    return this.repoService.findRecommendations(interests);\n  }\n\n  @Get(\"/orgs\")\n  @ApiOperation({\n    operationId: \"findUserOrgsRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user based on their orgs\",\n  })\n  @ApiBearerAuth()\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @UseGuards(SupabaseGuard)\n  async findUserOrgsRepoRecommendations(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.repoService.findOrgsRecommendations(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                prev_days_start_date\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:30\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1, type: 'integer'})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        prev_days_start_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of days in the past to start range block', default: 0, type: 'integer'})@Type(undefined)@IsIn(['0', '7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30, type: 'integer'})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:46\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: 'integer', isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_imports\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbUserRepo], \"ApiConnection\"), ApiServicesModule],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor(\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserRepo(userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder.where(\"user_repos.user_id = :userId\", { userId });\n\n    return this.pagerService.applyPagination({\n      queryBuilder,\n      pageOptionsDto,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyCoupon\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                findTopUsers\n                            \n                            \n                                    Async\n                                findUsersByFilter\n                            \n                            \n                                reactionsQueryBuilder\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userHighlightReactionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/services/user.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyCoupon\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyCoupon(id: number, coupon: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    coupon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:320\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUsersByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsersByFilter(pageOptionsDto: FilteredUsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilteredUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionsQueryBuilder\n                        \n                    \n                \n            \n            \n                \nreactionsQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:306\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:302\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number, user: UserOnboardingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:267\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:292\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/services/user.service.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"../user.entity\";\nimport { UpdateUserDto } from \"../dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../dtos/update-user-email-prefs.dto\";\nimport { UserOnboardingDto } from \"../../auth/dtos/user-onboarding.dto\";\nimport { userNotificationTypes } from \"../entities/user-notification.constants\";\nimport { DbUserHighlightReaction } from \"../entities/user-highlight-reaction.entity\";\nimport { DbTopUser } from \"../entities/top-users.entity\";\nimport { TopUsersDto } from \"../dtos/top-users.dto\";\nimport { PageDto } from \"../../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../../common/dtos/page-meta.dto\";\nimport { DbFilteredUser } from \"../entities/filtered-users.entity\";\nimport { FilteredUsersDto } from \"../dtos/filtered-users.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  reactionsQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    return builder;\n  }\n\n  async findTopUsers(pageOptionsDto: TopUsersDto): Promise> {\n    const queryBuilder = this.reactionsQueryBuilder();\n\n    const { userId } = pageOptionsDto;\n\n    queryBuilder\n      .select(\"users.login as login\")\n      .from(DbUser, \"users\")\n      .innerJoin(\"user_highlights\", \"user_highlights\", \"user_highlights.user_id = users.id\")\n      .innerJoin(\"user_highlight_reactions\", \"reactions\", \"reactions.highlight_id = user_highlights.id\")\n      .where(\"reactions.deleted_at IS NULL\");\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\n          \"users.id NOT IN (SELECT following_user_id FROM users_to_users_followers WHERE user_id = :userId AND deleted_at IS NULL)\"\n        )\n        .setParameters({ userId });\n    }\n\n    queryBuilder.groupBy(\"users.login\").orderBy(\"COUNT(reactions.user_id)\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getRawMany()]);\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findOneById(id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"user_notifications\".\"id\"), 0)\n          FROM user_notifications\n          WHERE user_id = :userId\n          AND user_notifications.type IN (:...userNotificationTypes)\n          AND user_notifications.read_at IS NULL\n        )::INTEGER`,\n        \"users_notification_count\"\n      )\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      queryBuilder.setParameters({ userId: id, userNotificationTypes });\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_highlights\".\"id\"), 0)\n        FROM user_highlights\n        WHERE user_id = users.id\n        AND user_highlights.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_highlights_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_follows\".\"id\"), 0)\n        FROM users_to_users_followers user_follows\n        WHERE user_id = users.id\n        AND user_follows.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_following_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_follows\".\"id\"), 0)\n        FROM users_to_users_followers user_follows\n        WHERE following_user_id = users.id\n        AND user_follows.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_followers_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"pull_requests\".\"id\"), 0)\n        FROM pull_requests\n        WHERE LOWER(author_login) = :username\n        AND now() - INTERVAL '30 days'  0 THEN true\n              ELSE false\n            END\n          FROM pull_requests prs\n          JOIN repos on prs.repo_id=repos.id\n          WHERE LOWER(prs.merged_by_login) = :username\n        )::BOOLEAN`,\n        \"users_is_maintainer\"\n      )\n      .where(\"LOWER(login) = :username\", { username: username.toLowerCase() })\n      .setParameters({ username: username.toLowerCase() });\n\n    const item: DbUser | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findUsersByFilter(pageOptionsDto: FilteredUsersDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    const { username, limit } = pageOptionsDto;\n\n    if (!username) {\n      throw new BadRequestException();\n    }\n\n    queryBuilder\n      .select([\"users.login as login\", \"users.name as full_name\"])\n      .where(`LOWER(users.login) LIKE :username`)\n      .setParameters({ username: `%${username.toLowerCase()}%` })\n      .limit(limit);\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getRawMany()]);\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async checkAddUser(user: User): Promise {\n    const {\n      user_metadata: { user_name, email, name },\n      identities,\n      confirmed_at,\n    } = user;\n    const github = identities!.filter((identity) => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      const user = await this.findOneById(id, true);\n\n      if (!user.is_open_sauced_member) {\n        await this.userRepository.update(user.id, {\n          is_open_sauced_member: true,\n          connected_at: new Date(),\n        });\n      }\n\n      return user;\n    } catch (e) {\n      // create new user\n      const newUser = await this.userRepository.save({\n        id,\n        name: name as string,\n        is_open_sauced_member: true,\n        login: user_name as string,\n        email: email as string,\n        created_at: new Date(github.created_at),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n        connected_at: confirmed_at ? new Date(confirmed_at) : new Date(),\n      });\n\n      return newUser;\n    }\n  }\n\n  async updateUser(id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n        github_sponsors_url: user.github_sponsors_url ?? \"\",\n        linkedin_url: user.linkedin_url ?? \"\",\n        discord_url: user.discord_url ?? \"\",\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding(id: number, user: UserOnboardingDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        is_onboarded: true,\n        is_waitlisted: false,\n        timezone: user.timezone,\n        interests: user.interests.join(\",\"),\n      });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus(id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole(id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests(id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n\n  async applyCoupon(id: number, coupon: string) {\n    return this.userRepository.update(id, {\n      coupon_code: coupon,\n      role: 50,\n    });\n  }\n\n  async findOneByEmail(email: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`users.email = :email`, { email: email.toLowerCase() });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { RepoModule } from \"../repo/repo.module\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserVotes], \"ApiConnection\"), RepoModule],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Private\n                                    Async\n                                getVoteQuery\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getVoteQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVoteQuery(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor(\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\").withDeleted();\n\n    return builder;\n  }\n\n  async findOneByRepoId(repoId: number, userId: number) {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    if (voteExists.deleted_at) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    return {\n      voted: true,\n      data: voteExists,\n    };\n  }\n\n  async voteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n\n  private async getVoteQuery(repoId: number, userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    return queryBuilder.getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VotedRepoDto.html":{"url":"classes/VotedRepoDto.html","title":"class - VotedRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VotedRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                voted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'If the user has voted for the repo', type: Boolean, example: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: \"integer\",\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blogs/dtos/create-blog-summary.dto.ts\n            \n            class\n            CreateBlogSummaryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/blogs/issue-summary.controller.ts\n            \n            controller\n            BlogSummaryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/blogs/issue-summary.service.ts\n            \n            injectable\n            BlogSummaryService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            injectable\n            PagerService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            interface\n            PaginationInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/util/datetimes.ts\n            \n            variable\n            GetPrevDateISOString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/util/swagger.ts\n            \n            variable\n            swaggerMarkdownDescription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/api.config.ts\n            \n            variable\n            ApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-api.config.ts\n            \n            variable\n            DbApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-logging.config.ts\n            \n            variable\n            DbLoggingConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            EndpointConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/hacktoberfest.config.ts\n            \n            variable\n            HacktoberfestConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/openai.config.ts\n            \n            variable\n            OpenAIConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/pizza.config.ts\n            \n            variable\n            PizzaConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/stripe.config.ts\n            \n            variable\n            StripeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contributor/contributor-insights.controller.ts\n            \n            controller\n            ContributorInsightsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/contributor/contributor.controller.ts\n            \n            controller\n            ContributorController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/coupon/coupon.service.ts\n            \n            injectable\n            CouponService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/coupon/entities/coupon.entity.ts\n            \n            entity\n            DbCoupon\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/dto/create-endorsement.dto.ts\n            \n            class\n            CreateEndorsementDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/endorsement/dto/update-endorsement.dto.ts\n            \n            class\n            UpdateEndorsementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement-token.guard.ts\n            \n            guard\n            EndorsementTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.controller.ts\n            \n            controller\n            EndorsementController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.service.ts\n            \n            injectable\n            EndorsementService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/endorsement/entities/endorsement.entity.ts\n            \n            entity\n            DbEndorsement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/generate-swagger.ts\n            \n            variable\n            generateSwaggerJson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            DbUserHighlightReactionResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issues/dtos/create-issue-summary.dto.ts\n            \n            class\n            CreateIssueSummaryDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issues/issue-summary.controller.ts\n            \n            controller\n            IssueSummaryController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issues/issue-summary.service.ts\n            \n            injectable\n            IssueSummaryService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            injectable\n            OpenAiService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/commit-authors.service.ts\n            \n            injectable\n            CommitAuthorsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pizza/commits.service.ts\n            \n            injectable\n            CommitsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pizza/dtos/baked-repo.dto.ts\n            \n            class\n            BakeRepoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pizza/dtos/commit_authors.dto.ts\n            \n            class\n            CommitAuthorDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/dtos/commits.dto.ts\n            \n            class\n            CommitsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pizza/entities/baked-repo.entity.ts\n            \n            entity\n            DbBakedRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/entities/commit_authors.entity.ts\n            \n            entity\n            DbCommitAuthors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/entities/commits.entity.ts\n            \n            entity\n            DbCommits\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pizza/pizza-oven.controller.ts\n            \n            controller\n            PizzaOvenController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/pizza/pizza-oven.service.ts\n            \n            injectable\n            PizzaOvenService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.controller.ts\n            \n            controller\n            CodeExplanationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.service.ts\n            \n            injectable\n            CodeExplanationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.controller.ts\n            \n            controller\n            CodeRefactorSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            injectable\n            CodeRefactorSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test-suggestion.service.ts\n            \n            injectable\n            CodeTestSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test.suggestion.controller.ts\n            \n            controller\n            CodeTestSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-explanation.dto.ts\n            \n            class\n            GenerateCodeExplanationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n            \n            class\n            GenerateCodeRefactorSuggestionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n            \n            class\n            GenerateCodeTestSuggestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-pull-request-description.dto.ts\n            \n            class\n            GeneratePullRequestDescriptionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n            \n            class\n            PullRequestContributorInsightsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n            \n            class\n            PullRequestContributorOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor.dto.ts\n            \n            class\n            DbPullRequestContributor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-review.entity.ts\n            \n            entity\n            DbPullRequestReview\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.controller.ts\n            \n            controller\n            PullRequestDescriptionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            injectable\n            PullRequestDescriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-review.service.ts\n            \n            injectable\n            PullRequestReviewService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/collaborators.dto.ts\n            \n            class\n            CollaboratorsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/contributions-page.dto.ts\n            \n            class\n            ContributionsPageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/contributions-pagemeta.dto.ts\n            \n            class\n            ContributionPageMetaDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/contributions-timeframe.dto.ts\n            \n            class\n            ContributionsTimeframeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/create-user-list.dto.ts\n            \n            class\n            Contributor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/create-user-list.dto.ts\n            \n            class\n            CreateUserListDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/filter-contributors.dto.ts\n            \n            class\n            FilterListContributorsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-lists/dtos/most-active-contributors.dto.ts\n            \n            class\n            UserListMostActiveContributorsDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user-lists/entities/contributions-projects.entity.ts\n            \n            entity\n            DbContributionsProjects\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/contributions-timeframe.entity.ts\n            \n            entity\n            DbContributionStatTimeframe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/contributors-timeframe.entity.ts\n            \n            entity\n            DbContributorCategoryTimeframe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/timezones.entity.ts\n            \n            class\n            DbTimezone\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-lists/entities/user-list-contributor-stats.entity.ts\n            \n            entity\n            DbUserListContributorStat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/user-list-contributor.entity.ts\n            \n            entity\n            DbUserListContributor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/entities/user-list.entity.ts\n            \n            entity\n            DbUserList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-lists/user-list-stat.service.ts\n            \n            injectable\n            UserListStatsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user-lists/user-list-stat.service.ts\n            \n            interface\n            AllContributionsCount\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-lists/user-list-stats.controller.ts\n            \n            controller\n            UserListStatsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-lists/user-list.controller.ts\n            \n            controller\n            UserListController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user-lists/user-list.service.ts\n            \n            injectable\n            UserListService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            VotedRepoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/apply-user-coupon.dto.ts\n            \n            class\n            ApplyUserCouponDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-collaboration.dto.ts\n            \n            class\n            CreateUserCollaborationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dtos/filtered-users.dto.ts\n            \n            class\n            FilteredUsersDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dtos/top-users.dto.ts\n            \n            class\n            TopUsersDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-collaboration.dto.ts\n            \n            class\n            UpdateUserCollaborationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/entities/filtered-users.entity.ts\n            \n            class\n            DbFilteredUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/entities/top-users.entity.ts\n            \n            class\n            DbTopUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user-collaboration.entity.ts\n            \n            entity\n            DbUserCollaboration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.constants.ts\n            \n            variable\n            userNotificationTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.entity.ts\n            \n            entity\n            DbUserNotification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-organization.entity.ts\n            \n            entity\n            DbUserOrganization\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-top-repo.entity.ts\n            \n            entity\n            DbUserTopRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.controller.ts\n            \n            controller\n            UserCollaborationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.service.ts\n            \n            injectable\n            UserCollaborationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-endorsement.controller.ts\n            \n            controller\n            UserEndorsementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/user/user-notifcation.service.ts\n            \n            injectable\n            UserNotificationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user-notification.controller.ts\n            \n            controller\n            UserNotificationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user-recommendation.controller.ts\n            \n            controller\n            UserRecommendationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserListContributorStatsOrderEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserListContributorStatsTypeEnum   (src/.../most-active-contributors.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user-lists/dtos/most-active-contributors.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsOrderEnum\n                    \n                \n                        \n                            \n                                 commits\n                            \n                        \n                        \n                            \n                                Value : commits\n                            \n                        \n                        \n                            \n                                 prs_created\n                            \n                        \n                        \n                            \n                                Value : prs_created\n                            \n                        \n                        \n                            \n                                 total_contributions\n                            \n                        \n                        \n                            \n                                Value : total_contributions\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserListContributorStatsTypeEnum\n                    \n                \n                        \n                            \n                                 all\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 new\n                            \n                        \n                        \n                            \n                                Value : new\n                            \n                        \n                        \n                            \n                                 alumni\n                            \n                        \n                        \n                            \n                                Value : alumni\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 HighlightCreated\n                            \n                        \n                        \n                            \n                                Value : highlight_created\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\n🖥️ Local development\n📡 Setting Up Your Supabase Instance\nBefore setting up your local PostgreSQL database, a Supabase instance should be created. To do this, follow these steps:\n1. Create a new Supabase project: Visit Supabase and create a new project.\n2. Set Environment Variables in .env file: Once your project is created, Supabase will provide a URL and an API key. Set these in your project's .env file:\nSUPABASE_URL=your_supabase_url\nSUPABASE_API_KEY=your_supabase_api_key\nSUPABASE_JWT_SECRET=your_supabase_jwt_secret\nAPI_DOMAIN=your_api_domainReplace your_supabase_url, your_supabase_api_key, your_supabase_jwt_secret, and your_api_domain with the actual values provided by Supabase and your project's settings.\n🗄️ Setting Up A PostgreSQL Database Locally\nA PostgreSQL Docker container has been set up to facilitate local development. After navigating to the dev/ directory, this container can be set up as follows:\n1. Obtain SSL Certificates:For secure SSL communication, you need a pair of SSL certificates: server.crt and server.key. You can generate self-signed certificates by using OpenSSL:\nopenssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -nodes -subj \"/CN=localhost\"Please note that this generates self-signed certificates which should only be used for local development.\n2.Build the Docker image:\ndocker build -t my_postgres_image -f Dockerfile.local-postgres .This command will build the Docker image using the Dockerfile in the current directory. The previously generated SSL certificates will need to be in the same directory as the Dockerfile.\n3.Run the Docker container:\ndocker run --name my_postgres_container -p 25060:5432 -d my_postgres_image:latestThis command will start a new Docker container named my_postgres_container, mapping port 25060 on your local machine to port 5432 on the Docker container.\nOnce the database is stood up,\ncan use the dev/apply-migrations.sh script to apply all the migrations in\nthe migrations/ directory.\n🛠️ Installation\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n🕺 OpenAPI Swagger Doc\nWhen making API changes, make sure to run npm run generate:swagger to generate any new Swagger document bits.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-checkIn order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🍕 Pizza service integration\nThis API integrates with the pizza service\nto accept requests for ingesting commits to the database.\nThe environment variables for this are:\nPIZZA_OVEN_HOST=\"http://example.com\"\nPIZZA_OVEN_API=80🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CouponModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssueSummaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenAiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PizzaOvenModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlogSummaryModule\n\n\n\ncluster_BlogSummaryModule_exports\n\n\n\ncluster_BlogSummaryModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CouponModule\n\n\n\ncluster_CouponModule_exports\n\n\n\ncluster_CouponModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_IssueSummaryModule\n\n\n\ncluster_IssueSummaryModule_exports\n\n\n\ncluster_IssueSummaryModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_PizzaOvenModule\n\n\n\ncluster_PizzaOvenModule_exports\n\n\n\ncluster_PizzaOvenModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserListModule\n\n\n\ncluster_UserListModule_exports\n\n\n\ncluster_UserListModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nPizzaOvenModule\n\nPizzaOvenModule\n\nPizzaOvenModule -->\n\nApiServicesModule->PizzaOvenModule\n\n\n\n\n\nUserListModule\n\nUserListModule\n\nUserListModule -->\n\nApiServicesModule->UserListModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nBlogSummaryModule\n\nBlogSummaryModule\n\nAppModule -->\n\nBlogSummaryModule->AppModule\n\n\n\n\n\nBlogSummaryService \n\nBlogSummaryService \n\nBlogSummaryService  -->\n\nBlogSummaryModule->BlogSummaryService \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCouponModule\n\nCouponModule\n\nAuthModule -->\n\nCouponModule->AuthModule\n\n\n\nAppModule -->\n\nCouponModule->AppModule\n\n\n\n\n\nCouponService \n\nCouponService \n\nCouponService  -->\n\nCouponModule->CouponService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nIssueSummaryModule\n\nIssueSummaryModule\n\nAppModule -->\n\nIssueSummaryModule->AppModule\n\n\n\n\n\nIssueSummaryService \n\nIssueSummaryService \n\nIssueSummaryService  -->\n\nIssueSummaryModule->IssueSummaryService \n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nBlogSummaryModule -->\n\nOpenAiModule->BlogSummaryModule\n\n\n\nIssueSummaryModule -->\n\nOpenAiModule->IssueSummaryModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nOpenAiService \n\nOpenAiService \n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\nInsightsModule -->\n\nPizzaOvenModule->InsightsModule\n\n\n\nAppModule -->\n\nPizzaOvenModule->AppModule\n\n\n\n\n\nCommitAuthorsService \n\nCommitAuthorsService \n\nCommitAuthorsService  -->\n\nPizzaOvenModule->CommitAuthorsService \n\n\n\n\n\nCommitsService \n\nCommitsService \n\nCommitsService  -->\n\nPizzaOvenModule->CommitsService \n\n\n\n\n\nPizzaOvenService \n\nPizzaOvenService \n\nPizzaOvenService  -->\n\nPizzaOvenModule->PizzaOvenService \n\n\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestReviewService \n\nPullRequestReviewService \n\nPullRequestReviewService  -->\n\nPullRequestModule->PullRequestReviewService \n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAppModule -->\n\nUserListModule->AppModule\n\n\n\n\n\nUserListService \n\nUserListService \n\nUserListService  -->\n\nUserListModule->UserListService \n\n\n\n\n\nUserListStatsService \n\nUserListStatsService \n\nUserListStatsService  -->\n\nUserListModule->UserListStatsService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nUserListModule -->\n\nUserModule->UserListModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nBlogSummaryService\n\nBlogSummaryService\n\nBlogSummaryModule -->\n\nBlogSummaryService->BlogSummaryModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCouponService\n\nCouponService\n\nCouponModule -->\n\nCouponService->CouponModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nIssueSummaryService\n\nIssueSummaryService\n\nIssueSummaryModule -->\n\nIssueSummaryService->IssueSummaryModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\nCommitAuthorsService\n\nCommitAuthorsService\n\nPizzaOvenModule -->\n\nCommitAuthorsService->PizzaOvenModule\n\n\n\n\n\nCommitsService\n\nCommitsService\n\nPizzaOvenModule -->\n\nCommitsService->PizzaOvenModule\n\n\n\n\n\nPizzaOvenService\n\nPizzaOvenService\n\nPizzaOvenModule -->\n\nPizzaOvenService->PizzaOvenModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestReviewService\n\nPullRequestReviewService\n\nPullRequestModule -->\n\nPullRequestReviewService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserListService\n\nUserListService\n\nUserListModule -->\n\nUserListService->UserListModule\n\n\n\n\n\nUserListStatsService\n\nUserListStatsService\n\nUserListModule -->\n\nUserListStatsService->UserListModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        30 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    34 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    36 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    43 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    59 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.50.0\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            generateSwaggerJson   (src/.../generate-swagger.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            GetPrevDateISOString   (src/.../datetimes.ts)\n                        \n                        \n                            HacktoberfestConfig   (src/.../hacktoberfest.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            PizzaConfig   (src/.../pizza.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            swaggerMarkdownDescription   (src/.../swagger.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) =>\n  applyDecorators(\n    ApiExtraModels(PageDto, model),\n    ApiOkResponse({\n      description: \"Successfully received model list\",\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(PageDto) },\n          {\n            properties: {\n              data: {\n                type: \"array\",\n                items: { $ref: getSchemaPath(model) },\n              },\n            },\n          },\n        ],\n      },\n    })\n  )\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/generate-swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSwaggerJson\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {\n  const app = await NestFactory.create(AppModule, new FastifyAdapter({ logger: false }), {\n    bufferLogs: true,\n    rawBody: true,\n  });\n\n  const apiDomain = \"api.opensauced.pizza\";\n\n  const markdownDescription = swaggerMarkdownDescription(apiDomain);\n\n  app.useLogger(app.get(Logger));\n  app.flushLogs();\n  app.enableCors();\n  app.enableVersioning({\n    type: VersioningType.URI,\n    defaultVersion: String(major(\"1.8.0\", { loose: false })),\n  });\n\n  const options = new DocumentBuilder();\n\n  options\n    .addServer(`https://${apiDomain}`, \"Production\", {})\n    .addServer(`https://beta.${apiDomain}`, \"Beta\", {})\n    .addServer(`https://alpha.${apiDomain}`, \"Alpha\", {})\n    .setTitle(`@open-sauced/api.opensauced.pizza`)\n    .setDescription(markdownDescription)\n    .setVersion(`1`)\n    .setContact(\"Open Sauced\", \"https://opensauced.pizza\", \"hello@opensauced.pizza\")\n    .setTermsOfService(\"https://github.com/open-sauced/code-of-conduct\")\n    .setLicense(`The MIT License`, `https://opensource.org/licenses/mit`)\n    .addBearerAuth();\n\n  const document = SwaggerModule.createDocument(app, options.build(), {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  });\n\n  const yamlSwaggerDoc = yaml.stringify(document);\n\n  // write the yaml swagger doc to the root project directory anytime the server starts\n  await writeFile(path.resolve(process.cwd(), \"swagger.yaml\"), yamlSwaggerDoc, \"utf8\");\n\n  await app.close();\n}\n                    \n                \n\n\n        \n    \n\n    src/common/util/datetimes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetPrevDateISOString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (prev_start_date = 0): string =>\n  new Date(Date.now() - prev_start_date * 24 * 60 * 60 * 1000).toISOString()\n                    \n                \n\n\n        \n    \n\n    src/config/hacktoberfest.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HacktoberfestConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"hacktoberfest\", () => ({\n  year: String(process.env.HACKTOBERFEST_YEAR ?? `${new Date().getFullYear()}`),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/pizza.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PizzaConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"pizza\", () => ({\n  host: String(process.env.PIZZA_OVEN_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.PIZZA_OVEN_PORT ?? \"80\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/util/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerMarkdownDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (apiDomain: string) => `\n## Swagger-UI API Documentation\n\nThis REST API can be used to create, read, update or delete data from the Open Sauced community platform.\nThe Swagger-UI provides useful information to get started and an overview of all available resources.\nEach API route is clickable and has their own detailed description on how to use it.\nThe base URL for the API is [${apiDomain}](https://${apiDomain}).\n\n[comment]: # (TODO: add bearer auth information)\n\n## Rate limiting\n\nEvery IP address is allowed to perform 5000 requests per hour.\nThis is measured by saving the date of the initial request and counting all requests in the next hour.\nWhen an IP address goes over the limit, HTTP status code 429 is returned.\nThe returned HTTP headers of any API request show the current rate limit status:\n\nheader | description\n--- | ---\n\\`X-RateLimit-Limit\\` | The maximum number of requests allowed per hour\n\\`X-RateLimit-Remaining\\` | The number of requests remaining in the current rate limit window\n\\`X-RateLimit-Reset\\` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)\n\n[comment]: # (TODO: add pagination information)\n\n## Common response codes\n\nEach route shows for each method which data they expect and which they will respond when the call succeeds.\nThe table below shows most common response codes you can receive from our endpoints.\n\ncode | condition\n--- | ---\n[\\`200\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [\\`GET\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data.\n[\\`201\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [\\`POST\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data.\n[\\`204\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [\\`PATCH\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [\\`DELETE\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally.\n[\\`400\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information.\n[\\`401\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information.\n[\\`403\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information.\n[\\`404\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information.\n[\\`429\\`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.\n\n## Additional links`\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return request.user;\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return parseInt(request.user?.user_metadata.sub as string, 10);\n})\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"highlight_created\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
